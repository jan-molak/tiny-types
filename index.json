[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/TinyType.ts",
    "content": "import { ensure } from './ensure';\nimport { equal, significantFieldsOf, stringify, toJSON } from './objects';\nimport { isDefined } from './predicates';\nimport { JSONValue, Serialisable } from './types';\n\n/**\n * @desc The {@link TinyTypeOf} can be used to define simple\n * single-value {@link TinyType}s on a single line.\n *\n * It contains a check preventing the constructor argument from being undefined (see {@link isDefined});\n *\n * @experimental\n *\n * @example\n * class Username extends TinyTypeOf<string>() {}\n *\n * @example\n * class Age extends TinyTypeOf<number>() {}\n *\n * @returns a dynamically created base class your tiny type can extend from\n */\nexport function TinyTypeOf<T>(): new(_: T) => { value: T } & TinyType {\n    return class extends TinyType {\n        constructor(public readonly value: T) {\n            super();\n            ensure(this.constructor.name, value, isDefined());\n        }\n    };\n}\n\n/**\n * @desc The {@link TinyType} abstract class should be used as a base class for your own Tiny Types.\n *\n * If you want the Tiny Type to wrap a single value use the {@link TinyTypeOf} instead as it will save you some keystrokes.\n *\n * @example\n * class FirstName extends TinyTypeOf<string>() {}\n * class LastName  extends TinyTypeOf<string>() {}\n * class Age       extends TinyTypeOf<number>() {}\n *\n * class Person extends TinyType {\n *   constructor(public readonly firstName: FirstName,\n *               public readonly lastName:  LastName,\n *               public readonly age:       Age,\n *   ) {\n *     super();\n *   }\n * }\n */\nexport abstract class TinyType implements Serialisable {\n\n    /**\n     * @desc Compares two tiny types by value\n     *\n     * @example <caption>Comparing simple types</caption>\n     * class Id extends TinyTypeOf<string>() {}\n     *\n     * const id = new Id(`3cc0852d-fda7-4f61-874e-0cfadbd6182a`);\n     *\n     * id.equals(id) === true\n     *\n     * @example <caption>Comparing complex types recursively</caption>\n     * class FirstName extends TinyTypeOf<string>() {}\n     * class LastName  extends TinyTypeOf<string>() {}\n     * class Age       extends TinyTypeOf<number>() {}\n     *\n     * class Person extends TinyType {\n     *   constructor(public readonly firstName: FirstName,\n     *               public readonly lastName:  LastName,\n     *               public readonly age:       Age,\n     *   ) {\n     *     super();\n     *   }\n     * }\n     *\n     * const p1 = new Person(new FirstName('John'), new LastName('Smith'), new Age(42)),\n     *       p2 = new Person(new FirstName('John'), new LastName('Smith'), new Age(42));\n     *\n     * p1.equals(p2) === true\n     *\n     * @param {TinyType} another\n     * @returns {boolean}\n     */\n    equals(another: TinyType): boolean {\n        return equal(this, another);\n    }\n\n    /**\n     * @desc Serialises the object to its string representation\n     *\n     * @returns {string}\n     */\n    toString(): string {\n        return stringify(this);\n    }\n\n    /**\n     * @desc Serialises the object to a JSON representation.\n     *\n     * @example\n     * class FirstName extends TinyTypeOf<string>() {}\n     *\n     * const name = new FirstName('Jan');\n     *\n     * name.toJSON() === 'Jan'\n     *\n     * @example\n     * class FirstName extends TinyTypeOf<string>() {}\n     * class LastName  extends TinyTypeOf<string>() {}\n     * class Age       extends TinyTypeOf<number>() {}\n     *\n     * class Person extends TinyType {\n     *   constructor(public readonly firstName: FirstName,\n     *               public readonly lastName:  LastName,\n     *               public readonly age:       Age,\n     *   ) {\n     *     super();\n     *   }\n     * }\n     *\n     * const person = new Person(new FirstName('John'), new LastName('Smith'), new Age(42)),\n     *\n     * person.toJSON() === { firstName: 'John', lastName: 'Smith', age: 42 }\n     *\n     * @returns {JSONValue}\n     */\n    toJSON(): JSONValue | undefined {\n        const fields = significantFieldsOf(this);\n\n        if (fields.length === 1) {\n            return toJSON(this[fields[0]]);\n        }\n\n        return fields.reduce((acc, field) => {\n            acc[field] = toJSON(this[field]);\n            return acc;\n        }, {}) as JSONValue;\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/src/TinyType.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "function",
    "name": "TinyTypeOf",
    "memberof": "src/TinyType.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/TinyType.ts~TinyTypeOf",
    "access": "public",
    "export": true,
    "importPath": "tiny-types/lib/TinyType",
    "importStyle": "{TinyTypeOf}",
    "description": "The {@link TinyTypeOf} can be used to define simple\nsingle-value {@link TinyType}s on a single line.\n\nIt contains a check preventing the constructor argument from being undefined (see {@link isDefined});",
    "examples": [
      "class Username extends TinyTypeOf<string>() {}",
      "class Age extends TinyTypeOf<number>() {}"
    ],
    "lineNumber": 26,
    "experimental": true,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "a dynamically created base class your tiny type can extend from"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "a dynamically created base class your tiny type can extend from"
    },
    "params": []
  },
  {
    "__docId__": 50,
    "kind": "class",
    "name": "TinyType",
    "memberof": "src/TinyType.ts",
    "static": true,
    "longname": "src/TinyType.ts~TinyType",
    "access": "public",
    "export": true,
    "importPath": "tiny-types/lib/TinyType",
    "importStyle": "{TinyType}",
    "description": "The {@link TinyType} abstract class should be used as a base class for your own Tiny Types.\n\nIf you want the Tiny Type to wrap a single value use the {@link TinyTypeOf} instead as it will save you some keystrokes.",
    "examples": [
      "class FirstName extends TinyTypeOf<string>() {}\nclass LastName  extends TinyTypeOf<string>() {}\nclass Age       extends TinyTypeOf<number>() {}\n\nclass Person extends TinyType {\n  constructor(public readonly firstName: FirstName,\n              public readonly lastName:  LastName,\n              public readonly age:       Age,\n  ) {\n    super();\n  }\n}"
    ],
    "lineNumber": 60,
    "interface": false
  },
  {
    "__docId__": 51,
    "kind": "method",
    "name": "equals",
    "memberof": "src/TinyType.ts~TinyType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/TinyType.ts~TinyType#equals",
    "access": "public",
    "description": "Compares two tiny types by value",
    "examples": [
      "<caption>Comparing simple types</caption>\nclass Id extends TinyTypeOf<string>() {}\n\nconst id = new Id(`3cc0852d-fda7-4f61-874e-0cfadbd6182a`);\n\nid.equals(id) === true",
      "<caption>Comparing complex types recursively</caption>\nclass FirstName extends TinyTypeOf<string>() {}\nclass LastName  extends TinyTypeOf<string>() {}\nclass Age       extends TinyTypeOf<number>() {}\n\nclass Person extends TinyType {\n  constructor(public readonly firstName: FirstName,\n              public readonly lastName:  LastName,\n              public readonly age:       Age,\n  ) {\n    super();\n  }\n}\n\nconst p1 = new Person(new FirstName('John'), new LastName('Smith'), new Age(42)),\n      p2 = new Person(new FirstName('John'), new LastName('Smith'), new Age(42));\n\np1.equals(p2) === true"
    ],
    "lineNumber": 103,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "TinyType"
        ],
        "spread": false,
        "optional": false,
        "name": "another",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 52,
    "kind": "method",
    "name": "toString",
    "memberof": "src/TinyType.ts~TinyType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/TinyType.ts~TinyType#toString",
    "access": "public",
    "description": "Serialises the object to its string representation",
    "lineNumber": 119,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 53,
    "kind": "method",
    "name": "toJSON",
    "memberof": "src/TinyType.ts~TinyType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/TinyType.ts~TinyType#toJSON",
    "access": "public",
    "description": "Serialises the object to a JSON representation.",
    "examples": [
      "class FirstName extends TinyTypeOf<string>() {}\n\nconst name = new FirstName('Jan');\n\nname.toJSON() === 'Jan'",
      "class FirstName extends TinyTypeOf<string>() {}\nclass LastName  extends TinyTypeOf<string>() {}\nclass Age       extends TinyTypeOf<number>() {}\n\nclass Person extends TinyType {\n  constructor(public readonly firstName: FirstName,\n              public readonly lastName:  LastName,\n              public readonly age:       Age,\n  ) {\n    super();\n  }\n}\n\nconst person = new Person(new FirstName('John'), new LastName('Smith'), new Age(42)),\n\nperson.toJSON() === { firstName: 'John', lastName: 'Smith', age: 42 }"
    ],
    "lineNumber": 158,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{JSONValue}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "JSONValue"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 54,
    "kind": "file",
    "name": "src/check.ts",
    "content": "import { ensure } from './ensure';\nimport { deprecated } from './objects';\n\n/**\n * @desc This function has been deprecated. Please use {@link ensure} instead\n * @deprecated\n */\nexport const check = deprecated('Please use `ensure` instead')(ensure);\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/src/check.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 55,
    "kind": "variable",
    "name": "check",
    "memberof": "src/check.ts",
    "static": true,
    "longname": "src/check.ts~check",
    "access": "public",
    "export": true,
    "importPath": "tiny-types/lib/check",
    "importStyle": "{check}",
    "description": "This function has been deprecated. Please use {@link ensure} instead",
    "lineNumber": 7,
    "deprecated": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "file",
    "name": "src/ensure.ts",
    "content": "import { and, Failure, Predicate } from './predicates';\n\n/**\n * @desc The `ensure` function verifies if the value meets the specified {Predicate}s.\n *\n * @example <caption>Basic usage</caption>\n * import { ensure, isDefined } from 'tiny-types'\n *\n * const username = 'jan-molak'\n * ensure('Username', username, isDefined());\n *\n * @example <caption>Ensuring validity of a domain object upon creation</caption>\n * import { TinyType, ensure, isDefined, isInteger, isInRange } from 'tiny-types'\n *\n * class Age extends TinyType {\n *   constructor(public readonly value: number) {\n *     ensure('Age', value, isDefined(), isInteger(), isInRange(0, 125));\n *   }\n * }\n *\n * @param {string} name - the name of the value to check.\n *      This name will be included in the error message should the check fail\n * @param {T} value - the argument to check\n * @param {...Array<Predicate<T>>} predicates - a list of predicates to check the value against\n * @returns {T} - if the original value passes all the predicates, it's returned from the function\n */\nexport function ensure<T>(name: string, value: T, ...predicates: Array<Predicate<T>>): T {\n    const result = and(...predicates).check(value);\n\n    if (result instanceof Failure) {\n        throw new Error(`${ name } should ${ result.description }`);    // eslint-disable-line unicorn/prefer-type-error\n    }\n\n    return result.value;\n}\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/src/ensure.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 57,
    "kind": "function",
    "name": "ensure",
    "memberof": "src/ensure.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/ensure.ts~ensure",
    "access": "public",
    "export": true,
    "importPath": "tiny-types/lib/ensure",
    "importStyle": "{ensure}",
    "description": "The `ensure` function verifies if the value meets the specified {Predicate}s.",
    "examples": [
      "<caption>Basic usage</caption>\nimport { ensure, isDefined } from 'tiny-types'\n\nconst username = 'jan-molak'\nensure('Username', username, isDefined());",
      "<caption>Ensuring validity of a domain object upon creation</caption>\nimport { TinyType, ensure, isDefined, isInteger, isInRange } from 'tiny-types'\n\nclass Age extends TinyType {\n  constructor(public readonly value: number) {\n    ensure('Age', value, isDefined(), isInteger(), isInRange(0, 125));\n  }\n}"
    ],
    "lineNumber": 40,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{T} - if the original value passes all the predicates, it's returned from the function"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "the name of the value to check.\n     This name will be included in the error message should the check fail"
      },
      {
        "nullable": null,
        "types": [
          "T"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "the argument to check"
      },
      {
        "nullable": null,
        "types": [
          "...Array<Predicate<T>>"
        ],
        "spread": true,
        "optional": false,
        "name": "predicates",
        "description": "a list of predicates to check the value against"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "T"
      ],
      "spread": false,
      "description": "if the original value passes all the predicates, it's returned from the function"
    }
  },
  {
    "__docId__": 58,
    "kind": "file",
    "name": "src/index.ts",
    "content": "export * from './check';\nexport * from './ensure';\nexport * from './match';\nexport * from './objects/deprecated';\nexport * from './pattern-matching/PatternMatcher';\nexport * from './predicates';\nexport * from './TinyType';\nexport { JSONArray, JSONObject, JSONPrimitive, JSONValue, Serialisable } from './types';\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/src/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 59,
    "kind": "file",
    "name": "src/match.ts",
    "content": "import { IdentityMatcher, ObjectMatcher, PatternMatcher, StringMatcher } from './pattern-matching';\nimport { ConstructorAbstractOrInstance } from './types';\n\n// boolean equality matcher\nexport function match<Output_Type>(_: boolean): {\n\n    when: (\n        pattern: boolean,\n        transformation: (_: boolean) => Output_Type,\n    ) => PatternMatcher<boolean, boolean, boolean, Output_Type>,\n};\n\n// number equality matcher\nexport function match<Output_Type>(_: number): {\n\n    when: (\n        pattern: number,\n        transformation: (_: number) => Output_Type,\n    ) => PatternMatcher<number, number, number, Output_Type>,\n};\n\n// symbol equality matcher\nexport function match<Output_Type>(_: symbol): {\n\n    when: (\n        pattern: symbol,\n        transformation: (_: symbol) => Output_Type,\n    ) => PatternMatcher<symbol, symbol, symbol, Output_Type>,\n};\n\n// string equality and regexp matcher\nexport function match<Output_Type>(_: string): {\n    when: (\n        pattern: string | RegExp,\n        transformation: (_: string) => Output_Type,\n    ) => PatternMatcher<string, string | RegExp, string, Output_Type>,\n};\n\n// type matcher\nexport function match<Input_Type, Output_Type>(_: Input_Type): {\n\n    when: <MT extends Input_Type>(\n        pattern: ConstructorAbstractOrInstance<MT>,\n        transformation: (v: MT) => Output_Type,\n    ) => PatternMatcher<Input_Type, ConstructorAbstractOrInstance<Input_Type>, Input_Type, Output_Type>,\n};\n\n/**\n * @experimental\n *\n * @param value\n * @returns {PatternMatcher<any, any, any, any>}\n */\nexport function match(value: any): PatternMatcher<any, any, any, any> { // eslint-disable-line @typescript-eslint/explicit-module-boundary-types\n    switch (true) {\n        case typeof value === 'string':\n            return new StringMatcher(value as string);\n        case typeof value === 'object':\n            return new ObjectMatcher(value);\n        default:\n            return new IdentityMatcher(value);\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/src/match.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 60,
    "kind": "function",
    "name": "match",
    "memberof": "src/match.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/match.ts~match",
    "access": "public",
    "export": true,
    "importPath": "tiny-types/lib/match",
    "importStyle": "{match}",
    "description": "",
    "lineNumber": 18,
    "experimental": true,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{PatternMatcher<any, any, any, any>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PatternMatcher<any, any, any, any>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 61,
    "kind": "file",
    "name": "src/objects/deprecated.ts",
    "content": "import { Constructor } from '../types';\n\nexport type Logger = (_: string) => void;\n\n/**\n * @desc A decorator to mark a class, method or function as deprecated and make it log a warning whenever it is used.\n * Please see the tests for examples of usage.\n *\n * @param {string} message - describes the alternative implementation that should be used instead\n *                  of the deprecated method/function/class\n * @param {Logger} log - a function that handles the printing of the message,\n *                  such as {@link console.warn}\n */\nexport function deprecated(message = '', log: Logger = console.warn): (target: any, propertyKey?: string, descriptor?: any) => any {    // tslint:disable-line:no-console\n    // eslint-disable-next-line unicorn/consistent-function-scoping,no-prototype-builtins\n    const hasPrototype = (target: { hasOwnProperty(_: string): boolean }): boolean => target.hasOwnProperty('prototype');\n\n    return (target: any, propertyKey?: string, descriptor?: any): any => {         // tslint:disable-line:ban-types\n        if (target && propertyKey && descriptor) {\n            return deprecateMethod(message, target, propertyKey, descriptor, log);\n        }\n        else if (hasPrototype(target)) {\n            return deprecateClass(message, target, log);\n        }\n        else {\n            throw new Error(`Only a class, method or function can be marked as deprecated. ${typeof target} given.`);\n        }\n    };\n}\n\nfunction deprecateClass(message: string, target: Constructor<any>, log: (...args: any[]) => void): Constructor<any> {\n    return class extends target {\n        constructor(...args: any[]) {\n            log(`${target.name} has been deprecated. ${ message }`.trim());\n\n            super(...args);\n        }\n    };\n}\n\nfunction deprecateMethod<T extends object>(message: string, target: T, propertyKey: string, descriptor: any, log: (...args: any[]) => void) {\n    const originalMethod = descriptor.value;\n\n    descriptor.value = function (...args: any[]) {\n        log(`${target.constructor.name}#${propertyKey} has been deprecated. ${ message }`.trim());\n\n        return originalMethod.apply(this, args);\n    };\n\n    return descriptor;\n}\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/src/objects/deprecated.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 62,
    "kind": "function",
    "name": "deprecated",
    "memberof": "src/objects/deprecated.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/objects/deprecated.ts~deprecated",
    "access": "public",
    "export": true,
    "importPath": "tiny-types/lib/objects/deprecated",
    "importStyle": "{deprecated}",
    "description": "A decorator to mark a class, method or function as deprecated and make it log a warning whenever it is used.\nPlease see the tests for examples of usage.",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "describes the alternative implementation that should be used instead\n                 of the deprecated method/function/class"
      },
      {
        "nullable": null,
        "types": [
          "Logger"
        ],
        "spread": false,
        "optional": false,
        "name": "log",
        "description": "a function that handles the printing of the message,\n                 such as {@link console.warn}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 63,
    "kind": "function",
    "name": "deprecateClass",
    "memberof": "src/objects/deprecated.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/objects/deprecated.ts~deprecateClass",
    "access": "public",
    "export": false,
    "importPath": "tiny-types/lib/objects/deprecated",
    "importStyle": null,
    "description": "",
    "lineNumber": 31,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Constructor"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "log",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Constructor"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 64,
    "kind": "function",
    "name": "deprecateMethod",
    "memberof": "src/objects/deprecated.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/objects/deprecated.ts~deprecateMethod",
    "access": "public",
    "export": false,
    "importPath": "tiny-types/lib/objects/deprecated",
    "importStyle": null,
    "description": "",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "T"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "propertyKey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "descriptor",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "log",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 65,
    "kind": "file",
    "name": "src/objects/equal.ts",
    "content": "import { significantFieldsOf } from './significantFields';\n\n/**\n * @access private\n */\nexport function equal(v1: any, v2: any): boolean {  // eslint-disable-line @typescript-eslint/explicit-module-boundary-types\n    switch (true) {\n        case ! sameType(v1, v2):\n            return false;\n        case both(arePrimitives, v1, v2):\n            return checkIdentityOf(v1, v2);\n        case both(areObjects, v1, v2) && sameClass(v1, v2) && both(areDates, v1, v2):\n            return checkTimestamps(v1, v2);\n        case both(areObjects, v1, v2) && sameClass(v1, v2):\n            return checkSignificantFieldsOf(v1, v2);\n    }\n\n    return false;\n}\n\nconst areObjects     = (_: any) => new Object(_) === _;\nconst areDates       = (_: any) => _ instanceof Date;\nconst arePrimitives  = (_: any) => ! areObjects(_); // arrays are objects\n\nfunction both(condition: (_: any) => boolean, v1: any, v2: any): boolean {\n    return condition(v1) && condition(v2);\n}\n\nconst sameType  = (v1: any, v2: any) => typeof v1 === typeof v2;\nconst sameClass = (v1: any, v2: any) => (v1.constructor && v2 instanceof v1.constructor) || (v2.constructor && v1 instanceof  v2.constructor);\nconst sameLength = (v1: { length: number }, v2: { length: number }) => v1.length === v2.length;\n\nfunction checkIdentityOf(v1: any, v2: any) {\n    return v1 === v2;\n}\n\nfunction checkTimestamps(v1: Date, v2: Date) {\n    return v1.getTime() === v2.getTime();\n}\n\nfunction checkSignificantFieldsOf(o1: object, o2: object) {\n    const\n        fieldsOfObject1 = significantFieldsOf(o1),\n        fieldsOfObject2 = significantFieldsOf(o2);\n\n    if (! sameLength(fieldsOfObject1, fieldsOfObject2)) {\n        return false;\n    }\n\n    return fieldsOfObject1.reduce((previousFieldsAreEqual: boolean, field: string) => {\n        const currentFieldIsEqual = equal(o1[field], o2[field]);\n        return previousFieldsAreEqual && currentFieldIsEqual;\n    }, true);\n}\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/src/objects/equal.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 66,
    "kind": "function",
    "name": "equal",
    "memberof": "src/objects/equal.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/objects/equal.ts~equal",
    "access": "private",
    "export": true,
    "importPath": "tiny-types/lib/objects/equal",
    "importStyle": "{equal}",
    "description": "",
    "lineNumber": 17,
    "ignore": true,
    "params": [
      {
        "name": "v1",
        "types": [
          "*"
        ]
      },
      {
        "name": "v2",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 67,
    "kind": "function",
    "name": "areObjects",
    "memberof": "src/objects/equal.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/objects/equal.ts~areObjects",
    "access": "public",
    "export": false,
    "importPath": "tiny-types/lib/objects/equal",
    "importStyle": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "params": [
      {
        "name": "_",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 68,
    "kind": "function",
    "name": "areDates",
    "memberof": "src/objects/equal.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/objects/equal.ts~areDates",
    "access": "public",
    "export": false,
    "importPath": "tiny-types/lib/objects/equal",
    "importStyle": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [
      {
        "name": "_",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 69,
    "kind": "function",
    "name": "arePrimitives",
    "memberof": "src/objects/equal.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/objects/equal.ts~arePrimitives",
    "access": "public",
    "export": false,
    "importPath": "tiny-types/lib/objects/equal",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "params": [
      {
        "name": "_",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 70,
    "kind": "function",
    "name": "both",
    "memberof": "src/objects/equal.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/objects/equal.ts~both",
    "access": "public",
    "export": false,
    "importPath": "tiny-types/lib/objects/equal",
    "importStyle": null,
    "description": "",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "condition",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "v1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "v2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 71,
    "kind": "function",
    "name": "sameType",
    "memberof": "src/objects/equal.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/objects/equal.ts~sameType",
    "access": "public",
    "export": false,
    "importPath": "tiny-types/lib/objects/equal",
    "importStyle": null,
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "params": [
      {
        "name": "v1",
        "types": [
          "*"
        ]
      },
      {
        "name": "v2",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 72,
    "kind": "function",
    "name": "sameClass",
    "memberof": "src/objects/equal.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/objects/equal.ts~sameClass",
    "access": "public",
    "export": false,
    "importPath": "tiny-types/lib/objects/equal",
    "importStyle": null,
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "params": [
      {
        "name": "v1",
        "types": [
          "*"
        ]
      },
      {
        "name": "v2",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 73,
    "kind": "function",
    "name": "sameLength",
    "memberof": "src/objects/equal.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/objects/equal.ts~sameLength",
    "access": "public",
    "export": false,
    "importPath": "tiny-types/lib/objects/equal",
    "importStyle": null,
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "params": [
      {
        "name": "v1",
        "types": [
          "*"
        ]
      },
      {
        "name": "v2",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 74,
    "kind": "function",
    "name": "checkIdentityOf",
    "memberof": "src/objects/equal.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/objects/equal.ts~checkIdentityOf",
    "access": "public",
    "export": false,
    "importPath": "tiny-types/lib/objects/equal",
    "importStyle": null,
    "description": "",
    "lineNumber": 33,
    "params": [
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "v1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "v2",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 75,
    "kind": "function",
    "name": "checkTimestamps",
    "memberof": "src/objects/equal.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/objects/equal.ts~checkTimestamps",
    "access": "public",
    "export": false,
    "importPath": "tiny-types/lib/objects/equal",
    "importStyle": null,
    "description": "",
    "lineNumber": 37,
    "params": [
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "v1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "v2",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 76,
    "kind": "function",
    "name": "checkSignificantFieldsOf",
    "memberof": "src/objects/equal.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/objects/equal.ts~checkSignificantFieldsOf",
    "access": "public",
    "export": false,
    "importPath": "tiny-types/lib/objects/equal",
    "importStyle": null,
    "description": "",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "o1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "o2",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 77,
    "kind": "file",
    "name": "src/objects/index.ts",
    "content": "export * from './deprecated';\nexport * from './equal';\nexport * from './isObject';\nexport * from './isRecord';\nexport * from './significantFields';\nexport * from './stringify';\nexport * from './toJSON';\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/src/objects/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 78,
    "kind": "file",
    "name": "src/objects/isObject.ts",
    "content": "/**\n * @access private\n */\nexport function isObject(value: unknown): value is object {\n    return value !== null\n        && value !== undefined\n        && typeof value === 'object'\n        && Array.isArray(value) === false\n        && Object.prototype.toString.call(value) === '[object Object]';\n}\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/src/objects/isObject.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 79,
    "kind": "function",
    "name": "isObject",
    "memberof": "src/objects/isObject.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/objects/isObject.ts~isObject",
    "access": "private",
    "export": true,
    "importPath": "tiny-types/lib/objects/isObject",
    "importStyle": "{isObject}",
    "description": "",
    "lineNumber": 12,
    "ignore": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 80,
    "kind": "file",
    "name": "src/objects/isRecord.ts",
    "content": "import { isObject } from './isObject';\n\nexport function isRecord(value: unknown): value is Record<any, any> {\n    if (! isObject(value)) {\n        return false;\n    }\n\n    // It has modified constructor\n    if (value.constructor === undefined) {\n        return true;\n    }\n\n    // It has modified prototype\n    if (! isObject(value.constructor.prototype)) {\n        return false;\n    }\n\n    // If constructor does not have an Object-specific method\n    if (! Object.prototype.hasOwnProperty.call(value.constructor.prototype, 'isPrototypeOf')) {\n        return false;\n    }\n\n    // Most likely a plain Object\n    return true;\n}\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/src/objects/isRecord.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 81,
    "kind": "function",
    "name": "isRecord",
    "memberof": "src/objects/isRecord.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/objects/isRecord.ts~isRecord",
    "access": "public",
    "export": true,
    "importPath": "tiny-types/lib/objects/isRecord",
    "importStyle": "{isRecord}",
    "description": "",
    "lineNumber": 3,
    "params": [
      {
        "nullable": null,
        "types": [
          "unknown"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 82,
    "kind": "file",
    "name": "src/objects/significantFields.ts",
    "content": "/**\n * @access private\n *\n * @param {object|Array} o\n * @returns {string[]}\n */\nexport function significantFieldsOf(o: { [_: string]: any }): string[] {\n    return Object.getOwnPropertyNames(o)\n        .filter(field => typeof o[field] !== 'function')\n        .sort();\n}\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/src/objects/significantFields.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 83,
    "kind": "function",
    "name": "significantFieldsOf",
    "memberof": "src/objects/significantFields.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/objects/significantFields.ts~significantFieldsOf",
    "access": "private",
    "export": true,
    "importPath": "tiny-types/lib/objects/significantFields",
    "importStyle": "{significantFieldsOf}",
    "description": "",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string[]}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 84,
    "kind": "file",
    "name": "src/objects/stringify.ts",
    "content": "import { significantFieldsOf } from './significantFields';\n\n/**\n * @access private\n */\nexport function stringify(v: unknown): string {\n    if (Array.isArray(v)) {\n        return `${v.constructor.name}(${ v.map(i => stringify(i)).join(', ') })`;\n    }\n\n    if (v instanceof Date) {\n        return v.toISOString();\n    }\n\n    if (isObject(v)) {\n        const fields = significantFieldsOf(v)\n            .map(field => ({ field, value: stringify(v[field]) }))\n            .reduce((acc: string[], current: { field: string, value: string }) => {\n                return acc.concat(`${ current.field }=${ current.value }`);\n            }, []);\n\n        return `${ v.constructor.name }(${ fields.join(', ') })`;\n    }\n\n    return String(v);\n}\n\nfunction isObject(value: any): value is object {\n    return new Object(value) === value;\n}\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/src/objects/stringify.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 85,
    "kind": "function",
    "name": "stringify",
    "memberof": "src/objects/stringify.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/objects/stringify.ts~stringify",
    "access": "private",
    "export": true,
    "importPath": "tiny-types/lib/objects/stringify",
    "importStyle": "{stringify}",
    "description": "",
    "lineNumber": 15,
    "ignore": true,
    "params": [
      {
        "name": "v",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 86,
    "kind": "function",
    "name": "isObject",
    "memberof": "src/objects/stringify.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/objects/stringify.ts~isObject",
    "access": "public",
    "export": false,
    "importPath": "tiny-types/lib/objects/stringify",
    "importStyle": null,
    "description": "",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 87,
    "kind": "file",
    "name": "src/objects/toJSON.ts",
    "content": "/* eslint-disable unicorn/filename-case */\nimport { JSONObject, JSONValue } from '../types';\nimport { isRecord } from './isRecord';\n\n/**\n * Serialises the object to a JSON representation.\n *\n * @param value\n */\nexport function toJSON(value: any): JSONValue | undefined { // eslint-disable-line @typescript-eslint/explicit-module-boundary-types\n    switch (true) {\n        case value && !! value.toJSON:\n            return value.toJSON();\n        case value && Array.isArray(value):\n            return value.map(v => {\n                return v === undefined\n                    ? null\n                    : toJSON(v) as JSONValue;\n            });\n        case value && value instanceof Map:\n            return mapToJSON(value);\n        case value && value instanceof Set:\n            return toJSON(Array.from(value));\n        case value && isRecord(value):\n            return recordToJSON(value);\n        case value && value instanceof Error:\n            return errorToJSON(value);\n        case isSerialisablePrimitive(value):\n            return value;\n        default:\n            return JSON.stringify(value);\n    }\n}\n\nfunction mapToJSON(map: Map<any, any>): JSONObject {\n    const serialised = Array.from(map, ([key, value]) => [ toJSON(key), toJSON(value) ]);\n\n    return Object.fromEntries(serialised);\n}\n\nfunction recordToJSON(value: Record<any, any>): JSONObject {\n    const serialised = Object.entries(value)\n        .map(([ k, v ]) => [ toJSON(k), toJSON(v) ]);\n\n    return Object.fromEntries(serialised);\n}\n\nfunction errorToJSON(value: Error): JSONObject {\n    return Object.getOwnPropertyNames(value)\n        .reduce((serialised, key) => {\n            serialised[key] = toJSON(value[key])\n            return serialised;\n        }, { }) as JSONObject;\n}\n\nfunction isSerialisableNumber(value: unknown): value is number {\n    return typeof value === 'number'\n        && ! Number.isNaN(value)\n        && value !== Number.NEGATIVE_INFINITY\n        && value !== Number.POSITIVE_INFINITY;\n}\n\nfunction isSerialisablePrimitive(value: unknown): value is string | boolean | number | null | undefined {\n    if (['string', 'boolean'].includes(typeof value)) {\n        return true;\n    }\n\n    if (value === null || value === undefined) {\n        return true;\n    }\n\n    return isSerialisableNumber(value);\n}\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/src/objects/toJSON.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 88,
    "kind": "function",
    "name": "toJSON",
    "memberof": "src/objects/toJSON.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/objects/toJSON.ts~toJSON",
    "access": "public",
    "export": true,
    "importPath": "tiny-types/lib/objects/toJSON",
    "importStyle": "{toJSON}",
    "description": "Serialises the object to a JSON representation.",
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 89,
    "kind": "function",
    "name": "mapToJSON",
    "memberof": "src/objects/toJSON.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/objects/toJSON.ts~mapToJSON",
    "access": "public",
    "export": false,
    "importPath": "tiny-types/lib/objects/toJSON",
    "importStyle": null,
    "description": "",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "Map"
        ],
        "spread": false,
        "optional": false,
        "name": "map",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "JSONObject"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 90,
    "kind": "function",
    "name": "recordToJSON",
    "memberof": "src/objects/toJSON.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/objects/toJSON.ts~recordToJSON",
    "access": "public",
    "export": false,
    "importPath": "tiny-types/lib/objects/toJSON",
    "importStyle": null,
    "description": "",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "Record"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "JSONObject"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 91,
    "kind": "function",
    "name": "errorToJSON",
    "memberof": "src/objects/toJSON.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/objects/toJSON.ts~errorToJSON",
    "access": "public",
    "export": false,
    "importPath": "tiny-types/lib/objects/toJSON",
    "importStyle": null,
    "description": "",
    "lineNumber": 48,
    "params": [
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "JSONObject"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 92,
    "kind": "function",
    "name": "isSerialisableNumber",
    "memberof": "src/objects/toJSON.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/objects/toJSON.ts~isSerialisableNumber",
    "access": "public",
    "export": false,
    "importPath": "tiny-types/lib/objects/toJSON",
    "importStyle": null,
    "description": "",
    "lineNumber": 56,
    "params": [
      {
        "nullable": null,
        "types": [
          "unknown"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 93,
    "kind": "function",
    "name": "isSerialisablePrimitive",
    "memberof": "src/objects/toJSON.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/objects/toJSON.ts~isSerialisablePrimitive",
    "access": "public",
    "export": false,
    "importPath": "tiny-types/lib/objects/toJSON",
    "importStyle": null,
    "description": "",
    "lineNumber": 63,
    "params": [
      {
        "nullable": null,
        "types": [
          "unknown"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 94,
    "kind": "file",
    "name": "src/pattern-matching/IdentityMatcher.ts",
    "content": "import { PatternMatcher } from './PatternMatcher';\nimport { MatchesIdentical } from './rules';\n\n/**\n * @access private\n */\nexport class IdentityMatcher<Input_Type, Output_Type> extends PatternMatcher<Input_Type, Input_Type, Input_Type, Output_Type> {\n\n    when(pattern: Input_Type, transformation: (v: Input_Type) => Output_Type): PatternMatcher<Input_Type, Input_Type, Input_Type, Output_Type> {\n        return new IdentityMatcher(\n            this.value,\n            this.rules.concat(new MatchesIdentical(pattern, transformation)),\n        );\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/src/pattern-matching/IdentityMatcher.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 95,
    "kind": "class",
    "name": "IdentityMatcher",
    "memberof": "src/pattern-matching/IdentityMatcher.ts",
    "static": true,
    "longname": "src/pattern-matching/IdentityMatcher.ts~IdentityMatcher",
    "access": "private",
    "export": true,
    "importPath": "tiny-types/lib/pattern-matching/IdentityMatcher",
    "importStyle": "{IdentityMatcher}",
    "description": "",
    "lineNumber": 12,
    "interface": false,
    "extends": [
      "src/pattern-matching/PatternMatcher.js~PatternMatcher"
    ],
    "ignore": true
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "when",
    "memberof": "src/pattern-matching/IdentityMatcher.ts~IdentityMatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pattern-matching/IdentityMatcher.ts~IdentityMatcher#when",
    "access": "public",
    "description": "",
    "lineNumber": 9,
    "params": [
      {
        "nullable": null,
        "types": [
          "Input_Type"
        ],
        "spread": false,
        "optional": false,
        "name": "pattern",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "transformation",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PatternMatcher"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 97,
    "kind": "file",
    "name": "src/pattern-matching/ObjectMatcher.ts",
    "content": "import { TinyType } from '../TinyType';\nimport { ConstructorAbstractOrInstance } from '../types';\nimport { PatternMatcher } from './PatternMatcher';\nimport { MatcherRule, MatchesEqualTinyType, MatchesIdentical, MatchesObjectsWithCommonPrototype } from './rules';\n\n/**\n * @access private\n */\nexport class ObjectMatcher<Input_Type, Output_Type> extends PatternMatcher<Input_Type, TinyType | ConstructorAbstractOrInstance<Input_Type>, TinyType | Input_Type, Output_Type> {\n\n    when<MT extends Input_Type>(pattern: ConstructorAbstractOrInstance<MT>, transformation: (v: MT) => Output_Type): ObjectMatcher<Input_Type, Output_Type>;\n    when(pattern: TinyType, transformation: (v: TinyType) => Output_Type): ObjectMatcher<Input_Type, Output_Type>;\n    when(pattern: Input_Type, transformation: (v: Input_Type) => Output_Type): ObjectMatcher<Input_Type, Output_Type>;\n    when(pattern: any, transformation: (v: any) => Output_Type) {   // eslint-disable-line @typescript-eslint/explicit-module-boundary-types\n        return new ObjectMatcher(\n            this.value,\n            this.rules.concat(this.rule(pattern, transformation)),\n        );\n    }\n\n    private rule(pattern: any, transformation: (v: any) => Output_Type): MatcherRule<any, Output_Type> {\n        switch (true) {\n            case pattern instanceof TinyType:\n                return new MatchesEqualTinyType<Output_Type>(pattern as TinyType, transformation);\n            case typeof pattern === 'function':\n                return new MatchesObjectsWithCommonPrototype<any, Output_Type>(pattern, transformation);\n            default:\n                return new MatchesIdentical<Input_Type, Output_Type>(pattern, transformation);\n        }\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/src/pattern-matching/ObjectMatcher.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 98,
    "kind": "class",
    "name": "ObjectMatcher",
    "memberof": "src/pattern-matching/ObjectMatcher.ts",
    "static": true,
    "longname": "src/pattern-matching/ObjectMatcher.ts~ObjectMatcher",
    "access": "private",
    "export": true,
    "importPath": "tiny-types/lib/pattern-matching/ObjectMatcher",
    "importStyle": "{ObjectMatcher}",
    "description": "",
    "lineNumber": 13,
    "interface": false,
    "extends": [
      "src/pattern-matching/PatternMatcher.js~PatternMatcher"
    ],
    "ignore": true
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "when",
    "memberof": "src/pattern-matching/ObjectMatcher.ts~ObjectMatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pattern-matching/ObjectMatcher.ts~ObjectMatcher#when",
    "access": "public",
    "description": "",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "pattern",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "transformation",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "rule",
    "memberof": "src/pattern-matching/ObjectMatcher.ts~ObjectMatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pattern-matching/ObjectMatcher.ts~ObjectMatcher#rule",
    "access": "public",
    "description": "",
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "pattern",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "transformation",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "MatcherRule"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 101,
    "kind": "file",
    "name": "src/pattern-matching/PatternMatcher.ts",
    "content": "import { List } from '../types';\nimport { MatcherRule, MatchesAnything } from './rules';\n\n/**\n * @access private\n */\nexport abstract class PatternMatcher<Input_Type, Pattern_Type, Matching_Type, Output_Type> {\n    constructor(\n        protected readonly value: Input_Type,\n        protected readonly rules: List<MatcherRule<Input_Type, Output_Type>> = []) {\n    }\n\n    abstract when(pattern: Pattern_Type, transformation: (v: Matching_Type) => Output_Type): PatternMatcher<Input_Type, Pattern_Type, Matching_Type, Output_Type>;\n\n    else(transformation: (v: Input_Type) => Output_Type): Output_Type {\n        const matching_rule = this.rules.find(m => m.matches(this.value));\n\n        return (matching_rule || new MatchesAnything(transformation)).execute(this.value);\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/src/pattern-matching/PatternMatcher.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 102,
    "kind": "class",
    "name": "PatternMatcher",
    "memberof": "src/pattern-matching/PatternMatcher.ts",
    "static": true,
    "longname": "src/pattern-matching/PatternMatcher.ts~PatternMatcher",
    "access": "private",
    "export": true,
    "importPath": "tiny-types/lib/pattern-matching/PatternMatcher",
    "importStyle": "{PatternMatcher}",
    "description": "",
    "lineNumber": 11,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 103,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/pattern-matching/PatternMatcher.ts~PatternMatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pattern-matching/PatternMatcher.ts~PatternMatcher#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true
  },
  {
    "__docId__": 104,
    "kind": "member",
    "name": "value",
    "memberof": "src/pattern-matching/PatternMatcher.ts~PatternMatcher",
    "static": false,
    "longname": "src/pattern-matching/PatternMatcher.ts~PatternMatcher#value",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 105,
    "kind": "member",
    "name": "rules",
    "memberof": "src/pattern-matching/PatternMatcher.ts~PatternMatcher",
    "static": false,
    "longname": "src/pattern-matching/PatternMatcher.ts~PatternMatcher#rules",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "else",
    "memberof": "src/pattern-matching/PatternMatcher.ts~PatternMatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pattern-matching/PatternMatcher.ts~PatternMatcher#else",
    "access": "public",
    "description": "",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "transformation",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Output_Type"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 107,
    "kind": "file",
    "name": "src/pattern-matching/StringMatcher.ts",
    "content": "import { PatternMatcher } from './PatternMatcher';\nimport { MatchesIdentical, MatchesRegExp } from './rules';\n\n/**\n * @access private\n */\nexport class StringMatcher<Output_Type> extends PatternMatcher<string, string | RegExp, string, Output_Type> {\n\n    when(pattern: string | RegExp, transformation: (v: string) => Output_Type): PatternMatcher<string, string | RegExp, string, Output_Type> {\n        const rule = pattern instanceof RegExp\n            ? new MatchesRegExp(pattern, transformation)\n            : new MatchesIdentical(pattern, transformation);\n\n        return new StringMatcher<Output_Type>(\n            this.value,\n            this.rules.concat(rule),\n        );\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/src/pattern-matching/StringMatcher.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 108,
    "kind": "class",
    "name": "StringMatcher",
    "memberof": "src/pattern-matching/StringMatcher.ts",
    "static": true,
    "longname": "src/pattern-matching/StringMatcher.ts~StringMatcher",
    "access": "private",
    "export": true,
    "importPath": "tiny-types/lib/pattern-matching/StringMatcher",
    "importStyle": "{StringMatcher}",
    "description": "",
    "lineNumber": 12,
    "interface": false,
    "extends": [
      "src/pattern-matching/PatternMatcher.js~PatternMatcher"
    ],
    "ignore": true
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "when",
    "memberof": "src/pattern-matching/StringMatcher.ts~StringMatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pattern-matching/StringMatcher.ts~StringMatcher#when",
    "access": "public",
    "description": "",
    "lineNumber": 9,
    "params": [
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "pattern",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "transformation",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PatternMatcher"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 110,
    "kind": "file",
    "name": "src/pattern-matching/index.ts",
    "content": "export * from './IdentityMatcher';\nexport * from './ObjectMatcher';\nexport * from './PatternMatcher';\nexport * from './StringMatcher';\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/src/pattern-matching/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 111,
    "kind": "file",
    "name": "src/pattern-matching/rules/MatcherRule.ts",
    "content": "/**\n * @access private\n */\nexport abstract class MatcherRule<Input_Type, Output_Type>{\n    constructor(\n        private readonly transformation: (v: Input_Type) => Output_Type,\n    ) {\n    }\n\n    abstract matches(value: Input_Type): boolean;\n\n    execute(value: Input_Type): Output_Type {\n        return this.transformation(value);\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/src/pattern-matching/rules/MatcherRule.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 112,
    "kind": "class",
    "name": "MatcherRule",
    "memberof": "src/pattern-matching/rules/MatcherRule.ts",
    "static": true,
    "longname": "src/pattern-matching/rules/MatcherRule.ts~MatcherRule",
    "access": "private",
    "export": true,
    "importPath": "tiny-types/lib/pattern-matching/rules/MatcherRule",
    "importStyle": "{MatcherRule}",
    "description": "",
    "lineNumber": 10,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 113,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/pattern-matching/rules/MatcherRule.ts~MatcherRule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pattern-matching/rules/MatcherRule.ts~MatcherRule#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 114,
    "kind": "member",
    "name": "transformation",
    "memberof": "src/pattern-matching/rules/MatcherRule.ts~MatcherRule",
    "static": false,
    "longname": "src/pattern-matching/rules/MatcherRule.ts~MatcherRule#transformation",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 115,
    "kind": "method",
    "name": "execute",
    "memberof": "src/pattern-matching/rules/MatcherRule.ts~MatcherRule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pattern-matching/rules/MatcherRule.ts~MatcherRule#execute",
    "access": "public",
    "description": "",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "Input_Type"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Output_Type"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 116,
    "kind": "file",
    "name": "src/pattern-matching/rules/MatchesAnything.ts",
    "content": "import { MatcherRule } from './MatcherRule';\n\n/**\n * @access private\n */\nexport class MatchesAnything<Input_Type, Output_Type> extends MatcherRule<Input_Type, Output_Type> {\n    constructor(transformation: (v: Input_Type) => Output_Type) {\n        super(transformation);\n    }\n\n    matches(_: Input_Type): boolean {\n        return true;\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/src/pattern-matching/rules/MatchesAnything.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 117,
    "kind": "class",
    "name": "MatchesAnything",
    "memberof": "src/pattern-matching/rules/MatchesAnything.ts",
    "static": true,
    "longname": "src/pattern-matching/rules/MatchesAnything.ts~MatchesAnything",
    "access": "private",
    "export": true,
    "importPath": "tiny-types/lib/pattern-matching/rules/MatchesAnything",
    "importStyle": "{MatchesAnything}",
    "description": "",
    "lineNumber": 11,
    "interface": false,
    "extends": [
      "src/pattern-matching/rules/MatcherRule.js~MatcherRule"
    ],
    "ignore": true
  },
  {
    "__docId__": 118,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/pattern-matching/rules/MatchesAnything.ts~MatchesAnything",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pattern-matching/rules/MatchesAnything.ts~MatchesAnything#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true
  },
  {
    "__docId__": 119,
    "kind": "method",
    "name": "matches",
    "memberof": "src/pattern-matching/rules/MatchesAnything.ts~MatchesAnything",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pattern-matching/rules/MatchesAnything.ts~MatchesAnything#matches",
    "access": "public",
    "description": "",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "Input_Type"
        ],
        "spread": false,
        "optional": false,
        "name": "_",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 120,
    "kind": "file",
    "name": "src/pattern-matching/rules/MatchesEqualTinyType.ts",
    "content": "import { TinyType } from '../../TinyType';\nimport { MatcherRule } from './MatcherRule';\n\n/**\n * @access private\n */\nexport class MatchesEqualTinyType<Output_Type> extends MatcherRule<TinyType, Output_Type> {\n    constructor(private readonly pattern: TinyType, transformation: (v: TinyType) => Output_Type) {\n        super(transformation);\n    }\n\n    matches(value: TinyType): boolean {\n        return this.pattern.equals(value);\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/src/pattern-matching/rules/MatchesEqualTinyType.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 121,
    "kind": "class",
    "name": "MatchesEqualTinyType",
    "memberof": "src/pattern-matching/rules/MatchesEqualTinyType.ts",
    "static": true,
    "longname": "src/pattern-matching/rules/MatchesEqualTinyType.ts~MatchesEqualTinyType",
    "access": "private",
    "export": true,
    "importPath": "tiny-types/lib/pattern-matching/rules/MatchesEqualTinyType",
    "importStyle": "{MatchesEqualTinyType}",
    "description": "",
    "lineNumber": 11,
    "interface": false,
    "extends": [
      "src/pattern-matching/rules/MatcherRule.js~MatcherRule"
    ],
    "ignore": true
  },
  {
    "__docId__": 122,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/pattern-matching/rules/MatchesEqualTinyType.ts~MatchesEqualTinyType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pattern-matching/rules/MatchesEqualTinyType.ts~MatchesEqualTinyType#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true
  },
  {
    "__docId__": 123,
    "kind": "member",
    "name": "pattern",
    "memberof": "src/pattern-matching/rules/MatchesEqualTinyType.ts~MatchesEqualTinyType",
    "static": false,
    "longname": "src/pattern-matching/rules/MatchesEqualTinyType.ts~MatchesEqualTinyType#pattern",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "matches",
    "memberof": "src/pattern-matching/rules/MatchesEqualTinyType.ts~MatchesEqualTinyType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pattern-matching/rules/MatchesEqualTinyType.ts~MatchesEqualTinyType#matches",
    "access": "public",
    "description": "",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "TinyType"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 125,
    "kind": "file",
    "name": "src/pattern-matching/rules/MatchesIdentical.ts",
    "content": "import { MatcherRule } from './MatcherRule';\n\n/**\n * @access private\n */\nexport class MatchesIdentical<Input_Type, Output_Type> extends MatcherRule<Input_Type, Output_Type> {\n    constructor(private readonly pattern: Input_Type, transformation: (v: Input_Type) => Output_Type) {\n        super(transformation);\n    }\n\n    matches(value: Input_Type): boolean {\n        return value === this.pattern;\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/src/pattern-matching/rules/MatchesIdentical.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 126,
    "kind": "class",
    "name": "MatchesIdentical",
    "memberof": "src/pattern-matching/rules/MatchesIdentical.ts",
    "static": true,
    "longname": "src/pattern-matching/rules/MatchesIdentical.ts~MatchesIdentical",
    "access": "private",
    "export": true,
    "importPath": "tiny-types/lib/pattern-matching/rules/MatchesIdentical",
    "importStyle": "{MatchesIdentical}",
    "description": "",
    "lineNumber": 11,
    "interface": false,
    "extends": [
      "src/pattern-matching/rules/MatcherRule.js~MatcherRule"
    ],
    "ignore": true
  },
  {
    "__docId__": 127,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/pattern-matching/rules/MatchesIdentical.ts~MatchesIdentical",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pattern-matching/rules/MatchesIdentical.ts~MatchesIdentical#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true
  },
  {
    "__docId__": 128,
    "kind": "member",
    "name": "pattern",
    "memberof": "src/pattern-matching/rules/MatchesIdentical.ts~MatchesIdentical",
    "static": false,
    "longname": "src/pattern-matching/rules/MatchesIdentical.ts~MatchesIdentical#pattern",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 129,
    "kind": "method",
    "name": "matches",
    "memberof": "src/pattern-matching/rules/MatchesIdentical.ts~MatchesIdentical",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pattern-matching/rules/MatchesIdentical.ts~MatchesIdentical#matches",
    "access": "public",
    "description": "",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "Input_Type"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 130,
    "kind": "file",
    "name": "src/pattern-matching/rules/MatchesObjectsWithCommonPrototype.ts",
    "content": "import { ConstructorOrAbstract } from '../../types';\nimport { MatcherRule } from './MatcherRule';\n\n/**\n * @access private\n */\nexport class MatchesObjectsWithCommonPrototype<Input_Type, Output_Type> extends MatcherRule<Input_Type, Output_Type> {\n    constructor(\n        private readonly pattern: ConstructorOrAbstract<Input_Type>,\n        transformation: (v: Input_Type) => Output_Type,\n    ) {\n        super(transformation);\n    }\n\n    matches(value: Input_Type): boolean {\n        return value instanceof this.pattern;\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/src/pattern-matching/rules/MatchesObjectsWithCommonPrototype.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 131,
    "kind": "class",
    "name": "MatchesObjectsWithCommonPrototype",
    "memberof": "src/pattern-matching/rules/MatchesObjectsWithCommonPrototype.ts",
    "static": true,
    "longname": "src/pattern-matching/rules/MatchesObjectsWithCommonPrototype.ts~MatchesObjectsWithCommonPrototype",
    "access": "private",
    "export": true,
    "importPath": "tiny-types/lib/pattern-matching/rules/MatchesObjectsWithCommonPrototype",
    "importStyle": "{MatchesObjectsWithCommonPrototype}",
    "description": "",
    "lineNumber": 11,
    "interface": false,
    "extends": [
      "src/pattern-matching/rules/MatcherRule.js~MatcherRule"
    ],
    "ignore": true
  },
  {
    "__docId__": 132,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/pattern-matching/rules/MatchesObjectsWithCommonPrototype.ts~MatchesObjectsWithCommonPrototype",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pattern-matching/rules/MatchesObjectsWithCommonPrototype.ts~MatchesObjectsWithCommonPrototype#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true
  },
  {
    "__docId__": 133,
    "kind": "member",
    "name": "pattern",
    "memberof": "src/pattern-matching/rules/MatchesObjectsWithCommonPrototype.ts~MatchesObjectsWithCommonPrototype",
    "static": false,
    "longname": "src/pattern-matching/rules/MatchesObjectsWithCommonPrototype.ts~MatchesObjectsWithCommonPrototype#pattern",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 134,
    "kind": "method",
    "name": "matches",
    "memberof": "src/pattern-matching/rules/MatchesObjectsWithCommonPrototype.ts~MatchesObjectsWithCommonPrototype",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pattern-matching/rules/MatchesObjectsWithCommonPrototype.ts~MatchesObjectsWithCommonPrototype#matches",
    "access": "public",
    "description": "",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "Input_Type"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 135,
    "kind": "file",
    "name": "src/pattern-matching/rules/MatchesRegExp.ts",
    "content": "import { MatcherRule } from './MatcherRule';\n\n/**\n * @access private\n */\nexport class MatchesRegExp<Output_Type> extends MatcherRule<string, Output_Type> {\n    constructor(private readonly pattern: RegExp, transformation: (v: string) => Output_Type) {\n        super(transformation);\n    }\n\n    matches(value: string): boolean {\n        return this.pattern.test(value);\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/src/pattern-matching/rules/MatchesRegExp.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 136,
    "kind": "class",
    "name": "MatchesRegExp",
    "memberof": "src/pattern-matching/rules/MatchesRegExp.ts",
    "static": true,
    "longname": "src/pattern-matching/rules/MatchesRegExp.ts~MatchesRegExp",
    "access": "private",
    "export": true,
    "importPath": "tiny-types/lib/pattern-matching/rules/MatchesRegExp",
    "importStyle": "{MatchesRegExp}",
    "description": "",
    "lineNumber": 11,
    "interface": false,
    "extends": [
      "src/pattern-matching/rules/MatcherRule.js~MatcherRule"
    ],
    "ignore": true
  },
  {
    "__docId__": 137,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/pattern-matching/rules/MatchesRegExp.ts~MatchesRegExp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pattern-matching/rules/MatchesRegExp.ts~MatchesRegExp#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true
  },
  {
    "__docId__": 138,
    "kind": "member",
    "name": "pattern",
    "memberof": "src/pattern-matching/rules/MatchesRegExp.ts~MatchesRegExp",
    "static": false,
    "longname": "src/pattern-matching/rules/MatchesRegExp.ts~MatchesRegExp#pattern",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 139,
    "kind": "method",
    "name": "matches",
    "memberof": "src/pattern-matching/rules/MatchesRegExp.ts~MatchesRegExp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pattern-matching/rules/MatchesRegExp.ts~MatchesRegExp#matches",
    "access": "public",
    "description": "",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 140,
    "kind": "file",
    "name": "src/pattern-matching/rules/index.ts",
    "content": "export * from './MatcherRule';\nexport * from './MatchesAnything';\nexport * from './MatchesEqualTinyType';\nexport * from './MatchesIdentical';\nexport * from './MatchesObjectsWithCommonPrototype';\nexport * from './MatchesRegExp';\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/src/pattern-matching/rules/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 141,
    "kind": "file",
    "name": "src/predicates/Predicate.ts",
    "content": "/**\n * @access public\n */\nexport abstract class Result<T> {\n    constructor(public readonly value: T) {}\n}\n\n/**\n * @access public\n */\nexport class Success<T> extends Result<T> {}\n\n/**\n * @access public\n */\nexport class Failure<T> extends Result<T> {\n    constructor(value: T, public readonly description: string) {\n        super(value);\n    }\n}\n\n/**\n * @access public\n */\nexport type Condition<T> = (value: T) => boolean;\n\n/**\n * @desc Describes a {@link Condition} that the `value` should meet.\n *\n * To define a custom predicate to be used with the {@link check} function\n * you can either extend the {@link Predicate}, or use the {@link Predicate.to} factory method.\n *\n * @example <caption>Assuming we'd like to create an isDefined() predicate:</caption>\n * ensure(`some value`, value, isDefined());\n *\n * @example <caption>We can either use the Predicate.to factory method:</caption>\n *\n * import { Predicate } from 'tiny-types';\n *\n * function isDefined<T>(): Predicate<T> {\n *     return Predicate.to(`be defined`, (value: T) =>\n *         ! (value === null || value === undefined),\n *     );\n * }\n *\n * @example <caption>or extend the Predicate itself</caption>\n *\n * import { Predicate, Result, Success, Failure } from 'tiny-types';\n *\n * function isDefined<T>() {\n *   return new IsDefined<T>();\n * }\n *\n * class IsDefined<T> extends Predicate<T> {\n *     check(value: T): Result<T> {\n *       return ! (value === null || value === undefined)\n *         ? new Success(value)\n *         : new Failure(value, `be defined`);\n *     }\n * }\n *\n * @access public\n */\nexport abstract class Predicate<T> {\n\n    /**\n     * @desc A factory method instantiating a single-condition predicate.\n     * You can use it instead of extending the {Predicate} to save some keystrokes.\n     *\n     * @example\n     * Predicate.to(`be defined`, (value: T) => ! (value === null || value === undefined));\n     *\n     * @param {string} description     - The description of the condition is used by {@link check} to generate the error\n     *                                   message. The description should be similar to`be defined`,\n     *                                   `be less than some value` for the error message to make sense.\n     * @param {Condition<V>} condition - a function that takes a value of type `V` and returns a boolean\n     *                                   indicating whether or not the condition is met. For example:\n     *                                   `(value: V) => !! value`\n     * @returns {Predicate<V>}\n     *\n     * @static\n     */\n    static to<V>(description: string, condition: Condition<V>): Predicate<V> {\n        return new SingleConditionPredicate<V>(description, condition);\n    }\n\n    abstract check(value: T): Result<T>;\n}\n\n/**\n * @access private\n */\nclass SingleConditionPredicate<T> extends Predicate<T> {\n    constructor(\n        private readonly description: string,\n        private readonly isMetBy: Condition<T>,\n    ) {\n        super();\n    }\n\n    /** @override */\n    check(value: T): Result<T> {\n        return this.isMetBy(value)\n            ? new Success(value)\n            : new Failure(value, this.description);\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/src/predicates/Predicate.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 142,
    "kind": "class",
    "name": "Result",
    "memberof": "src/predicates/Predicate.ts",
    "static": true,
    "longname": "src/predicates/Predicate.ts~Result",
    "access": "public",
    "export": true,
    "importPath": "tiny-types/lib/predicates/Predicate",
    "importStyle": "{Result}",
    "description": "",
    "lineNumber": 10,
    "interface": false
  },
  {
    "__docId__": 143,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/predicates/Predicate.ts~Result",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/predicates/Predicate.ts~Result#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 144,
    "kind": "member",
    "name": "value",
    "memberof": "src/predicates/Predicate.ts~Result",
    "static": false,
    "longname": "src/predicates/Predicate.ts~Result#value",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 145,
    "kind": "class",
    "name": "Success",
    "memberof": "src/predicates/Predicate.ts",
    "static": true,
    "longname": "src/predicates/Predicate.ts~Success",
    "access": "public",
    "export": true,
    "importPath": "tiny-types/lib/predicates/Predicate",
    "importStyle": "{Success}",
    "description": "",
    "lineNumber": 24,
    "interface": false,
    "extends": [
      "Result"
    ]
  },
  {
    "__docId__": 146,
    "kind": "class",
    "name": "Failure",
    "memberof": "src/predicates/Predicate.ts",
    "static": true,
    "longname": "src/predicates/Predicate.ts~Failure",
    "access": "public",
    "export": true,
    "importPath": "tiny-types/lib/predicates/Predicate",
    "importStyle": "{Failure}",
    "description": "",
    "lineNumber": 35,
    "interface": false,
    "extends": [
      "Result"
    ]
  },
  {
    "__docId__": 147,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/predicates/Predicate.ts~Failure",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/predicates/Predicate.ts~Failure#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true
  },
  {
    "__docId__": 148,
    "kind": "member",
    "name": "description",
    "memberof": "src/predicates/Predicate.ts~Failure",
    "static": false,
    "longname": "src/predicates/Predicate.ts~Failure#description",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 149,
    "kind": "class",
    "name": "Predicate",
    "memberof": "src/predicates/Predicate.ts",
    "static": true,
    "longname": "src/predicates/Predicate.ts~Predicate",
    "access": "public",
    "export": true,
    "importPath": "tiny-types/lib/predicates/Predicate",
    "importStyle": "{Predicate}",
    "description": "Describes a {@link Condition} that the `value` should meet.\n\nTo define a custom predicate to be used with the {@link check} function\nyou can either extend the {@link Predicate}, or use the {@link Predicate.to} factory method.",
    "examples": [
      "<caption>Assuming we'd like to create an isDefined() predicate:</caption>\nensure(`some value`, value, isDefined());",
      "<caption>We can either use the Predicate.to factory method:</caption>\n\nimport { Predicate } from 'tiny-types';\n\nfunction isDefined<T>(): Predicate<T> {\n    return Predicate.to(`be defined`, (value: T) =>\n        ! (value === null || value === undefined),\n    );\n}",
      "<caption>or extend the Predicate itself</caption>\n\nimport { Predicate, Result, Success, Failure } from 'tiny-types';\n\nfunction isDefined<T>() {\n  return new IsDefined<T>();\n}\n\nclass IsDefined<T> extends Predicate<T> {\n    check(value: T): Result<T> {\n      return ! (value === null || value === undefined)\n        ? new Success(value)\n        : new Failure(value, `be defined`);\n    }\n}"
    ],
    "lineNumber": 84,
    "interface": false
  },
  {
    "__docId__": 150,
    "kind": "method",
    "name": "to",
    "memberof": "src/predicates/Predicate.ts~Predicate",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/predicates/Predicate.ts~Predicate.to",
    "access": "public",
    "description": "A factory method instantiating a single-condition predicate.\nYou can use it instead of extending the {Predicate} to save some keystrokes.",
    "examples": [
      "Predicate.to(`be defined`, (value: T) => ! (value === null || value === undefined));"
    ],
    "lineNumber": 114,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Predicate<V>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "description",
        "description": "The description of the condition is used by {@link check} to generate the error\n                                  message. The description should be similar to`be defined`,\n                                  `be less than some value` for the error message to make sense."
      },
      {
        "nullable": null,
        "types": [
          "Condition<V>"
        ],
        "spread": false,
        "optional": false,
        "name": "condition",
        "description": "a function that takes a value of type `V` and returns a boolean\n                                  indicating whether or not the condition is met. For example:\n                                  `(value: V) => !! value`"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Predicate<V>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 151,
    "kind": "class",
    "name": "SingleConditionPredicate",
    "memberof": "src/predicates/Predicate.ts",
    "static": true,
    "longname": "src/predicates/Predicate.ts~SingleConditionPredicate",
    "access": "private",
    "export": false,
    "importPath": "tiny-types/lib/predicates/Predicate",
    "importStyle": null,
    "description": "",
    "lineNumber": 127,
    "interface": false,
    "extends": [
      "Predicate"
    ],
    "ignore": true
  },
  {
    "__docId__": 152,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/predicates/Predicate.ts~SingleConditionPredicate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/predicates/Predicate.ts~SingleConditionPredicate#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 128,
    "undocument": true
  },
  {
    "__docId__": 153,
    "kind": "member",
    "name": "description",
    "memberof": "src/predicates/Predicate.ts~SingleConditionPredicate",
    "static": false,
    "longname": "src/predicates/Predicate.ts~SingleConditionPredicate#description",
    "access": "public",
    "description": null,
    "lineNumber": 130,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 154,
    "kind": "member",
    "name": "isMetBy",
    "memberof": "src/predicates/Predicate.ts~SingleConditionPredicate",
    "static": false,
    "longname": "src/predicates/Predicate.ts~SingleConditionPredicate#isMetBy",
    "access": "public",
    "description": null,
    "lineNumber": 131,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 155,
    "kind": "method",
    "name": "check",
    "memberof": "src/predicates/Predicate.ts~SingleConditionPredicate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/predicates/Predicate.ts~SingleConditionPredicate#check",
    "access": "public",
    "description": null,
    "lineNumber": 144,
    "override": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 156,
    "kind": "file",
    "name": "src/predicates/and.ts",
    "content": "import { isArray } from './isArray';\nimport { isDefined } from './isDefined';\nimport { isGreaterThan } from './isGreaterThan';\nimport { Failure, Predicate, Result, Success } from './Predicate';\n\n/**\n * @desc Ensures that the `value` meets all the provided {@link Predicate}s.\n *\n * @example\n * import { and, ensure, isDefined, isGreaterThan, isInteger, TinyType } from 'tiny-types';\n *\n * class AgeInYears extends TinyType {\n *     constructor(public readonly value: number) {\n *         ensure('AgeInYears', value, and(isDefined(), isInteger(), isGreaterThan(18));\n *     }\n * }\n *\n * @param {...Array<Predicate<T>>} predicates\n * @returns {Predicate<T>}\n */\nexport function and<T>(...predicates: Array<Predicate<T>>): Predicate<T> {\n    return new And<T>(predicates);\n}\n\n/** @access private */\nclass And<T> extends Predicate<T> {\n\n    constructor(private readonly predicates: Array<Predicate<T>>) {\n        super();\n\n        const results = [\n            _ => isDefined().check(_),\n            _ => isArray().check(_),\n            _ => isGreaterThan(0).check(_.length),\n        ];\n\n        if (results.some(check => check(this.predicates) instanceof Failure)) {\n            throw new Error(`Looks like you haven't specified any predicates to check the value against?`);\n        }\n    }\n\n    /** @override */\n    check(value: T): Result<T> {\n        for (const predicate of this.predicates) {\n            const result = predicate.check(value);\n            if (result instanceof Failure) {\n                return result;\n            }\n        }\n\n        return new Success(value);\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/src/predicates/and.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 157,
    "kind": "function",
    "name": "and",
    "memberof": "src/predicates/and.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/predicates/and.ts~and",
    "access": "public",
    "export": true,
    "importPath": "tiny-types/lib/predicates/and",
    "importStyle": "{and}",
    "description": "Ensures that the `value` meets all the provided {@link Predicate}s.",
    "examples": [
      "import { and, ensure, isDefined, isGreaterThan, isInteger, TinyType } from 'tiny-types';\n\nclass AgeInYears extends TinyType {\n    constructor(public readonly value: number) {\n        ensure('AgeInYears', value, and(isDefined(), isInteger(), isGreaterThan(18));\n    }\n}"
    ],
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Predicate<T>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "...Array<Predicate<T>>"
        ],
        "spread": true,
        "optional": false,
        "name": "predicates",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Predicate<T>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 158,
    "kind": "class",
    "name": "And",
    "memberof": "src/predicates/and.ts",
    "static": true,
    "longname": "src/predicates/and.ts~And",
    "access": "private",
    "export": false,
    "importPath": "tiny-types/lib/predicates/and",
    "importStyle": null,
    "description": null,
    "lineNumber": 40,
    "interface": false,
    "extends": [
      "src/predicates/Predicate.js~Predicate"
    ],
    "ignore": true
  },
  {
    "__docId__": 159,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/predicates/and.ts~And",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/predicates/and.ts~And#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true
  },
  {
    "__docId__": 160,
    "kind": "member",
    "name": "predicates",
    "memberof": "src/predicates/and.ts~And",
    "static": false,
    "longname": "src/predicates/and.ts~And#predicates",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 161,
    "kind": "method",
    "name": "check",
    "memberof": "src/predicates/and.ts~And",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/predicates/and.ts~And#check",
    "access": "public",
    "description": null,
    "lineNumber": 64,
    "override": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 162,
    "kind": "file",
    "name": "src/predicates/endsWith.ts",
    "content": "import { Predicate } from './Predicate';\n\n/**\n * @desc Ensures that the `value` ends with a given suffix.\n *\n * @example\n * import { endsWith, ensure, TinyType } from 'tiny-types';\n *\n * class TextFileName extends TinyType {\n *     constructor(public readonly value: string) {\n *         super();\n *\n *         ensure('TextFileName', value, endsWith('.txt'));\n *     }\n * }\n *\n * @param {string} suffix\n *\n * @returns {Predicate<string>}\n */\nexport function endsWith(suffix: string): Predicate<string> {\n    return Predicate.to(`end with '${ suffix }'`, (value: string) =>\n        typeof value === 'string'\n            && value.endsWith(suffix),\n    );\n}\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/src/predicates/endsWith.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 163,
    "kind": "function",
    "name": "endsWith",
    "memberof": "src/predicates/endsWith.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/predicates/endsWith.ts~endsWith",
    "access": "public",
    "export": true,
    "importPath": "tiny-types/lib/predicates/endsWith",
    "importStyle": "{endsWith}",
    "description": "Ensures that the `value` ends with a given suffix.",
    "examples": [
      "import { endsWith, ensure, TinyType } from 'tiny-types';\n\nclass TextFileName extends TinyType {\n    constructor(public readonly value: string) {\n        super();\n\n        ensure('TextFileName', value, endsWith('.txt'));\n    }\n}"
    ],
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Predicate<string>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "suffix",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Predicate<string>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 164,
    "kind": "file",
    "name": "src/predicates/hasLengthOf.ts",
    "content": "import { isDefined } from './isDefined';\nimport { isEqualTo } from './isEqualTo';\nimport { Predicate } from './Predicate';\nimport { property } from './property';\n\nexport interface HasLength { length: number; }\n\n/**\n * @desc Ensures that the `value` is of `expectedLength`.\n * Applies to {@link String}s, {@link Array}s and anything that has a `.length` property.\n *\n * This function is an alias for to `property('length', isDefined(), isEqualTo(expectedLength))`\n *\n * @example <caption>Array</caption>\n * import { ensure, hasLengthOf, TinyType } from 'tiny-types';\n *\n * class Tuple extends TinyType {\n *   constructor(public readonly values: any[]) {\n *      super();\n *      ensure('Tuple', values, hasLengthOf(2));\n *   }\n * }\n *\n * @example <caption>String</caption>\n * import { ensure, hasLengthOf, TinyType } from 'tiny-types';\n *\n * class Username extends TinyType {\n *   constructor(public readonly value: string) {\n *      super();\n *      ensure('Username', value, hasLengthOf(8));\n *   }\n * }\n *\n * @param {number} expectedLength\n * @returns {Predicate}\n */\nexport function hasLengthOf(expectedLength: number): Predicate<HasLength> {\n    return property('length', isDefined(), isEqualTo(expectedLength));\n}\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/src/predicates/hasLengthOf.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 165,
    "kind": "function",
    "name": "hasLengthOf",
    "memberof": "src/predicates/hasLengthOf.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/predicates/hasLengthOf.ts~hasLengthOf",
    "access": "public",
    "export": true,
    "importPath": "tiny-types/lib/predicates/hasLengthOf",
    "importStyle": "{hasLengthOf}",
    "description": "Ensures that the `value` is of `expectedLength`.\nApplies to {@link String}s, {@link Array}s and anything that has a `.length` property.\n\nThis function is an alias for to `property('length', isDefined(), isEqualTo(expectedLength))`",
    "examples": [
      "<caption>Array</caption>\nimport { ensure, hasLengthOf, TinyType } from 'tiny-types';\n\nclass Tuple extends TinyType {\n  constructor(public readonly values: any[]) {\n     super();\n     ensure('Tuple', values, hasLengthOf(2));\n  }\n}",
      "<caption>String</caption>\nimport { ensure, hasLengthOf, TinyType } from 'tiny-types';\n\nclass Username extends TinyType {\n  constructor(public readonly value: string) {\n     super();\n     ensure('Username', value, hasLengthOf(8));\n  }\n}"
    ],
    "lineNumber": 43,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Predicate}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "expectedLength",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Predicate"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 166,
    "kind": "file",
    "name": "src/predicates/index.ts",
    "content": "export * from './and';\nexport * from './endsWith';\nexport * from './hasLengthOf';\nexport * from './isArray';\nexport * from './isBoolean';\nexport * from './isDefined';\nexport * from './isEqualTo';\nexport * from './isFunction';\nexport * from './isGreaterThan';\nexport * from './isGreaterThanOrEqualTo';\nexport * from './isInRange';\nexport * from './isInstanceOf';\nexport * from './isInteger';\nexport * from './isLessThan';\nexport * from './isLessThanOrEqualTo';\nexport * from './isNotBlank';\nexport * from './isNumber';\nexport * from './isOneOf';\nexport * from './isPlainObject';\nexport * from './isString';\nexport * from './matches';\nexport * from './or';\nexport * from './Predicate';\nexport * from './property';\nexport * from './startsWith';\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/src/predicates/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 167,
    "kind": "file",
    "name": "src/predicates/isArray.ts",
    "content": "import { Predicate } from './Predicate';\n\n/**\n * @desc Ensures that the `value` is an {@link Array}.\n *\n * @example\n * import { ensure, isArray, TinyType, TinyTypeOf } from 'tiny-types';\n *\n * class Name extends TinyTypeOf<string>() {}\n *\n * class Names extends TinyType {\n *   constructor(public readonly values: Name[]) {\n *      super();\n *      ensure('Names', values, isArray());\n *   }\n * }\n *\n * @returns {Predicate<T[]>}\n */\nexport function isArray<T>(): Predicate<T[]> {\n    return Predicate.to(`be an array`, (value: T[]) => Array.isArray(value));\n}\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/src/predicates/isArray.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 168,
    "kind": "function",
    "name": "isArray",
    "memberof": "src/predicates/isArray.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/predicates/isArray.ts~isArray",
    "access": "public",
    "export": true,
    "importPath": "tiny-types/lib/predicates/isArray",
    "importStyle": "{isArray}",
    "description": "Ensures that the `value` is an {@link Array}.",
    "examples": [
      "import { ensure, isArray, TinyType, TinyTypeOf } from 'tiny-types';\n\nclass Name extends TinyTypeOf<string>() {}\n\nclass Names extends TinyType {\n  constructor(public readonly values: Name[]) {\n     super();\n     ensure('Names', values, isArray());\n  }\n}"
    ],
    "lineNumber": 27,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Predicate<T[]>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Predicate<T[]>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 169,
    "kind": "file",
    "name": "src/predicates/isBoolean.ts",
    "content": "import { Predicate } from './Predicate';\n\n/**\n * @desc Ensures that the `value` is a {@link Boolean} value.\n *\n * @example\n * import { ensure, isBoolean, TinyType } from 'tiny-types';\n *\n * class MarketingOptIn extends TinyType {\n *     constructor(public readonly value: boolean) {\n *         ensure('MarketingOptIn', value, isBoolean());\n *     }\n * }\n *\n * @returns {Predicate<boolean>}\n */\nexport function isBoolean(): Predicate<boolean> {\n    return Predicate.to(`be a boolean value`, (value: boolean) => typeof value === 'boolean');\n}\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/src/predicates/isBoolean.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 170,
    "kind": "function",
    "name": "isBoolean",
    "memberof": "src/predicates/isBoolean.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/predicates/isBoolean.ts~isBoolean",
    "access": "public",
    "export": true,
    "importPath": "tiny-types/lib/predicates/isBoolean",
    "importStyle": "{isBoolean}",
    "description": "Ensures that the `value` is a {@link Boolean} value.",
    "examples": [
      "import { ensure, isBoolean, TinyType } from 'tiny-types';\n\nclass MarketingOptIn extends TinyType {\n    constructor(public readonly value: boolean) {\n        ensure('MarketingOptIn', value, isBoolean());\n    }\n}"
    ],
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Predicate<boolean>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Predicate<boolean>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 171,
    "kind": "file",
    "name": "src/predicates/isDefined.ts",
    "content": "import { Predicate } from './Predicate';\n\n/**\n * @desc Ensures that the `value` is defined as anything other than {@link null} or {@link undefined}.\n *\n * @example\n * import { ensure, isDefined, TinyType } from 'tiny-types';\n *\n * class Name extends TinyType {\n *     constructor(public readonly value: string) {\n *       ensure('Name', value, isDefined());\n *     }\n * }\n *\n * @returns {Predicate<T>}\n */\nexport function isDefined<T>(): Predicate<T> {\n    return Predicate.to(`be defined`, (value: T) =>\n        ! (value === null || value === undefined),\n    );\n}\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/src/predicates/isDefined.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 172,
    "kind": "function",
    "name": "isDefined",
    "memberof": "src/predicates/isDefined.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/predicates/isDefined.ts~isDefined",
    "access": "public",
    "export": true,
    "importPath": "tiny-types/lib/predicates/isDefined",
    "importStyle": "{isDefined}",
    "description": "Ensures that the `value` is defined as anything other than {@link null} or {@link undefined}.",
    "examples": [
      "import { ensure, isDefined, TinyType } from 'tiny-types';\n\nclass Name extends TinyType {\n    constructor(public readonly value: string) {\n      ensure('Name', value, isDefined());\n    }\n}"
    ],
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Predicate<T>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Predicate<T>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 173,
    "kind": "file",
    "name": "src/predicates/isEqualTo.ts",
    "content": "import { TinyType } from '../TinyType';\nimport { Predicate } from './Predicate';\n\nexport function isEqualTo(expectedValue: TinyType): Predicate<TinyType>;\nexport function isEqualTo<T>(expectedValue: T): Predicate<T>;\n\n/**\n * @desc Ensures that the `value` is equal to `expectedValue`.\n * This {@link Predicate} is typically used in combination with other {@link Predicate}s.\n *\n * @example <caption>Comparing Tiny Types</caption>\n * import { ensure, isEqualTo, TinyType, TinyTypeOf } from 'tiny-types';\n *\n * class AccountId         extends TinyTypeOf<number>() {}\n * class Command           extends TinyTypeOf<AccountId>() {}\n * class UpgradeAccount    extends Command {}\n *\n * class AccountsService {\n *     constructor(public readonly loggedInUser: AccountId) {}\n *     handle(command: Command) {\n *         ensure('AccountId', command.value, isEqualTo(this.loggedInUser));\n *     }\n *  }\n *\n * @example <caption>Comparing primitives</caption>\n * import { ensure, isEqualTo, TinyType } from 'tiny-types';\n *\n * class Admin extends TinyType {\n *     constructor(public readonly id: number) {\n *         ensure('Admin::id', id, isEqualTo(1));\n *     }\n * }\n *\n * @param {string | number | symbol | TinyType | object} expectedValue\n * @returns {Predicate<any>}\n */\nexport function isEqualTo<T>(expectedValue: T): Predicate<T> {\n    return Predicate.to(`be equal to ${ String(expectedValue) }`, (value: any) =>\n        (hasEquals(value) && hasEquals(expectedValue))\n            ? value.equals(expectedValue)\n            : value === expectedValue,\n    );\n}\n\nfunction hasEquals(value: unknown): value is { equals: (another: any) => boolean } {\n    return !! value && (value instanceof TinyType || (value as any).equals);\n}\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/src/predicates/isEqualTo.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 174,
    "kind": "function",
    "name": "isEqualTo",
    "memberof": "src/predicates/isEqualTo.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/predicates/isEqualTo.ts~isEqualTo",
    "access": "public",
    "export": true,
    "importPath": "tiny-types/lib/predicates/isEqualTo",
    "importStyle": "{isEqualTo}",
    "description": "Ensures that the `value` is equal to `expectedValue`.\nThis {@link Predicate} is typically used in combination with other {@link Predicate}s.",
    "examples": [
      "<caption>Comparing Tiny Types</caption>\nimport { ensure, isEqualTo, TinyType, TinyTypeOf } from 'tiny-types';\n\nclass AccountId         extends TinyTypeOf<number>() {}\nclass Command           extends TinyTypeOf<AccountId>() {}\nclass UpgradeAccount    extends Command {}\n\nclass AccountsService {\n    constructor(public readonly loggedInUser: AccountId) {}\n    handle(command: Command) {\n        ensure('AccountId', command.value, isEqualTo(this.loggedInUser));\n    }\n }",
      "<caption>Comparing primitives</caption>\nimport { ensure, isEqualTo, TinyType } from 'tiny-types';\n\nclass Admin extends TinyType {\n    constructor(public readonly id: number) {\n        ensure('Admin::id', id, isEqualTo(1));\n    }\n}"
    ],
    "lineNumber": 43,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Predicate<any>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string ",
          " number ",
          " symbol ",
          " TinyType ",
          " object"
        ],
        "spread": false,
        "optional": false,
        "name": "expectedValue",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Predicate<any>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 175,
    "kind": "function",
    "name": "hasEquals",
    "memberof": "src/predicates/isEqualTo.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/predicates/isEqualTo.ts~hasEquals",
    "access": "public",
    "export": false,
    "importPath": "tiny-types/lib/predicates/isEqualTo",
    "importStyle": null,
    "description": "",
    "lineNumber": 45,
    "params": [
      {
        "nullable": null,
        "types": [
          "unknown"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 176,
    "kind": "file",
    "name": "src/predicates/isFunction.ts",
    "content": "import { Predicate } from './Predicate';\n\n/**\n * @desc Ensures that the `value` is a {@link Function}.\n *\n * @example\n * import { ensure, isFunction, TinyType } from 'tiny-types';\n *\n * function myFunction(callback: (error?: Error) => void): void {\n *     ensure('callback', callback, isFunction());\n * }\n *\n * @returns {Predicate<Function>}\n */\nexport function isFunction(): Predicate<(...args: any[]) => any> {\n    return Predicate.to(`be a function`, (value: (...args: any[]) => any) =>\n        typeof value === 'function'\n    );\n}\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/src/predicates/isFunction.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 177,
    "kind": "function",
    "name": "isFunction",
    "memberof": "src/predicates/isFunction.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/predicates/isFunction.ts~isFunction",
    "access": "public",
    "export": true,
    "importPath": "tiny-types/lib/predicates/isFunction",
    "importStyle": "{isFunction}",
    "description": "Ensures that the `value` is a {@link Function}.",
    "examples": [
      "import { ensure, isFunction, TinyType } from 'tiny-types';\n\nfunction myFunction(callback: (error?: Error) => void): void {\n    ensure('callback', callback, isFunction());\n}"
    ],
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Predicate<Function>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Predicate<Function>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 178,
    "kind": "file",
    "name": "src/predicates/isGreaterThan.ts",
    "content": "import { Predicate } from './Predicate';\n\n/**\n * @desc Ensures that the `value` is greater than the `lowerBound`.\n *\n * @example\n * import { ensure, isGreaterThan, TinyType } from 'tiny-types';\n *\n * class AgeInYears extends TinyType {\n *     constructor(public readonly value: number) {\n *         ensure('Age in years', value, isGreaterThan(0));\n *     }\n * }\n *\n * @param {number} lowerBound\n * @returns {Predicate<number>}\n */\nexport function isGreaterThan(lowerBound: number): Predicate<number> {\n    return Predicate.to(`be greater than ${ lowerBound }`, (value: number) =>\n        typeof value === 'number' &&\n        Number.isFinite(value) &&\n        lowerBound < value,\n    );\n}\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/src/predicates/isGreaterThan.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 179,
    "kind": "function",
    "name": "isGreaterThan",
    "memberof": "src/predicates/isGreaterThan.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/predicates/isGreaterThan.ts~isGreaterThan",
    "access": "public",
    "export": true,
    "importPath": "tiny-types/lib/predicates/isGreaterThan",
    "importStyle": "{isGreaterThan}",
    "description": "Ensures that the `value` is greater than the `lowerBound`.",
    "examples": [
      "import { ensure, isGreaterThan, TinyType } from 'tiny-types';\n\nclass AgeInYears extends TinyType {\n    constructor(public readonly value: number) {\n        ensure('Age in years', value, isGreaterThan(0));\n    }\n}"
    ],
    "lineNumber": 27,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Predicate<number>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "lowerBound",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Predicate<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 180,
    "kind": "file",
    "name": "src/predicates/isGreaterThanOrEqualTo.ts",
    "content": "import { isEqualTo } from './isEqualTo';\nimport { isGreaterThan } from './isGreaterThan';\nimport { or } from './or';\nimport { Predicate } from './Predicate';\n\n/**\n * @desc Ensures that the `value` is greater than or equal to the `lowerBound`.\n *\n * @example\n * import { ensure, isGreaterThanOrEqualTo, TinyType } from 'tiny-types';\n *\n * class AgeInYears extends TinyType {\n *     constructor(public readonly value: number) {\n *         ensure('Age in years', value, isGreaterThanOrEqualTo(18));\n *     }\n * }\n *\n * @param {number} lowerBound\n * @returns {Predicate<number>}\n */\nexport function isGreaterThanOrEqualTo(lowerBound: number): Predicate<number> {\n    return or(isEqualTo(lowerBound), isGreaterThan(lowerBound));\n}\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/src/predicates/isGreaterThanOrEqualTo.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 181,
    "kind": "function",
    "name": "isGreaterThanOrEqualTo",
    "memberof": "src/predicates/isGreaterThanOrEqualTo.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/predicates/isGreaterThanOrEqualTo.ts~isGreaterThanOrEqualTo",
    "access": "public",
    "export": true,
    "importPath": "tiny-types/lib/predicates/isGreaterThanOrEqualTo",
    "importStyle": "{isGreaterThanOrEqualTo}",
    "description": "Ensures that the `value` is greater than or equal to the `lowerBound`.",
    "examples": [
      "import { ensure, isGreaterThanOrEqualTo, TinyType } from 'tiny-types';\n\nclass AgeInYears extends TinyType {\n    constructor(public readonly value: number) {\n        ensure('Age in years', value, isGreaterThanOrEqualTo(18));\n    }\n}"
    ],
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Predicate<number>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "lowerBound",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Predicate<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 182,
    "kind": "file",
    "name": "src/predicates/isInRange.ts",
    "content": "import { and } from './and';\nimport { isGreaterThanOrEqualTo } from './isGreaterThanOrEqualTo';\nimport { isLessThanOrEqualTo } from './isLessThanOrEqualTo';\nimport { Predicate } from './Predicate';\n\n/**\n * @desc Ensures that the `value` is greater than or equal to the `lowerBound` and less than or equal to the `upperBound`\n *\n * @example\n * import { ensure, isInRange, TinyType } from 'tiny-types';\n *\n * class InvestmentLengthInYears extends TinyType {\n *     constructor(public readonly value: number) {\n *         super();\n *         ensure('InvestmentLengthInYears', value, isInRange(1, 5));\n *     }\n * }\n *\n * @param {number} lowerBound\n * @param {number} upperBound\n * @returns {Predicate<number>}\n */\nexport function isInRange(lowerBound: number, upperBound: number): Predicate<number> {\n    return and(isGreaterThanOrEqualTo(lowerBound), isLessThanOrEqualTo(upperBound));\n}\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/src/predicates/isInRange.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 183,
    "kind": "function",
    "name": "isInRange",
    "memberof": "src/predicates/isInRange.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/predicates/isInRange.ts~isInRange",
    "access": "public",
    "export": true,
    "importPath": "tiny-types/lib/predicates/isInRange",
    "importStyle": "{isInRange}",
    "description": "Ensures that the `value` is greater than or equal to the `lowerBound` and less than or equal to the `upperBound`",
    "examples": [
      "import { ensure, isInRange, TinyType } from 'tiny-types';\n\nclass InvestmentLengthInYears extends TinyType {\n    constructor(public readonly value: number) {\n        super();\n        ensure('InvestmentLengthInYears', value, isInRange(1, 5));\n    }\n}"
    ],
    "lineNumber": 33,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Predicate<number>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "lowerBound",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "upperBound",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Predicate<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 184,
    "kind": "file",
    "name": "src/predicates/isInstanceOf.ts",
    "content": "import { Predicate } from './Predicate';\n\n/**\n * @desc Ensures that the `value` is an instance of `type`\n *\n * @example\n * import { ensure, isInstanceOf, TinyType } from 'tiny-types';\n *\n * class Birthday extends TinyType {\n *     constructor(public readonly value: Date) {\n *         ensure('Date', value, isInstanceOf(Date));\n *     }\n * }\n *\n * @param {Constructor<T>} type\n * @returns {Predicate<T>}\n */\nexport function isInstanceOf<T>(type: new (...args: any[]) => T): Predicate<T> {\n    return Predicate.to(`be instance of ${type.name}`, (value: T) => value instanceof type);\n}\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/src/predicates/isInstanceOf.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 185,
    "kind": "function",
    "name": "isInstanceOf",
    "memberof": "src/predicates/isInstanceOf.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/predicates/isInstanceOf.ts~isInstanceOf",
    "access": "public",
    "export": true,
    "importPath": "tiny-types/lib/predicates/isInstanceOf",
    "importStyle": "{isInstanceOf}",
    "description": "Ensures that the `value` is an instance of `type`",
    "examples": [
      "import { ensure, isInstanceOf, TinyType } from 'tiny-types';\n\nclass Birthday extends TinyType {\n    constructor(public readonly value: Date) {\n        ensure('Date', value, isInstanceOf(Date));\n    }\n}"
    ],
    "lineNumber": 27,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Predicate<T>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Constructor<T>"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Predicate<T>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 186,
    "kind": "file",
    "name": "src/predicates/isInteger.ts",
    "content": "import { Predicate } from './Predicate';\n\n/**\n * @desc Ensures that the `value` is an integer {@link Number}.\n *\n * @example\n * import { ensure, isInteger, TinyType } from 'tiny-types';\n *\n * class AgeInYears extends TinyType {\n *     constructor(public readonly value: number) {\n *         ensure('Age in years', value, isInteger());\n *     }\n * }\n *\n * @returns {Predicate<number>}\n */\nexport function isInteger(): Predicate<number> {\n    return Predicate.to(`be an integer`, (value: number) =>\n        typeof value === 'number' &&\n        Number.isFinite(value) &&\n        Math.floor(value) === value,\n    );\n}\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/src/predicates/isInteger.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 187,
    "kind": "function",
    "name": "isInteger",
    "memberof": "src/predicates/isInteger.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/predicates/isInteger.ts~isInteger",
    "access": "public",
    "export": true,
    "importPath": "tiny-types/lib/predicates/isInteger",
    "importStyle": "{isInteger}",
    "description": "Ensures that the `value` is an integer {@link Number}.",
    "examples": [
      "import { ensure, isInteger, TinyType } from 'tiny-types';\n\nclass AgeInYears extends TinyType {\n    constructor(public readonly value: number) {\n        ensure('Age in years', value, isInteger());\n    }\n}"
    ],
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Predicate<number>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Predicate<number>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 188,
    "kind": "file",
    "name": "src/predicates/isLessThan.ts",
    "content": "import { Predicate } from './Predicate';\n\n/**\n * @desc Ensures that the `value` is less than the `upperBound`.\n *\n * @example\n * import { ensure, isLessThan, TinyType } from 'tiny-types';\n *\n * class InvestmentPeriodInYears extends TinyType {\n *     constructor(public readonly value: number) {\n *         ensure('Investment period in years', value, isLessThan(50));\n *     }\n * }\n *\n * @param {number} upperBound\n * @returns {Predicate<number>}\n */\nexport function isLessThan(upperBound: number): Predicate<number> {\n    return Predicate.to(`be less than ${ upperBound }`, (value: number) =>\n        typeof value === 'number' &&\n        Number.isFinite(value) &&\n        value < upperBound,\n    );\n}\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/src/predicates/isLessThan.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 189,
    "kind": "function",
    "name": "isLessThan",
    "memberof": "src/predicates/isLessThan.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/predicates/isLessThan.ts~isLessThan",
    "access": "public",
    "export": true,
    "importPath": "tiny-types/lib/predicates/isLessThan",
    "importStyle": "{isLessThan}",
    "description": "Ensures that the `value` is less than the `upperBound`.",
    "examples": [
      "import { ensure, isLessThan, TinyType } from 'tiny-types';\n\nclass InvestmentPeriodInYears extends TinyType {\n    constructor(public readonly value: number) {\n        ensure('Investment period in years', value, isLessThan(50));\n    }\n}"
    ],
    "lineNumber": 27,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Predicate<number>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "upperBound",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Predicate<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 190,
    "kind": "file",
    "name": "src/predicates/isLessThanOrEqualTo.ts",
    "content": "import { isEqualTo } from './isEqualTo';\nimport { isLessThan } from './isLessThan';\nimport { or } from './or';\nimport { Predicate } from './Predicate';\n\n/**\n * @desc Ensures that the `value` is less than or equal to the `upperBound`.\n *\n * @example\n * import { ensure, isLessThanOrEqualTo, TinyType } from 'tiny-types';\n *\n * class InvestmentPeriod extends TinyType {\n *     constructor(public readonly value: number) {\n *         ensure('InvestmentPeriod', value, isLessThanOrEqualTo(50));\n *     }\n * }\n *\n * @param {number} upperBound\n * @returns {Predicate<number>}\n */\nexport function isLessThanOrEqualTo(upperBound: number): Predicate<number> {\n    return or(isLessThan(upperBound), isEqualTo(upperBound));\n}\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/src/predicates/isLessThanOrEqualTo.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 191,
    "kind": "function",
    "name": "isLessThanOrEqualTo",
    "memberof": "src/predicates/isLessThanOrEqualTo.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/predicates/isLessThanOrEqualTo.ts~isLessThanOrEqualTo",
    "access": "public",
    "export": true,
    "importPath": "tiny-types/lib/predicates/isLessThanOrEqualTo",
    "importStyle": "{isLessThanOrEqualTo}",
    "description": "Ensures that the `value` is less than or equal to the `upperBound`.",
    "examples": [
      "import { ensure, isLessThanOrEqualTo, TinyType } from 'tiny-types';\n\nclass InvestmentPeriod extends TinyType {\n    constructor(public readonly value: number) {\n        ensure('InvestmentPeriod', value, isLessThanOrEqualTo(50));\n    }\n}"
    ],
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Predicate<number>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "upperBound",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Predicate<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 192,
    "kind": "file",
    "name": "src/predicates/isNotBlank.ts",
    "content": "import { Predicate } from './Predicate';\n\n/**\n * @desc\n *  Ensures that the `value` is not an empty string.\n *\n * @example\n * import { ensure, isString, TinyType } from 'tiny-types';\n *\n * class FirstName extends TinyType {\n *     constructor(public readonly value: string) {\n *         ensure('FirstName', value, isNotBlank());\n *     }\n * }\n *\n * @returns {Predicate<string>}\n */\nexport function isNotBlank(): Predicate<string> {\n    return Predicate.to(`not be blank`, (value: string) => typeof value === 'string' && value !== '');\n}\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/src/predicates/isNotBlank.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 193,
    "kind": "function",
    "name": "isNotBlank",
    "memberof": "src/predicates/isNotBlank.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/predicates/isNotBlank.ts~isNotBlank",
    "access": "public",
    "export": true,
    "importPath": "tiny-types/lib/predicates/isNotBlank",
    "importStyle": "{isNotBlank}",
    "description": " Ensures that the `value` is not an empty string.",
    "examples": [
      "import { ensure, isString, TinyType } from 'tiny-types';\n\nclass FirstName extends TinyType {\n    constructor(public readonly value: string) {\n        ensure('FirstName', value, isNotBlank());\n    }\n}"
    ],
    "lineNumber": 25,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Predicate<string>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Predicate<string>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 194,
    "kind": "file",
    "name": "src/predicates/isNumber.ts",
    "content": "import { Predicate } from './Predicate';\n\n/**\n * @desc Ensures that the `value` is a {@link Number}.\n *\n * @example\n * import { ensure, isNumber, TinyType } from 'tiny-types';\n *\n * class Percentage extends TinyType {\n *     constructor(public readonly value: number) {\n *         ensure('Percentage', value, isNumber());\n *     }\n * }\n *\n * @returns {Predicate<number>}\n */\nexport function isNumber(): Predicate<number> {\n    return Predicate.to(`be a number`, (value: number) => typeof value === 'number');\n}\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/src/predicates/isNumber.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 195,
    "kind": "function",
    "name": "isNumber",
    "memberof": "src/predicates/isNumber.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/predicates/isNumber.ts~isNumber",
    "access": "public",
    "export": true,
    "importPath": "tiny-types/lib/predicates/isNumber",
    "importStyle": "{isNumber}",
    "description": "Ensures that the `value` is a {@link Number}.",
    "examples": [
      "import { ensure, isNumber, TinyType } from 'tiny-types';\n\nclass Percentage extends TinyType {\n    constructor(public readonly value: number) {\n        ensure('Percentage', value, isNumber());\n    }\n}"
    ],
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Predicate<number>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Predicate<number>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 196,
    "kind": "file",
    "name": "src/predicates/isOneOf.ts",
    "content": "import { isEqualTo } from './isEqualTo';\nimport { or } from './or';\nimport { Predicate } from './Predicate';\n\n/**\n * @desc Ensures that the `value` is equal to one of the `allowedValues`\n *\n * @example\n * import { ensure, isOneOf, TinyType } from 'tiny-types';\n *\n * class StreetLight extends TinyType {\n *     constructor(public readonly value: string) {\n *         super();\n *\n *         ensure('StreetLight', value, isOneOf('red', 'yellow', 'green'));\n *     }\n * }\n *\n * @param {...T[]} allowedValues\n * @returns {Predicate<T>}\n */\nexport function isOneOf<T>(...allowedValues: T[]): Predicate<T> {\n    return or(...allowedValues.map(allowed => isEqualTo(allowed)));\n}\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/src/predicates/isOneOf.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 197,
    "kind": "function",
    "name": "isOneOf",
    "memberof": "src/predicates/isOneOf.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/predicates/isOneOf.ts~isOneOf",
    "access": "public",
    "export": true,
    "importPath": "tiny-types/lib/predicates/isOneOf",
    "importStyle": "{isOneOf}",
    "description": "Ensures that the `value` is equal to one of the `allowedValues`",
    "examples": [
      "import { ensure, isOneOf, TinyType } from 'tiny-types';\n\nclass StreetLight extends TinyType {\n    constructor(public readonly value: string) {\n        super();\n\n        ensure('StreetLight', value, isOneOf('red', 'yellow', 'green'));\n    }\n}"
    ],
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Predicate<T>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "...T[]"
        ],
        "spread": true,
        "optional": false,
        "name": "allowedValues",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Predicate<T>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 198,
    "kind": "file",
    "name": "src/predicates/isPlainObject.ts",
    "content": "import { isRecord } from '../objects';\nimport { Predicate } from './Predicate';\n\n/**\n * @desc\n *  Ensures that the `value` is a plain {@link Object}.\n *  Based on Jon Schlinkert's implementation.\n *\n * @see https://github.com/jonschlinkert/is-plain-object\n *\n * @example\n *  import { ensure, isPlainObject } from 'tiny-types';\n *\n *  ensure('plain object', {}, isPlainObject());\n *\n * @returns {Predicate<string>}\n */\nexport function isPlainObject<T extends object = object>(): Predicate<T> {\n    return Predicate.to(`be a plain object`, (value: T) => isRecord(value));\n}\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/src/predicates/isPlainObject.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 199,
    "kind": "function",
    "name": "isPlainObject",
    "memberof": "src/predicates/isPlainObject.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/predicates/isPlainObject.ts~isPlainObject",
    "access": "public",
    "export": true,
    "importPath": "tiny-types/lib/predicates/isPlainObject",
    "importStyle": "{isPlainObject}",
    "description": " Ensures that the `value` is a plain {@link Object}.\n Based on Jon Schlinkert's implementation.",
    "examples": [
      " import { ensure, isPlainObject } from 'tiny-types';\n\n ensure('plain object', {}, isPlainObject());"
    ],
    "see": [
      "https://github.com/jonschlinkert/is-plain-object"
    ],
    "lineNumber": 25,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Predicate<string>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Predicate<string>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 200,
    "kind": "file",
    "name": "src/predicates/isString.ts",
    "content": "import { Predicate } from './Predicate';\n\n/**\n * @desc Ensures that the `value` is a  {@link String}.\n *\n * @example\n * import { ensure, isString, TinyType } from 'tiny-types';\n *\n * class FirstName extends TinyType {\n *     constructor(public readonly value: string) {\n *         ensure('FirstName', value, isString());\n *     }\n * }\n *\n * @returns {Predicate<string>}\n */\nexport function isString(): Predicate<string> {\n    return Predicate.to(`be a string`, (value: string) => typeof value === 'string');\n}\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/src/predicates/isString.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 201,
    "kind": "function",
    "name": "isString",
    "memberof": "src/predicates/isString.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/predicates/isString.ts~isString",
    "access": "public",
    "export": true,
    "importPath": "tiny-types/lib/predicates/isString",
    "importStyle": "{isString}",
    "description": "Ensures that the `value` is a  {@link String}.",
    "examples": [
      "import { ensure, isString, TinyType } from 'tiny-types';\n\nclass FirstName extends TinyType {\n    constructor(public readonly value: string) {\n        ensure('FirstName', value, isString());\n    }\n}"
    ],
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Predicate<string>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Predicate<string>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 202,
    "kind": "file",
    "name": "src/predicates/matches.ts",
    "content": "import { Predicate } from './Predicate';\n\n/**\n * @desc Ensures that the `value` matches {@link RegExp}.\n *\n * @example\n * import { ensure, matches, TinyType } from 'tiny-types';\n *\n *\n * class CompanyEmailAddress extends TinyType {\n *     constructor(public readonly value: string) {\n *         super();\n *         ensure('EmailAddress', value, matches(/[a-z]+\\.[a-z]+@example\\.org/));\n *     }\n * }\n *\n * @param {RegExp} expression\n *\n * @returns {Predicate<string>}\n */\nexport function matches(expression: RegExp): Predicate<string> {\n    return Predicate.to(`match pattern ${ expression }`, (value: string) => expression.test(value));\n}\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/src/predicates/matches.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 203,
    "kind": "function",
    "name": "matches",
    "memberof": "src/predicates/matches.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/predicates/matches.ts~matches",
    "access": "public",
    "export": true,
    "importPath": "tiny-types/lib/predicates/matches",
    "importStyle": "{matches}",
    "description": "Ensures that the `value` matches {@link RegExp}.",
    "examples": [
      "import { ensure, matches, TinyType } from 'tiny-types';\n\n\nclass CompanyEmailAddress extends TinyType {\n    constructor(public readonly value: string) {\n        super();\n        ensure('EmailAddress', value, matches(/[a-z]+\\.[a-z]+@example\\.org/));\n    }\n}"
    ],
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Predicate<string>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "RegExp"
        ],
        "spread": false,
        "optional": false,
        "name": "expression",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Predicate<string>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 204,
    "kind": "file",
    "name": "src/predicates/or.ts",
    "content": "import { isArray } from './isArray';\nimport { isDefined } from './isDefined';\nimport { isGreaterThan } from './isGreaterThan';\nimport { Failure, Predicate, Result, Success } from './Predicate';\n\n/**\n * @desc Ensures that the `value` meets at least one of the provided {@link Predicate}s.\n *\n * @example\n * import { ensure, isEqualTo, isGreaterThan, isLessThan, or } from 'tiny-type'l\n *\n * class Percentage extends TinyType {\n *     constructor(public readonly value: number) {\n *         ensure('Percentage', value, or(isEqualTo(0), isGreaterThan(0)), or(isLessThan(100), isEqualTo(100));\n *     }\n * }\n *\n * @param {Predicate<T>} predicates\n * @returns {Predicate<T>}\n */\nexport function or<T>(...predicates: Array<Predicate<T>>): Predicate<T> {\n    return new Or<T>(predicates);\n}\n\n/** @access private */\nclass Or<T> extends Predicate<T> {\n\n    constructor(private readonly predicates: Array<Predicate<T>>) {\n        super();\n\n        const results = [\n            _ => isDefined().check(_),\n            _ => isArray().check(_),\n            _ => isGreaterThan(0).check(_.length),\n        ];\n\n        if (results.some(check => check(this.predicates) instanceof Failure)) {\n            throw new Error(`Looks like you haven't specified any predicates to check the value against?`);\n        }\n    }\n\n    /** @override */\n    check(value: T): Result<T> {\n        const results    = this.predicates.map(predicate => predicate.check(value));\n        const anySuccess = results.some(result => result instanceof Success);\n\n        const failures = results.filter(_ => _ instanceof Failure)\n            .map((_: Result<T>) => (_ as Failure<T>).description);\n\n        return anySuccess\n            ? new Success(value)\n            : new Failure(value, describe(failures));\n    }\n}\n\nfunction describe(issues: string[]): string {\n    return `either ${issues.join(', ').replace(/,([^,]*)$/, ' or$1')}`;\n}\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/src/predicates/or.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 205,
    "kind": "function",
    "name": "or",
    "memberof": "src/predicates/or.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/predicates/or.ts~or",
    "access": "public",
    "export": true,
    "importPath": "tiny-types/lib/predicates/or",
    "importStyle": "{or}",
    "description": "Ensures that the `value` meets at least one of the provided {@link Predicate}s.",
    "examples": [
      "import { ensure, isEqualTo, isGreaterThan, isLessThan, or } from 'tiny-type'l\n\nclass Percentage extends TinyType {\n    constructor(public readonly value: number) {\n        ensure('Percentage', value, or(isEqualTo(0), isGreaterThan(0)), or(isLessThan(100), isEqualTo(100));\n    }\n}"
    ],
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Predicate<T>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Predicate<T>"
        ],
        "spread": false,
        "optional": false,
        "name": "predicates",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Predicate<T>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 206,
    "kind": "class",
    "name": "Or",
    "memberof": "src/predicates/or.ts",
    "static": true,
    "longname": "src/predicates/or.ts~Or",
    "access": "private",
    "export": false,
    "importPath": "tiny-types/lib/predicates/or",
    "importStyle": null,
    "description": null,
    "lineNumber": 40,
    "interface": false,
    "extends": [
      "src/predicates/Predicate.js~Predicate"
    ],
    "ignore": true
  },
  {
    "__docId__": 207,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/predicates/or.ts~Or",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/predicates/or.ts~Or#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true
  },
  {
    "__docId__": 208,
    "kind": "member",
    "name": "predicates",
    "memberof": "src/predicates/or.ts~Or",
    "static": false,
    "longname": "src/predicates/or.ts~Or#predicates",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 209,
    "kind": "method",
    "name": "check",
    "memberof": "src/predicates/or.ts~Or",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/predicates/or.ts~Or#check",
    "access": "public",
    "description": null,
    "lineNumber": 64,
    "override": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 210,
    "kind": "function",
    "name": "describe",
    "memberof": "src/predicates/or.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/predicates/or.ts~describe",
    "access": "public",
    "export": false,
    "importPath": "tiny-types/lib/predicates/or",
    "importStyle": null,
    "description": "",
    "lineNumber": 56,
    "params": [
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "issues",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 211,
    "kind": "file",
    "name": "src/predicates/property.ts",
    "content": "import { and } from './and';\nimport { Failure, Predicate, Result, Success } from './Predicate';\n\n/**\n * @desc Ensures that the `property` of the `value` meets the `predicates`\n *\n * @example\n * import { ensure, isGreaterThan, property, TinyType } from 'tiny-types';\n *\n * class Name extends TinyType {\n *     constructor(public readonly value: string) {\n *         super();\n *         ensure('Name', value, property('length', isGreaterThan(3)));\n *     }\n * }\n *\n * @returns {Predicate<T>}\n */\nexport function property<T, K extends keyof T>(propertyName: K, ...predicates: Array<Predicate<T[K]>>): Predicate<T> {\n    return new HaveProperty<T, K>(propertyName, and(...predicates));\n}\n\n/** @access private */\nclass HaveProperty<T, K extends keyof T> extends Predicate<T> {\n\n    constructor(private readonly propertyName: K, private readonly predicate: Predicate<T[K]>) {\n        super();\n    }\n\n    /** @override */\n    check(value: T): Result<T> {\n        const result = this.predicate.check(value[this.propertyName]);\n\n        return result instanceof Failure\n            ? new Failure(value, `have a property \"${ String(this.propertyName) }\" that ${ result.description }`\n                .replaceAll(/\\bbe\\b/gi, 'is')\n                .replaceAll(/\\beither is\\b/gi, 'is either'),\n            )\n            : new Success(value);\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/src/predicates/property.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 212,
    "kind": "function",
    "name": "property",
    "memberof": "src/predicates/property.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/predicates/property.ts~property",
    "access": "public",
    "export": true,
    "importPath": "tiny-types/lib/predicates/property",
    "importStyle": "{property}",
    "description": "Ensures that the `property` of the `value` meets the `predicates`",
    "examples": [
      "import { ensure, isGreaterThan, property, TinyType } from 'tiny-types';\n\nclass Name extends TinyType {\n    constructor(public readonly value: string) {\n        super();\n        ensure('Name', value, property('length', isGreaterThan(3)));\n    }\n}"
    ],
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Predicate<T>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Predicate<T>"
      ],
      "spread": false,
      "description": ""
    },
    "params": [
      {
        "name": "propertyName",
        "types": [
          "*"
        ]
      },
      {
        "name": "predicates",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ]
  },
  {
    "__docId__": 213,
    "kind": "class",
    "name": "HaveProperty",
    "memberof": "src/predicates/property.ts",
    "static": true,
    "longname": "src/predicates/property.ts~HaveProperty",
    "access": "private",
    "export": false,
    "importPath": "tiny-types/lib/predicates/property",
    "importStyle": null,
    "description": null,
    "lineNumber": 40,
    "interface": false,
    "extends": [
      "src/predicates/Predicate.js~Predicate"
    ],
    "ignore": true
  },
  {
    "__docId__": 214,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/predicates/property.ts~HaveProperty",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/predicates/property.ts~HaveProperty#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true
  },
  {
    "__docId__": 215,
    "kind": "member",
    "name": "propertyName",
    "memberof": "src/predicates/property.ts~HaveProperty",
    "static": false,
    "longname": "src/predicates/property.ts~HaveProperty#propertyName",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 216,
    "kind": "member",
    "name": "predicate",
    "memberof": "src/predicates/property.ts~HaveProperty",
    "static": false,
    "longname": "src/predicates/property.ts~HaveProperty#predicate",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 217,
    "kind": "method",
    "name": "check",
    "memberof": "src/predicates/property.ts~HaveProperty",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/predicates/property.ts~HaveProperty#check",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "override": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 218,
    "kind": "file",
    "name": "src/predicates/startsWith.ts",
    "content": "import { Predicate } from './Predicate';\n\n/**\n * @desc Ensures that the `value` starts with a given prefix.\n *\n * @example\n * import { ensure, startsWith, TinyType } from 'tiny-types';\n *\n * class Username extends TinyType {\n *     constructor(public readonly value: string) {\n *         super();\n *\n *         ensure('Username', value, startsWith('usr'));\n *     }\n * }\n *\n * @param {string} prefix\n *\n * @returns {Predicate<string>}\n */\nexport function startsWith(prefix: string): Predicate<string> {\n    return Predicate.to(`start with '${ prefix }'`, (value: string) =>\n        typeof value === 'string'\n            && value.startsWith(prefix),\n    );\n}\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/src/predicates/startsWith.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 219,
    "kind": "function",
    "name": "startsWith",
    "memberof": "src/predicates/startsWith.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/predicates/startsWith.ts~startsWith",
    "access": "public",
    "export": true,
    "importPath": "tiny-types/lib/predicates/startsWith",
    "importStyle": "{startsWith}",
    "description": "Ensures that the `value` starts with a given prefix.",
    "examples": [
      "import { ensure, startsWith, TinyType } from 'tiny-types';\n\nclass Username extends TinyType {\n    constructor(public readonly value: string) {\n        super();\n\n        ensure('Username', value, startsWith('usr'));\n    }\n}"
    ],
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Predicate<string>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "prefix",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Predicate<string>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 220,
    "kind": "file",
    "name": "src/types/constructors.ts",
    "content": "/* eslint-disable @typescript-eslint/ban-types */\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type ConstructorOrAbstract<T = {}> = Function & { prototype: T };                  // tslint:disable-line:ban-types\nexport type ConstructorAbstractOrInstance<T = {}> = T | ConstructorOrAbstract;            // tslint:disable-line:ban-types\n/* eslint-enable @typescript-eslint/ban-types */\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/src/types/constructors.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 221,
    "kind": "file",
    "name": "src/types/index.ts",
    "content": "export * from './constructors';\nexport * from './json';\nexport * from './list';\nexport * from './serialisation';\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/src/types/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 222,
    "kind": "file",
    "name": "src/types/json.ts",
    "content": "export type Null = null;\nexport type NonNullJSONPrimitive = string | number | boolean;\nexport type JSONPrimitive = NonNullJSONPrimitive | Null;\nexport interface JSONObject {\n    [_: string]: JSONPrimitive | JSONObject | JSONArray;\n}\nexport interface JSONArray extends Array<JSONValue> {}          // eslint-disable-line @typescript-eslint/no-empty-interface\nexport type JSONValue = JSONPrimitive | JSONObject | JSONArray;\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/src/types/json.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 223,
    "kind": "file",
    "name": "src/types/list.ts",
    "content": "export type List<T> = T[];\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/src/types/list.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 224,
    "kind": "file",
    "name": "src/types/serialisation.ts",
    "content": "import { JSONValue } from './json';\n\nexport interface Serialisable<S extends JSONValue = JSONValue> {\n    toJSON(): S | undefined;\n}\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/src/types/serialisation.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "kind": "index",
    "content": "# Tiny Types\n\n[![npm version](https://badge.fury.io/js/tiny-types.svg)](https://badge.fury.io/js/tiny-types)\n[![Build Status](https://github.com/jan-molak/tiny-types/workflows/build/badge.svg)](https://github.com/jan-molak/tiny-types/actions)\n[![Coverage Status](https://coveralls.io/repos/github/jan-molak/tiny-types/badge.svg?branch=master)](https://coveralls.io/github/jan-molak/tiny-types?branch=master)\n[![Commitizen friendly](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/)\n[![npm](https://img.shields.io/npm/dm/tiny-types.svg)](https://npm-stat.com/charts.html?package=tiny-types)\n[![Known Vulnerabilities](https://snyk.io/test/github/jan-molak/tiny-types/badge.svg)](https://snyk.io/test/github/jan-molak/tiny-types)\n[![GitHub stars](https://img.shields.io/github/stars/jan-molak/tiny-types)](https://github.com/jan-molak/tiny-types)\n\n[![Twitter Follow](https://img.shields.io/twitter/follow/JanMolak?style=social)](https://twitter.com/@JanMolak)\n\nTinyTypes is an [npm module](https://www.npmjs.com/package/tiny-types) that makes it easy for TypeScript and JavaScript\nprojects to give domain meaning to primitive types. It also helps to avoid all sorts of bugs \nand makes your code easier to refactor. [Learn more.](https://janmolak.com/tiny-types-in-typescript-4680177f026e)\n\n## Installation\n\nTo install the module from npm:\n\n```\nnpm install --save tiny-types\n```\n\n## API Docs\n\nAPI documentation is available at [jan-molak.github.io/tiny-types/](https://jan-molak.github.io/tiny-types/).\n\n## For Enterprise\n\n<a href=\"https://tidelift.com/subscription/pkg/npm-tiny-types?utm_source=npm-tiny-types&utm_medium=referral&utm_campaign=enterprise&utm_term=repo\" target=\"_blank\"><img width=\"163\" height=\"24\" src=\"https://cdn2.hubspot.net/hubfs/4008838/website/logos/logos_for_download/Tidelift_primary-logo.png\" class=\"tidelift-logo\" /></a>\n\nTinyTypes are available as part of the [Tidelift Subscription](https://tidelift.com/subscription/pkg/npm-tiny-types?utm_source=npm-tiny-types&utm_medium=referral&utm_campaign=enterprise&utm_term=repo). The maintainers of TinyTypes and thousands of other packages are working with Tidelift to deliver one enterprise subscription that covers all of the open source you use. If you want the flexibility of open source and the confidence of commercial-grade software, this is for you. [Learn more.](https://tidelift.com/subscription/pkg/npm-tiny-types?utm_source=npm-tiny-types&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)\n\n## Defining Tiny Types\n\n> An int on its own is just a scalar with no meaning. With an object, even a small one, you are giving both the compiler \nand the programmer additional information  about what the value is and why it is being used.\n>\n> &dash; [Jeff Bay, Object Calisthenics](http://www.xpteam.com/jeff/writings/objectcalisthenics.rtf)\n\n### Single-value types\n\nTo define a single-value `TinyType` - extend from `TinyTypeOf<T>()`:\n\n```typescript\nimport { TinyTypeOf } from 'tiny-types';\n\nclass FirstName extends TinyTypeOf<string>() {}\nclass LastName  extends TinyTypeOf<string>() {}\nclass Age       extends TinyTypeOf<number>() {}\n```\n \nEvery tiny type defined this way has\na [readonly property](https://www.typescriptlang.org/docs/handbook/classes.html#readonly-modifier)\n`value` of type `T`, which you can use to access the wrapped primitive value. For example:\n\n```typescript\nconst firstName = new FirstName('Jan');\n\nfirstName.value === 'Jan';\n```\n\n#### Equals\n\nEach tiny type object has an `equals` method, which you can use to compare it by value:\n\n```typescript\nconst \n    name1 = new FirstName('Jan'),\n    name2 = new FirstName('Jan');\n\nname1.equals(name2) === true; \n```\n\n#### ToString\n\nAn additional feature of tiny types is a built-in `toString()` method:\n\n```typescript\nconst name = new FirstName('Jan');\n\nname.toString() === 'FirstName(value=Jan)';\n```\n\nWhich you can override if you want to:\n\n```typescript\nclass Timestamp extends TinyTypeOf<Date>() {\n    toString() {\n        return `Timestamp(value=${this.value.toISOString()})`;\n    }\n}\n\nconst timestamp = new Timestamp(new Date());\n\ntimestampt.toString() === 'Timestamp(value=2018-03-12T00:30:00.000Z))'\n```\n\n### Multi-value and complex types\n\nIf the tiny type you want to model has more than one value,\nor you want to perform additional operations in the constructor,\nextend from `TinyType` directly:\n\n```typescript\nimport { TinyType } from 'tiny-types';\n\nclass Person extends TinyType {\n    constructor(public readonly firstName: FirstName,\n                public readonly lastName: LastName,\n    ) {\n        super();\n    }\n}\n\n```\n\nYou can also mix and match both of the above definition styles:\n\n```typescript\nimport { TinyType, TinyTypeOf } from 'tiny-types';\n\nclass UserName extends TinyTypeOf<string>() {}\n\nclass Timestamp extends TinyTypeOf<Date>() {\n    toString() {\n        return `Timestamp(value=${this.value.toISOString()})`;\n    }\n}\n\nabstract class DomainEvent extends TinyTypeOf<Timestamp>() {}\n\nclass AccountCreated extends DomainEvent {\n    constructor(public readonly username: UserName, timestamp: Timestamp) {\n        super(timestamp);\n    }\n}\n\nconst event = new AccountCreated(new UserName('jan-molak'), new Timestamp(new Date()));\n```\n\nEven such complex types still have both the `equals` and `toString` methods:\n\n```typescript \nconst \n    now = new Date(2018, 2, 12, 0, 30),\n    event1 = new AccountCreated(new UserName('jan-molak'), new Timestamp(now)),\n    event2 = new AccountCreated(new UserName('jan-molak'), new Timestamp(now));\n    \nevent1.equals(event2) === true;\n\nevent1.toString() === 'AccountCreated(username=UserName(value=jan-molak), value=Timestamp(value=2018-03-12T00:30:00.000Z))'\n```\n\n## Guaranteed runtime correctness\n\nThe best way to guarantee runtime correctness of your domain models is to ensure that no tiny type can ever hold invalid data at runtime.\nThis way, when a function receives an instance of a tiny type, it does not need to perform any checks on it and can simply trust that \nits value is correct. OK, but how do you guarantee that? \n\nLet me show you an example. \n\nImagine that upon registering a customer on your website you need to ask them their age.\nHow would you model the concept of \"age\" in your system?\n\nYou might consider using a [`number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) for this purpose:\n```typescript\nconst age = 35;\n```\nHowever, this is far from ideal as \"age\" is not just _any_ number: it can't be negative, it has to be an integer, and it's highly unlikely that your customers would ever be [2<sup>53</sup>-1 years old](https://www.ecma-international.org/ecma-262/10.0/index.html#sec-ecmascript-language-types-number-type).\n\nAll that means that there are certain _rules_ that an object representing \"age\" needs to obey, certain _constraints_ that its value has to meet in order to be considered valid.\n\nYou might have already guessed that my recommendation to you would be to define a tiny type representing `Age`, but not just that.\nYou should also take it a step further and use the [`ensure`](https://jan-molak.github.io/tiny-types/function/index.html#static-function-ensure) function together with other [`predicates`](https://jan-molak.github.io/tiny-types/identifiers.html#predicates) to describe the constraints the underlying value has to meet:\n\n```typescript\nimport { TinyType, ensure, isDefined, isInteger, isInRange } from 'tiny-types'\n\nclass Age extends TinyType {\n  constructor(public readonly value: number) {\n    ensure('Age', value, isDefined(), isInteger(), isInRange(0, 125));\n  }\n} \n```\n\nWith a tiny type defined as per the above code sample you can eliminate entire classes of errors. You also have one place in your\nsystem where you define what \"age\" means.\n\n## Serialisation to JSON\n\nEvery TinyType defines \na [`toJSON()` method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#toJSON%28%29_behavior), \nwhich returns a JSON representation of the object. This means that you can use TinyTypes \nas [Data Transfer Objects](https://en.wikipedia.org/wiki/Data_transfer_object).\n\nSingle-value TinyTypes are serialised to the value itself:\n\n```typescript\nimport { TinyTypeOf } from 'tiny-types';\n\nclass FirstName extends TinyTypeOf<string>() {}\n\nconst firstName = new FirstName('Jan');\n\nfirstName.toJSON() === 'Jan'\n```\n\nComplex TinyTypes are serialised recursively:\n\n```typescript\nimport { TinyType, TinyTypeOf } from 'tiny-types';\n\nclass FirstName extends TinyTypeOf<string>() {}\nclass LastName extends TinyTypeOf<string>() {}\nclass Age extends TinyTypeOf<number>() {}\nclass Person extends TinyType {\n    constructor(\n        public readonly firstName: FirstName,\n        public readonly lastName: LastName,\n        public readonly age: Age,\n    ) {\n        super();\n    }\n}\n\nconst person = new Person(new FirstName('Bruce'), new LastName('Smith'), new Age(55));\n\nperson.toJSON() === { firstName: 'Bruce', lastName: 'Smith', age: 55 }\n```\n\n## De-serialisation from JSON\n\nAlthough you could define standalone de-serialisers, I like to define them \nas [static factory methods](https://en.wikipedia.org/wiki/Factory_method_pattern) on the TinyTypes themselves:\n\n```typescript\nimport { TinyTypeOf } from 'tiny-types';\n\nclass FirstName extends TinyTypeOf<string>() {\n    static fromJSON = (v: string) => new FirstName(v);\n}\n\nconst firstName = new FirstName('Jan'),\n\nFirstName.fromJSON(firstName.toJSON()).equals(firstName) === true\n```\n\nWhen working with complex TinyTypes, you can use the (experimental) `Serialised` interface\nto reduce the likelihood of your custom `fromJSON` method being incompatible with `toJSON`:\n\n```typescript\nimport { TinyTypeOf, TinyType, Serialised } from 'tiny-types';\n\nclass EmployeeId extends TinyTypeOf<number>() {\n    static fromJSON = (id: number) => new EmployeeId(id);\n}\n\nclass DepartmentId extends TinyTypeOf<string>() {\n    static fromJSON = (id: string) => new DepartmentId(id);\n}\n\nclass Allocation extends TinyType {\n    static fromJSON = (o: Serialised<Allocation>) => new Allocation(\n        EmployeeId.fromJSON(o.employeeId as number),\n        DepartmentId.fromJSON(o.departmentId as string),\n    )\n\n    constructor(public readonly employeeId: EmployeeId, public readonly departmentId: DepartmentId) {\n        super();\n    }\n}\n``` \n\nThis way de-serialising a complex type becomes trivial:\n\n```typescript\nconst allocation = new Allocation(new EmployeeId(1), new DepartmentId('engineering'));\n\nconst deserialised = Allocation.fromJSON({ departmentId: 'engineering', employeeId: 1 });\n\nallocation.equals(deserialised) === true\n``` \n\nAlthough `Serialised` is by no means 100% foolproof as it's only limited to checking whether your input JSON has the same fields\nas the object you're trying to de-serialise, it can at least help you to avoid errors caused by typos.\n\n## Your feedback matters!\n\nDo you find TinyTypes useful? [Give it a star!](https://github.com/jan-molak/tiny-types) &#9733;\n\nFound a bug? Need a feature? Raise [an issue](https://github.com/jan-molak/tiny-types/issues?state=open)\nor submit a pull request.\n\nHave feedback? Let me know on twitter: [@JanMolak](https://twitter.com/JanMolak)\n\n[![Twitter Follow](https://img.shields.io/twitter/follow/JanMolak?style=social)](https://twitter.com/@JanMolak)\n\n## Before you go\n\n☕ If TinyTypes have made your life a little bit easier and saved at least $5 worth of your time,\nplease consider repaying the favour and [buying me a coffee](https://github.com/sponsors/jan-molak) via [Github Sponsors](https://github.com/sponsors/jan-molak). Thanks! 🙏\n\n## License\n\nTinyTypes library is licensed under the [Apache-2.0](https://github.com/jan-molak/tiny-types/blob/master/LICENSE.md) license.\n\n_- Copyright &copy; 2018- [Jan Molak](https://janmolak.com)_\n",
    "longname": "/home/runner/work/tiny-types/tiny-types/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"tiny-types\",\n  \"version\": \"0.0.0-development\",\n  \"description\": \"A tiny library that brings Tiny Types to JavaScript and TypeScript\",\n  \"main\": \"lib/index.js\",\n  \"typings\": \"lib/index.d.ts\",\n  \"scripts\": {\n    \"clean\": \"rimraf docs lib reports\",\n    \"lint\": \"eslint --ext ts --config .eslintrc.yml .\",\n    \"lint:fix\": \"npm run lint -- --fix\",\n    \"test\": \"nyc --report-dir ./reports/coverage mocha 'spec/**/*.spec.*'\",\n    \"compile\": \"tsc --project tsconfig.json\",\n    \"verify\": \"npm run clean && npm run lint && npm test && npm run compile\",\n    \"doc\": \"esdoc\",\n    \"publish:reports\": \"nyc report --reporter=text-lcov | coveralls\",\n    \"commit\": \"git-cz\",\n    \"semantic-release\": \"semantic-release\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/jan-molak/tiny-types.git\"\n  },\n  \"keywords\": [\n    \"design\",\n    \"patterns\",\n    \"value\",\n    \"objects\",\n    \"tiny\",\n    \"types\",\n    \"ddd\",\n    \"domain-driven\",\n    \"design\"\n  ],\n  \"author\": \"Jan Molak <jan.molak@smartcodeltd.co.uk>\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/jan-molak/tiny-types/issues\"\n  },\n  \"homepage\": \"https://jan-molak.github.io/tiny-types/\",\n  \"engines\": {\n    \"node\": \"^16 || ^18 || ^20 || ^22\"\n  },\n  \"devDependencies\": {\n    \"@types/chai\": \"4.3.20\",\n    \"@types/mocha\": \"10.0.9\",\n    \"@types/node\": \"20.17.2\",\n    \"@types/sinon\": \"17.0.3\",\n    \"@types/sinon-chai\": \"3.2.12\",\n    \"@typescript-eslint/eslint-plugin\": \"7.18.0\",\n    \"@typescript-eslint/parser\": \"7.18.0\",\n    \"chai\": \"4.5.0\",\n    \"cheerio\": \"1.0.0\",\n    \"commitizen\": \"4.3.1\",\n    \"coveralls\": \"3.1.1\",\n    \"cz-conventional-changelog\": \"3.3.0\",\n    \"esdoc\": \"1.1.0\",\n    \"esdoc-importpath-plugin\": \"1.0.2\",\n    \"esdoc-inject-style-plugin\": \"1.0.0\",\n    \"esdoc-standard-plugin\": \"1.0.0\",\n    \"esdoc-typescript-plugin\": \"1.0.1\",\n    \"eslint\": \"8.57.1\",\n    \"eslint-plugin-import\": \"2.31.0\",\n    \"eslint-plugin-mocha\": \"10.5.0\",\n    \"eslint-plugin-simple-import-sort\": \"12.1.1\",\n    \"eslint-plugin-unicorn\": \"56.0.0\",\n    \"eslint-plugin-unused-imports\": \"4.1.4\",\n    \"mocha\": \"10.7.3\",\n    \"mocha-testdata\": \"1.2.0\",\n    \"nyc\": \"17.1.0\",\n    \"rimraf\": \"6.0.1\",\n    \"semantic-release\": \"24.2.0\",\n    \"sinon\": \"19.0.2\",\n    \"sinon-chai\": \"3.7.0\",\n    \"ts-node\": \"10.9.2\",\n    \"typescript\": \"5.6.3\"\n  },\n  \"config\": {\n    \"commitizen\": {\n      \"path\": \"./node_modules/cz-conventional-changelog\"\n    }\n  },\n  \"nyc\": {\n    \"include\": [\n      \"src/*.ts\",\n      \"src/**/*.ts\"\n    ],\n    \"exclude\": [\n      \"lib\",\n      \"node_modules\",\n      \"spec\",\n      \"src/types\"\n    ],\n    \"extension\": [\n      \".ts\"\n    ],\n    \"require\": [\n      \"ts-node/register\"\n    ],\n    \"reporter\": [\n      \"json\",\n      \"text\",\n      \"text-summary\",\n      \"html\"\n    ],\n    \"cache\": true,\n    \"all\": true\n  }\n}\n",
    "longname": "/home/runner/work/tiny-types/tiny-types/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "__docId__": 225,
    "kind": "testFile",
    "name": "spec/TinyType.spec.ts",
    "content": "import 'mocha';\n\nimport { given } from 'mocha-testdata';\n\nimport { JSONObject, JSONPrimitive, TinyType, TinyTypeOf } from '../src';\nimport { expect } from './expect';\n\n/** @test {TinyType} */\ndescribe('TinyType', () => {\n\n    describe('wrapping a single value', () => {\n\n        /** @test {TinyType} */\n        describe('definition', () => {\n\n            /** @test {TinyTypeOf} */\n            it('can be a one-liner for TinyTypes representing a single value', () => {\n                class FirstName extends TinyTypeOf<string>() {\n                }\n\n                const firstName = new FirstName('Jan');\n\n                expect(firstName.value).to.equal('Jan');\n                expect(firstName).to.be.instanceOf(FirstName);\n                expect(firstName).to.be.instanceOf(TinyType);\n                expect(firstName.constructor.name).to.equal('FirstName');\n                expect(firstName.toString()).to.equal('FirstName(value=Jan)');\n            });\n\n            /** @test {TinyTypeOf} */\n            it('prevents null and undefined when the single-line definition style is used', () => {\n                class FirstName extends TinyTypeOf<string>() {\n                }\n\n                expect(() => new FirstName(null as any)).to.throw('FirstName should be defined');\n                expect(() => new FirstName(undefined as any)).to.throw('FirstName should be defined');\n            });\n\n            /**\n             * @test {TinyType}\n             * @test {TinyTypeOf}\n             */\n            it('needs to extend the TinyType for types with more than one value', () => {\n                class FirstName extends TinyTypeOf<string>() {\n                }\n\n                class LastName extends TinyTypeOf<string>() {\n                }\n\n                class FullName extends TinyType {\n                    constructor(\n                        public readonly firstName: FirstName,\n                        public readonly lastName: LastName,\n                    ) {\n                        super();\n                    }\n                }\n\n                const fullName = new FullName(new FirstName('Jan'), new LastName('Molak'));\n\n                expect(fullName.firstName.value).to.equal('Jan');\n                expect(fullName.lastName.value).to.equal('Molak');\n                expect(fullName).to.be.instanceOf(FullName);\n                expect(fullName).to.be.instanceOf(FullName);\n                expect(fullName.constructor.name).to.equal('FullName');\n                expect(fullName.toString()).to.equal('FullName(firstName=FirstName(value=Jan), lastName=LastName(value=Molak))');\n            });\n\n            /**\n             * @test {TinyType}\n             * @test {TinyTypeOf}\n             */\n            it('can be mixed and matched', () => {\n                const now = new Date(Date.UTC(2018, 2, 12, 0, 30, 0));\n\n                class UserName extends TinyTypeOf<string>() {\n                }\n\n                class Timestamp extends TinyTypeOf<Date>() {\n                    toString() {\n                        return `Timestamp(value=${ this.value.toISOString() })`;\n                    }\n                }\n\n                abstract class DomainEvent extends TinyTypeOf<Timestamp>() {\n                }\n\n                class AccountCreated extends DomainEvent {\n                    constructor(public readonly username: UserName, timestamp: Timestamp) {\n                        super(timestamp);\n                    }\n                }\n\n                const event = new AccountCreated(new UserName('jan-molak'), new Timestamp(now));\n\n                expect(event.toString()).to.equal(\n                    'AccountCreated(username=UserName(value=jan-molak), value=Timestamp(value=2018-03-12T00:30:00.000Z))',\n                );\n            });\n        });\n\n        /** @test {TinyType#toString} */\n        describe('::toString', () => {\n            class Area extends TinyTypeOf<string>() {\n            }\n\n            class District extends TinyTypeOf<number>() {\n            }\n\n            class Sector extends TinyTypeOf<number>() {\n            }\n\n            class Unit extends TinyTypeOf<string>() {\n            }\n\n            class Postcode extends TinyType {\n                constructor(public readonly area: Area,\n                    public readonly district: District,\n                    public readonly sector: Sector,\n                    public readonly unit: Unit,\n                ) {\n                    super();\n                }\n            }\n\n            it('mentions the class and its properties', () => {\n                const area = new Area('GU');\n\n                expect(area.toString()).to.equal('Area(value=GU)');\n            });\n\n            it('mentions the class and its fields, but not the methods', () => {\n                class Person extends TinyType {\n                    constructor(public readonly name: string) {\n                        super();\n                    }\n\n                    rename = (newName: string) => new Person(newName);\n                }\n\n                const p = new Person('James');\n\n                expect(p.toString())\n                    .to.equal('Person(name=James)');\n            });\n\n            it('only cares about the fields, not the methods', () => {\n                const postcode = new Postcode(\n                    new Area('GU'),\n                    new District(15),\n                    new Sector(9),\n                    new Unit('NZ'),\n                );\n\n                expect(postcode.toString())\n                    .to.equal('Postcode(area=Area(value=GU), district=District(value=15), sector=Sector(value=9), unit=Unit(value=NZ))');\n            });\n\n            it('prints the array-type properties', () => {\n                class Name extends TinyTypeOf<string>() {\n                }\n\n                class Names extends TinyTypeOf<Name[]>() {\n                }\n\n                const names = new Names([new Name('Alice'), new Name('Bob')]);\n\n                expect(names.toString())\n                    .to.equal('Names(value=Array(Name(value=Alice), Name(value=Bob)))');\n            });\n\n            it('prints the object-type properties', () => {\n                class Dictionary extends TinyTypeOf<{ [key: string]: string }>() {\n                }\n\n                const dictionary = new Dictionary({ greeting: 'Hello', subject: 'World' });\n\n                expect(dictionary.toString())\n                    .to.equal('Dictionary(value=Object(greeting=Hello, subject=World))');\n            });\n        });\n\n        /** @test {TinyType#toJSON} */\n        describe('serialisation', () => {\n\n            class FirstName extends TinyTypeOf<string>() {\n            }\n\n            class LastName extends TinyTypeOf<string>() {\n            }\n\n            class Age extends TinyTypeOf<number>() {\n            }\n\n            class Person extends TinyType {\n                constructor(public readonly firstName: FirstName,\n                    public readonly lastName: LastName,\n                    public readonly age: Age,\n                ) {\n                    super();\n                }\n            }\n\n            class People extends TinyTypeOf<Person[]>() {\n            }\n\n            class FirstNames extends TinyTypeOf<Array<FirstName | undefined>>() {\n            }\n\n            describe('::toJSON', () => {\n\n                given<TinyType & { value: any }>(\n                    new FirstName('Bruce'),\n                    new Age(55),\n                ).it('should serialise a single-value TinyType to just its value', input => {\n                    expect(input.toJSON()).to.equal(input.value);\n                });\n\n                it('should serialise a complex TinyType recursively', () => {\n\n                    const person = new Person(new FirstName('Bruce'), new LastName('Smith'), new Age(55));\n\n                    expect(person.toJSON()).to.deep.equal({\n                        firstName: 'Bruce',\n                        lastName: 'Smith',\n                        age: 55,\n                    });\n                });\n\n                it(`should serialise an array recursively`, () => {\n                    const people = new People([\n                        new Person(new FirstName('Alice'), new LastName('Jones'), new Age(62)),\n                        new Person(new FirstName('Bruce'), new LastName('Smith'), new Age(55)),\n                    ]);\n\n                    expect(people.toJSON()).to.deep.equal([{\n                        firstName: 'Alice',\n                        lastName: 'Jones',\n                        age: 62,\n                    }, {\n                        firstName: 'Bruce',\n                        lastName: 'Smith',\n                        age: 55,\n                    }]);\n                });\n\n                it(`should serialise undefined array values as null`, () => {\n                    const firstNames = new FirstNames([\n                        new FirstName('Alice'),\n                        undefined,\n                        new FirstName('Cecil'),\n                    ]);\n\n                    expect(firstNames.toJSON()).to.deep.equal([\n                        'Alice',\n                        null,\n                        'Cecil',\n                    ]);\n                });\n\n                it(`should serialise a plain-old JavaScript object`, () => {\n                    class Parameters extends TinyTypeOf<{ [parameter: string]: string }>() {\n                    }\n\n                    const parameters = new Parameters({\n                        env: 'prod',\n                    });\n\n                    expect(parameters.toJSON()).to.deep.equal({\n                        env: 'prod',\n                    });\n                });\n\n                it(`should serialise Map as object`, () => {\n                    class Notes extends TinyTypeOf<Map<string, any>>() {\n                    }\n\n                    const parameters = new Notes(new Map(Object.entries({\n                        stringEntry: 'prod',\n                        numberEntry: 42,\n                        objectEntry: { key: 'value' },\n                    })));\n\n                    expect(parameters.toJSON()).to.deep.equal({\n                        stringEntry: 'prod',\n                        numberEntry: 42,\n                        objectEntry: { key: 'value' },\n                    });\n                });\n\n                it(`should serialise a Set as Array`, () => {\n                    class Notes extends TinyTypeOf<Set<string>>() {\n                    }\n\n                    const parameters = new Notes(new Set(['apples', 'bananas', 'cucumbers']));\n\n                    expect(parameters.toJSON()).to.deep.equal(['apples', 'bananas', 'cucumbers']);\n                });\n\n                it(`should serialise an Error as its stack trace`, () => {\n                    class CustomError extends TinyTypeOf<Error>() {\n                    }\n\n                    const error = thrown(new Error('example error'))\n\n                    const customError = new CustomError(error);\n\n                    expect(customError.toJSON()).to.deep.equal({\n                        message:    'example error',\n                        stack:      error.stack,\n                    });\n                });\n\n                it('should serialise a plain-old JavaScript object with nested complex types recursively', () => {\n                    interface NotesType {\n                        authCredentials: {\n                            username: string;\n                            password: string;\n                        },\n                        names:  Set<FirstName>;\n                        age:    Map<FirstName, Age>;\n                    }\n\n                    class Notes extends TinyTypeOf<NotesType>() {\n                    }\n\n                    const\n                        alice = new FirstName('Alice'),\n                        bob = new FirstName('Bob'),\n                        cindy = new FirstName('Cindy');\n\n                    const names = new Set<FirstName>([ alice, bob, cindy ]);\n                    const age = new Map<FirstName, Age>()\n                        .set(alice, new Age(23))\n                        .set(bob, new Age(42))\n                        .set(cindy, new Age(67));\n\n                    const notes = new Notes({\n                        authCredentials: {\n                            username: 'Alice',\n                            password: 'P@ssw0rd!',\n                        },\n                        names,\n                        age\n                    });\n\n                    expect(notes.toJSON()).to.deep.equal({\n                        authCredentials: {\n                            username: 'Alice',\n                            password: 'P@ssw0rd!',\n                        },\n                        names: [ 'Alice', 'Bob', 'Cindy' ],\n                        age: {\n                            Alice: 23,\n                            Bob: 42,\n                            Cindy: 67,\n                        }\n                    });\n                });\n\n                it('should serialise null and undefined', () => {\n                    interface NotesType {\n                        nullValue: any;\n                        undefinedValue: any;\n                    }\n\n                    class Notes extends TinyTypeOf<NotesType>() {\n                    }\n\n                    const notes = new Notes({\n                        nullValue: null,\n                        undefinedValue: undefined,\n                    });\n\n                    expect(notes.toJSON()).to.deep.equal({\n                        nullValue: null,\n                        undefinedValue: undefined,\n                    });\n                });\n\n                it(`should JSON.stringify any object that can't be represented in a more sensible way`, () => {\n                    class TT extends TinyTypeOf<number>() {\n                    }\n\n                    const tt = new TT(Number.NaN);\n\n                    expect(tt.toJSON()).to.equal('null');\n                });\n            });\n        });\n\n        /** @test {TinyType} */\n        describe('de-serialisation', () => {\n\n            type SerialisedFirstName = string & JSONPrimitive;\n\n            class FirstName extends TinyTypeOf<string>() {\n                static fromJSON = (v: SerialisedFirstName) => new FirstName(v);\n\n                toJSON(): SerialisedFirstName {\n                    return super.toJSON() as SerialisedFirstName;\n                }\n            }\n\n            type SerialisedLastName = string & JSONPrimitive;\n\n            class LastName extends TinyTypeOf<string>() {\n                static fromJSON = (v: SerialisedLastName) => new LastName(v);\n\n                toJSON(): SerialisedLastName {\n                    return super.toJSON() as SerialisedLastName;\n                }\n            }\n\n            type SerialisedAge = number & JSONPrimitive;\n\n            class Age extends TinyTypeOf<number>() {\n                static fromJSON = (v: SerialisedAge) => new Age(v);\n\n                toJSON(): SerialisedAge {\n                    return super.toJSON() as SerialisedAge;\n                }\n            }\n\n            interface SerialisedPerson extends JSONObject {\n                firstName: SerialisedFirstName;\n                lastName: SerialisedLastName;\n                age: SerialisedAge;\n            }\n\n            class Person extends TinyType {\n                static fromJSON = (v: SerialisedPerson) => new Person(\n                    FirstName.fromJSON(v.firstName),\n                    LastName.fromJSON(v.lastName),\n                    Age.fromJSON(v.age),\n                );\n\n                constructor(public readonly firstName: FirstName,\n                    public readonly lastName: LastName,\n                    public readonly age: Age,\n                ) {\n                    super();\n                }\n\n                toJSON(): SerialisedPerson {\n                    return super.toJSON() as SerialisedPerson;\n                }\n            }\n\n            it('custom fromJSON can de-serialise a serialised single-value TinyType', () => {\n                const firstName = new FirstName('Jan');\n\n                // tslint:disable-next-line:no-unused-expression\n                expect(FirstName.fromJSON(firstName.toJSON()).equals(firstName)).to.be.true;\n            });\n\n            it('custom fromJSON can recursively de-serialise a serialised complex TinyType', () => {\n                const person = new Person(new FirstName('Bruce'), new LastName('Smith'), new Age(55));\n\n                // tslint:disable-next-line:no-unused-expression\n                expect(Person.fromJSON(person.toJSON()).equals(person)).to.be.true;\n            });\n        });\n    });\n});\n\nfunction thrown<T>(throwable: T): T {\n    try {\n        throw throwable;\n    } catch (error) {\n        return error as T;\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/spec/TinyType.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 226,
    "kind": "test",
    "name": "describe0",
    "testId": 0,
    "memberof": "spec/TinyType.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/TinyType.spec.ts~describe0",
    "access": null,
    "description": "TinyType",
    "lineNumber": 6,
    "testTargets": [
      "TinyType"
    ]
  },
  {
    "__docId__": 227,
    "kind": "test",
    "name": "describe1",
    "testId": 1,
    "memberof": "spec/TinyType.spec.ts~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "spec/TinyType.spec.ts~describe0.describe1",
    "access": null,
    "description": "wrapping a single value",
    "lineNumber": 7
  },
  {
    "__docId__": 228,
    "kind": "test",
    "name": "describe2",
    "testId": 2,
    "memberof": "spec/TinyType.spec.ts~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "spec/TinyType.spec.ts~describe0.describe1.describe2",
    "access": null,
    "description": "definition",
    "lineNumber": 9,
    "testTargets": [
      "TinyType"
    ]
  },
  {
    "__docId__": 229,
    "kind": "test",
    "name": "it3",
    "testId": 3,
    "memberof": "spec/TinyType.spec.ts~describe0.describe1.describe2",
    "testDepth": 3,
    "static": true,
    "longname": "spec/TinyType.spec.ts~describe0.describe1.describe2.it3",
    "access": null,
    "description": "can be a one-liner for TinyTypes representing a single value",
    "lineNumber": 11,
    "testTargets": [
      "TinyTypeOf"
    ]
  },
  {
    "__docId__": 230,
    "kind": "test",
    "name": "it4",
    "testId": 4,
    "memberof": "spec/TinyType.spec.ts~describe0.describe1.describe2",
    "testDepth": 3,
    "static": true,
    "longname": "spec/TinyType.spec.ts~describe0.describe1.describe2.it4",
    "access": null,
    "description": "prevents null and undefined when the single-line definition style is used",
    "lineNumber": 28,
    "testTargets": [
      "TinyTypeOf"
    ]
  },
  {
    "__docId__": 231,
    "kind": "test",
    "name": "it5",
    "testId": 5,
    "memberof": "spec/TinyType.spec.ts~describe0.describe1.describe2",
    "testDepth": 3,
    "static": true,
    "longname": "spec/TinyType.spec.ts~describe0.describe1.describe2.it5",
    "access": null,
    "description": "needs to extend the TinyType for types with more than one value",
    "lineNumber": 44,
    "testTargets": [
      "TinyType",
      "TinyTypeOf"
    ]
  },
  {
    "__docId__": 232,
    "kind": "test",
    "name": "it6",
    "testId": 6,
    "memberof": "spec/TinyType.spec.ts~describe0.describe1.describe2",
    "testDepth": 3,
    "static": true,
    "longname": "spec/TinyType.spec.ts~describe0.describe1.describe2.it6",
    "access": null,
    "description": "can be mixed and matched",
    "lineNumber": 86,
    "testTargets": [
      "TinyType",
      "TinyTypeOf"
    ]
  },
  {
    "__docId__": 233,
    "kind": "test",
    "name": "describe7",
    "testId": 7,
    "memberof": "spec/TinyType.spec.ts~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "spec/TinyType.spec.ts~describe0.describe1.describe7",
    "access": null,
    "description": "::toString",
    "lineNumber": 138,
    "testTargets": [
      "TinyType#toString"
    ]
  },
  {
    "__docId__": 234,
    "kind": "test",
    "name": "it8",
    "testId": 8,
    "memberof": "spec/TinyType.spec.ts~describe0.describe1.describe7",
    "testDepth": 3,
    "static": true,
    "longname": "spec/TinyType.spec.ts~describe0.describe1.describe7.it8",
    "access": null,
    "description": "mentions the class and its properties",
    "lineNumber": 186
  },
  {
    "__docId__": 235,
    "kind": "test",
    "name": "it9",
    "testId": 9,
    "memberof": "spec/TinyType.spec.ts~describe0.describe1.describe7",
    "testDepth": 3,
    "static": true,
    "longname": "spec/TinyType.spec.ts~describe0.describe1.describe7.it9",
    "access": null,
    "description": "mentions the class and its fields, but not the methods",
    "lineNumber": 190
  },
  {
    "__docId__": 236,
    "kind": "test",
    "name": "it10",
    "testId": 10,
    "memberof": "spec/TinyType.spec.ts~describe0.describe1.describe7",
    "testDepth": 3,
    "static": true,
    "longname": "spec/TinyType.spec.ts~describe0.describe1.describe7.it10",
    "access": null,
    "description": "only cares about the fields, not the methods",
    "lineNumber": 214
  },
  {
    "__docId__": 237,
    "kind": "test",
    "name": "it11",
    "testId": 11,
    "memberof": "spec/TinyType.spec.ts~describe0.describe1.describe7",
    "testDepth": 3,
    "static": true,
    "longname": "spec/TinyType.spec.ts~describe0.describe1.describe7.it11",
    "access": null,
    "description": "prints the array-type properties",
    "lineNumber": 219
  },
  {
    "__docId__": 238,
    "kind": "test",
    "name": "it12",
    "testId": 12,
    "memberof": "spec/TinyType.spec.ts~describe0.describe1.describe7",
    "testDepth": 3,
    "static": true,
    "longname": "spec/TinyType.spec.ts~describe0.describe1.describe7.it12",
    "access": null,
    "description": "prints the object-type properties",
    "lineNumber": 240
  },
  {
    "__docId__": 239,
    "kind": "test",
    "name": "describe13",
    "testId": 13,
    "memberof": "spec/TinyType.spec.ts~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "spec/TinyType.spec.ts~describe0.describe1.describe13",
    "access": null,
    "description": "serialisation",
    "lineNumber": 255,
    "testTargets": [
      "TinyType#toJSON"
    ]
  },
  {
    "__docId__": 240,
    "kind": "test",
    "name": "describe14",
    "testId": 14,
    "memberof": "spec/TinyType.spec.ts~describe0.describe1.describe13",
    "testDepth": 3,
    "static": true,
    "longname": "spec/TinyType.spec.ts~describe0.describe1.describe13.describe14",
    "access": null,
    "description": "::toJSON",
    "lineNumber": 310
  },
  {
    "__docId__": 241,
    "kind": "test",
    "name": "it15",
    "testId": 15,
    "memberof": "spec/TinyType.spec.ts~describe0.describe1.describe13.describe14",
    "testDepth": 4,
    "static": true,
    "longname": "spec/TinyType.spec.ts~describe0.describe1.describe13.describe14.it15",
    "access": null,
    "description": "should serialise a complex TinyType recursively",
    "lineNumber": 314
  },
  {
    "__docId__": 242,
    "kind": "test",
    "name": "it16",
    "testId": 16,
    "memberof": "spec/TinyType.spec.ts~describe0.describe1.describe13.describe14",
    "testDepth": 4,
    "static": true,
    "longname": "spec/TinyType.spec.ts~describe0.describe1.describe13.describe14.it16",
    "access": null,
    "lineNumber": 322
  },
  {
    "__docId__": 243,
    "kind": "test",
    "name": "it17",
    "testId": 17,
    "memberof": "spec/TinyType.spec.ts~describe0.describe1.describe13.describe14",
    "testDepth": 4,
    "static": true,
    "longname": "spec/TinyType.spec.ts~describe0.describe1.describe13.describe14.it17",
    "access": null,
    "lineNumber": 337
  },
  {
    "__docId__": 244,
    "kind": "test",
    "name": "it18",
    "testId": 18,
    "memberof": "spec/TinyType.spec.ts~describe0.describe1.describe13.describe14",
    "testDepth": 4,
    "static": true,
    "longname": "spec/TinyType.spec.ts~describe0.describe1.describe13.describe14.it18",
    "access": null,
    "lineNumber": 349
  },
  {
    "__docId__": 245,
    "kind": "test",
    "name": "it19",
    "testId": 19,
    "memberof": "spec/TinyType.spec.ts~describe0.describe1.describe13.describe14",
    "testDepth": 4,
    "static": true,
    "longname": "spec/TinyType.spec.ts~describe0.describe1.describe13.describe14.it19",
    "access": null,
    "lineNumber": 365
  },
  {
    "__docId__": 246,
    "kind": "test",
    "name": "it20",
    "testId": 20,
    "memberof": "spec/TinyType.spec.ts~describe0.describe1.describe13.describe14",
    "testDepth": 4,
    "static": true,
    "longname": "spec/TinyType.spec.ts~describe0.describe1.describe13.describe14.it20",
    "access": null,
    "lineNumber": 385
  },
  {
    "__docId__": 247,
    "kind": "test",
    "name": "it21",
    "testId": 21,
    "memberof": "spec/TinyType.spec.ts~describe0.describe1.describe13.describe14",
    "testDepth": 4,
    "static": true,
    "longname": "spec/TinyType.spec.ts~describe0.describe1.describe13.describe14.it21",
    "access": null,
    "lineNumber": 397
  },
  {
    "__docId__": 248,
    "kind": "test",
    "name": "it22",
    "testId": 22,
    "memberof": "spec/TinyType.spec.ts~describe0.describe1.describe13.describe14",
    "testDepth": 4,
    "static": true,
    "longname": "spec/TinyType.spec.ts~describe0.describe1.describe13.describe14.it22",
    "access": null,
    "description": "should serialise a plain-old JavaScript object with nested complex types recursively",
    "lineNumber": 413
  },
  {
    "__docId__": 249,
    "kind": "test",
    "name": "it23",
    "testId": 23,
    "memberof": "spec/TinyType.spec.ts~describe0.describe1.describe13.describe14",
    "testDepth": 4,
    "static": true,
    "longname": "spec/TinyType.spec.ts~describe0.describe1.describe13.describe14.it23",
    "access": null,
    "description": "should serialise null and undefined",
    "lineNumber": 449
  },
  {
    "__docId__": 250,
    "kind": "test",
    "name": "it24",
    "testId": 24,
    "memberof": "spec/TinyType.spec.ts~describe0.describe1.describe13.describe14",
    "testDepth": 4,
    "static": true,
    "longname": "spec/TinyType.spec.ts~describe0.describe1.describe13.describe14.it24",
    "access": null,
    "lineNumber": 467
  },
  {
    "__docId__": 251,
    "kind": "test",
    "name": "describe25",
    "testId": 25,
    "memberof": "spec/TinyType.spec.ts~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "spec/TinyType.spec.ts~describe0.describe1.describe25",
    "access": null,
    "description": "de-serialisation",
    "lineNumber": 482,
    "testTargets": [
      "TinyType"
    ]
  },
  {
    "__docId__": 252,
    "kind": "test",
    "name": "it26",
    "testId": 26,
    "memberof": "spec/TinyType.spec.ts~describe0.describe1.describe25",
    "testDepth": 3,
    "static": true,
    "longname": "spec/TinyType.spec.ts~describe0.describe1.describe25.it26",
    "access": null,
    "description": "custom fromJSON can de-serialise a serialised single-value TinyType",
    "lineNumber": 593
  },
  {
    "__docId__": 253,
    "kind": "test",
    "name": "it27",
    "testId": 27,
    "memberof": "spec/TinyType.spec.ts~describe0.describe1.describe25",
    "testDepth": 3,
    "static": true,
    "longname": "spec/TinyType.spec.ts~describe0.describe1.describe25.it27",
    "access": null,
    "description": "custom fromJSON can recursively de-serialise a serialised complex TinyType",
    "lineNumber": 598
  },
  {
    "__docId__": 254,
    "kind": "testFile",
    "name": "spec/json.spec.ts",
    "content": "import 'mocha';\n\nimport { JSONArray, JSONObject, JSONPrimitive, JSONValue } from '../src/types';\n\ndescribe('JSON', () => {\n\n    const\n        Some_String = 'string',\n        Some_Number = 1,\n        Some_Boolean = false,\n        Some_Object = {k1: Some_String, k2: Some_Number},\n        Some_Array = [Some_String, Some_Number, Some_Boolean, Some_Object];\n\n    /** @test {JSONArray} */\n    describe('JSONArray', () => {\n        it(`describes an array that's a valid JSON`, () => {\n            const array_: JSONArray = Some_Array;\n        });\n    });\n\n    /** @test {JSONObject} */\n    describe('JSONObject', () => {\n        it(`describes a JavaScript object serialised to JSON`, () => {\n            const object_: JSONObject = {\n                string: Some_String,\n                number: Some_Number,\n                boolean: Some_Boolean,\n                object: Some_Object,\n                array: Some_Array,\n            };\n        });\n    });\n\n    /** @test {JSONPrimitive} */\n    describe('JSONPrimitive', () => {\n        it(`describes any primitive that can be part of JSON`, () => {\n            const string_: JSONPrimitive = 'string',\n                number_: JSONPrimitive = 42,\n                boolean_: JSONPrimitive = false,\n                null_: JSONPrimitive = null;\n        });\n    });\n\n    /** @test {JSONValue} */\n    describe('JSONValue', () => {\n        it('describes any value that can be represented as JSON', () => {\n            const\n                string_: JSONValue = Some_String,\n                number_: JSONValue = Some_Number,\n                boolean_: JSONValue = Some_Boolean,\n                object_: JSONValue = Some_Object,\n                array_: JSONValue = Some_Array;\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/spec/json.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 255,
    "kind": "test",
    "name": "describe28",
    "testId": 28,
    "memberof": "spec/json.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/json.spec.ts~describe28",
    "access": null,
    "description": "JSON",
    "lineNumber": 2
  },
  {
    "__docId__": 256,
    "kind": "test",
    "name": "describe29",
    "testId": 29,
    "memberof": "spec/json.spec.ts~describe28",
    "testDepth": 1,
    "static": true,
    "longname": "spec/json.spec.ts~describe28.describe29",
    "access": null,
    "description": "JSONArray",
    "lineNumber": 5,
    "testTargets": [
      "JSONArray"
    ]
  },
  {
    "__docId__": 257,
    "kind": "test",
    "name": "it30",
    "testId": 30,
    "memberof": "spec/json.spec.ts~describe28.describe29",
    "testDepth": 2,
    "static": true,
    "longname": "spec/json.spec.ts~describe28.describe29.it30",
    "access": null,
    "lineNumber": 6
  },
  {
    "__docId__": 258,
    "kind": "test",
    "name": "describe31",
    "testId": 31,
    "memberof": "spec/json.spec.ts~describe28",
    "testDepth": 1,
    "static": true,
    "longname": "spec/json.spec.ts~describe28.describe31",
    "access": null,
    "description": "JSONObject",
    "lineNumber": 11,
    "testTargets": [
      "JSONObject"
    ]
  },
  {
    "__docId__": 259,
    "kind": "test",
    "name": "it32",
    "testId": 32,
    "memberof": "spec/json.spec.ts~describe28.describe31",
    "testDepth": 2,
    "static": true,
    "longname": "spec/json.spec.ts~describe28.describe31.it32",
    "access": null,
    "lineNumber": 12
  },
  {
    "__docId__": 260,
    "kind": "test",
    "name": "describe33",
    "testId": 33,
    "memberof": "spec/json.spec.ts~describe28",
    "testDepth": 1,
    "static": true,
    "longname": "spec/json.spec.ts~describe28.describe33",
    "access": null,
    "description": "JSONPrimitive",
    "lineNumber": 23,
    "testTargets": [
      "JSONPrimitive"
    ]
  },
  {
    "__docId__": 261,
    "kind": "test",
    "name": "it34",
    "testId": 34,
    "memberof": "spec/json.spec.ts~describe28.describe33",
    "testDepth": 2,
    "static": true,
    "longname": "spec/json.spec.ts~describe28.describe33.it34",
    "access": null,
    "lineNumber": 24
  },
  {
    "__docId__": 262,
    "kind": "test",
    "name": "describe35",
    "testId": 35,
    "memberof": "spec/json.spec.ts~describe28",
    "testDepth": 1,
    "static": true,
    "longname": "spec/json.spec.ts~describe28.describe35",
    "access": null,
    "description": "JSONValue",
    "lineNumber": 29,
    "testTargets": [
      "JSONValue"
    ]
  },
  {
    "__docId__": 263,
    "kind": "test",
    "name": "it36",
    "testId": 36,
    "memberof": "spec/json.spec.ts~describe28.describe35",
    "testDepth": 2,
    "static": true,
    "longname": "spec/json.spec.ts~describe28.describe35.it36",
    "access": null,
    "description": "describes any value that can be represented as JSON",
    "lineNumber": 30
  },
  {
    "__docId__": 264,
    "kind": "testFile",
    "name": "spec/match.spec.ts",
    "content": "import 'mocha';\n\nimport { given } from 'mocha-testdata';\n\nimport { match, TinyType, TinyTypeOf } from '../src';\nimport { IdentityMatcher, ObjectMatcher, StringMatcher } from '../src/pattern-matching';\nimport { expect } from './expect';\n\n/** @test {match} */\ndescribe(`::match`, () => {\n\n    /** @test {match} */\n    describe('default rules', () => {\n        it(`uses the default rule when no identical match is found for a string value`, () => {\n            const result = match('four')\n                .when('five', _ => `high five`)\n                .when('six', _ => `got your six`)\n                .else(n => `got ${n}`);\n\n            expect(result).to.equal('got four');\n        });\n\n        it(`uses the default rule when no identical match is found for a numerical value`, () => {\n            const result = match(4)\n                .when(5, _ => `high five`)\n                .when(6, _ => `got your six`)\n                .else(n => `got ${n}`);\n\n            expect(result).to.equal('got 4');\n        });\n    });\n\n    describe('when selecting a matcher', () => {\n        abstract class DomainEvent {\n            constructor(public readonly timestamp: Date = new Date()) {\n            }\n        }\n\n        class ConcreteEvent extends DomainEvent {\n        }\n\n        class EmaiAddress extends TinyType {\n            constructor(public readonly value: string) {\n                super();\n            }\n        }\n\n        given([\n            { input: 5,                                     pattern: 1,                                     expected_matcher: IdentityMatcher },\n            { input: Symbol('some'),                        pattern: Symbol('other'),                       expected_matcher: IdentityMatcher },\n            { input: 'hello',                               pattern: 'hello',                               expected_matcher: StringMatcher },\n            { input: 'hello',                               pattern: /^[Hh]ello/,                           expected_matcher: StringMatcher },\n            { input: new EmaiAddress('user@domain.org'),    pattern: new EmaiAddress('user@domain.org'),    expected_matcher: ObjectMatcher },\n            { input: new ConcreteEvent(),                   pattern: ConcreteEvent,                         expected_matcher: ObjectMatcher },\n            { input: new ConcreteEvent(),                   pattern: DomainEvent,                           expected_matcher: ObjectMatcher },\n        ]).\n        it(`uses a matcher appropriate to the input`, ({input, pattern, expected_matcher}) => {\n            expect(match(input).when(pattern, _ => _)).to.be.instanceOf(expected_matcher);\n        });\n    });\n\n    /**\n     * @test {match}\n     * @test {TinyType}\n     * @test {TinyTypeOf}\n     */\n    describe('when working with TinyTypes', () => {\n\n        class AccountId extends TinyTypeOf<number>() {}\n        abstract class Command extends TinyTypeOf<AccountId>() {}\n        class OpenAccount extends Command {}\n        class CloseAccount extends Command {}\n        class SuspendAccount extends Command {}\n\n        given([\n            { command: new OpenAccount(new AccountId(42)),      expected: 'Open AccountId(value=42)'                            },\n            { command: new CloseAccount(new AccountId(42)),     expected: 'Close AccountId(value=42)'                           },\n            { command: new SuspendAccount(new AccountId(42)),   expected: 'Command: SuspendAccount(value=AccountId(value=42))'  },\n            { command: null,                                    expected: 'Unrecognised input: null'                            },\n        ]).\n        it('matches a TinyType by type', ({ command, expected }) => {\n            const result = match(command)\n                .when(OpenAccount,  ({ value }) => `Open ${ value }`)\n                .when(CloseAccount, ({ value }) => `Close ${ value }`)\n                .when(Command,      _ => `Command: ${ _ }`)\n                .else(_ => `Unrecognised input: ${_}`);\n\n            expect(result).to.equal(expected);\n        });\n\n        given([\n            { command: new OpenAccount(new AccountId(42)),      expected: 'Open AccountId(value=42)'                            },\n            { command: new CloseAccount(new AccountId(42)),     expected: 'Close AccountId(value=42)'                           },\n            { command: new SuspendAccount(new AccountId(42)),   expected: 'Command: SuspendAccount(value=AccountId(value=42))'  },\n            { command: null,                                    expected: 'Unrecognised input: null'                            },\n        ]).\n        it('matches a TinyType by value', ({ command, expected }) => {\n            const result = match(command)\n                .when(new OpenAccount(new AccountId(42)),   ({ value }) => `Open ${ value }`)\n                .when(new CloseAccount(new AccountId(42)),  ({ value }) => `Close ${ value }`)\n                .when(new SuspendAccount(new AccountId(42)), _ => `Command: ${ _ }`)\n                .else(_ => `Unrecognised input: ${_}`);\n\n            expect(result).to.equal(expected);\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/spec/match.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 265,
    "kind": "test",
    "name": "describe37",
    "testId": 37,
    "memberof": "spec/match.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/match.spec.ts~describe37",
    "access": null,
    "lineNumber": 7,
    "testTargets": [
      "match"
    ]
  },
  {
    "__docId__": 266,
    "kind": "test",
    "name": "describe38",
    "testId": 38,
    "memberof": "spec/match.spec.ts~describe37",
    "testDepth": 1,
    "static": true,
    "longname": "spec/match.spec.ts~describe37.describe38",
    "access": null,
    "description": "default rules",
    "lineNumber": 9,
    "testTargets": [
      "match"
    ]
  },
  {
    "__docId__": 267,
    "kind": "test",
    "name": "it39",
    "testId": 39,
    "memberof": "spec/match.spec.ts~describe37.describe38",
    "testDepth": 2,
    "static": true,
    "longname": "spec/match.spec.ts~describe37.describe38.it39",
    "access": null,
    "lineNumber": 10
  },
  {
    "__docId__": 268,
    "kind": "test",
    "name": "it40",
    "testId": 40,
    "memberof": "spec/match.spec.ts~describe37.describe38",
    "testDepth": 2,
    "static": true,
    "longname": "spec/match.spec.ts~describe37.describe38.it40",
    "access": null,
    "lineNumber": 17
  },
  {
    "__docId__": 269,
    "kind": "test",
    "name": "describe41",
    "testId": 41,
    "memberof": "spec/match.spec.ts~describe37",
    "testDepth": 1,
    "static": true,
    "longname": "spec/match.spec.ts~describe37.describe41",
    "access": null,
    "description": "when selecting a matcher",
    "lineNumber": 25
  },
  {
    "__docId__": 270,
    "kind": "test",
    "name": "describe42",
    "testId": 42,
    "memberof": "spec/match.spec.ts~describe37",
    "testDepth": 1,
    "static": true,
    "longname": "spec/match.spec.ts~describe37.describe42",
    "access": null,
    "description": "when working with TinyTypes",
    "lineNumber": 75,
    "testTargets": [
      "match",
      "TinyType",
      "TinyTypeOf"
    ]
  },
  {
    "__docId__": 271,
    "kind": "testFile",
    "name": "spec/objects/deprecated.spec.ts",
    "content": "import 'mocha';\n\nimport * as sinon from 'sinon';\n\nimport { deprecated } from '../../src/objects';\nimport { expect } from '../expect';\n\n/** @test {deprecated} */\ndescribe('deprecated', () => {\n\n    describe('when used to annotate a class', () => {\n        it('logs a warning when the class is constructed', () => {\n            const consoleWarn = sinon.spy();\n\n            @deprecated(undefined, consoleWarn)\n            class Foo {\n            }\n\n            const foo_ = new Foo();\n\n            expect(consoleWarn)\n                .to.have.been.calledWith('Foo has been deprecated.');\n        });\n\n        it('can provide additional suggestion on what other class should be used instead', () => {\n            const consoleWarn = sinon.spy();\n\n            @deprecated('Please use Bar instead.', consoleWarn)\n            class Foo {\n            }\n\n            const foo_ = new Foo();\n\n            expect(consoleWarn)\n                .to.have.been.calledWith('Foo has been deprecated. Please use Bar instead.');\n        });\n\n        it('maintains the type and behaviour of the annotated class', () => {\n            const consoleWarn = sinon.spy();\n\n            @deprecated('Please use Client instead.', consoleWarn)\n            class Person {\n                constructor(public readonly name: string) {\n                }\n            }\n\n            const p = new Person('Alice');\n\n            expect(consoleWarn)\n                .to.have.been.calledWith('Person has been deprecated. Please use Client instead.');\n\n            expect(p).to.be.instanceOf(Person);\n        });\n    });\n\n    describe('when used to annotate a method', () => {\n\n        it('logs a warning when the method is used', () => {\n            const consoleWarn = sinon.spy();\n\n            class Person {\n                @deprecated('', consoleWarn)\n                greet()   { return null; }\n                welcome() { return null; }\n            }\n\n            const p = new Person();\n            p.greet();\n\n            expect(consoleWarn)\n                .to.have.been.calledWith('Person#greet has been deprecated.');\n        });\n\n        it('can provide additional suggestion on what other method should be used instead', () => {\n            const consoleWarn = sinon.spy();\n\n            class Person {\n\n                @deprecated('Please use Person#welcome instead.', consoleWarn)\n                greet()   { return null; }\n                welcome() { return null; }\n            }\n\n            const p = new Person();\n            p.greet();\n\n            expect(consoleWarn)\n                .to.have.been.calledWith('Person#greet has been deprecated. Please use Person#welcome instead.');\n        });\n\n        it('maintains the behaviour of the annotated method', () => {\n            const consoleWarn = sinon.spy();\n\n            class Person {\n                constructor(public readonly name: string) {\n                }\n\n                @deprecated('Please use Person#welcome instead.', consoleWarn)\n                greet(greeting: string) {\n                    return `${ greeting }, my name is ${this.name}`;\n                }\n            }\n\n            const p = new Person('Alice');\n\n            expect(p.greet('Hi')).to.equal('Hi, my name is Alice');\n\n            expect(consoleWarn)\n                .to.have.been.calledWith('Person#greet has been deprecated. Please use Person#welcome instead.');\n        });\n    });\n\n    describe('when used incorrectly', () => {\n\n        it('complains', () => {\n            expect(() => deprecated('something that does not make sense')(42))\n                .to.throw(`Only a class, method or function can be marked as deprecated. number given.`);\n        });\n    })\n});\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/spec/objects/deprecated.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 272,
    "kind": "test",
    "name": "describe43",
    "testId": 43,
    "memberof": "spec/objects/deprecated.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/objects/deprecated.spec.ts~describe43",
    "access": null,
    "description": "deprecated",
    "lineNumber": 12,
    "testTargets": [
      "deprecated"
    ]
  },
  {
    "__docId__": 273,
    "kind": "test",
    "name": "describe44",
    "testId": 44,
    "memberof": "spec/objects/deprecated.spec.ts~describe43",
    "testDepth": 1,
    "static": true,
    "longname": "spec/objects/deprecated.spec.ts~describe43.describe44",
    "access": null,
    "description": "when used to annotate a class",
    "lineNumber": 13
  },
  {
    "__docId__": 274,
    "kind": "test",
    "name": "it45",
    "testId": 45,
    "memberof": "spec/objects/deprecated.spec.ts~describe43.describe44",
    "testDepth": 2,
    "static": true,
    "longname": "spec/objects/deprecated.spec.ts~describe43.describe44.it45",
    "access": null,
    "description": "logs a warning when the class is constructed",
    "lineNumber": 14
  },
  {
    "__docId__": 275,
    "kind": "test",
    "name": "it46",
    "testId": 46,
    "memberof": "spec/objects/deprecated.spec.ts~describe43.describe44",
    "testDepth": 2,
    "static": true,
    "longname": "spec/objects/deprecated.spec.ts~describe43.describe44.it46",
    "access": null,
    "description": "can provide additional suggestion on what other class should be used instead",
    "lineNumber": 31
  },
  {
    "__docId__": 276,
    "kind": "test",
    "name": "it47",
    "testId": 47,
    "memberof": "spec/objects/deprecated.spec.ts~describe43.describe44",
    "testDepth": 2,
    "static": true,
    "longname": "spec/objects/deprecated.spec.ts~describe43.describe44.it47",
    "access": null,
    "description": "maintains the type and behaviour of the annotated class",
    "lineNumber": 48
  },
  {
    "__docId__": 277,
    "kind": "test",
    "name": "describe48",
    "testId": 48,
    "memberof": "spec/objects/deprecated.spec.ts~describe43",
    "testDepth": 1,
    "static": true,
    "longname": "spec/objects/deprecated.spec.ts~describe43.describe48",
    "access": null,
    "description": "when used to annotate a method",
    "lineNumber": 70
  },
  {
    "__docId__": 278,
    "kind": "test",
    "name": "it49",
    "testId": 49,
    "memberof": "spec/objects/deprecated.spec.ts~describe43.describe48",
    "testDepth": 2,
    "static": true,
    "longname": "spec/objects/deprecated.spec.ts~describe43.describe48.it49",
    "access": null,
    "description": "logs a warning when the method is used",
    "lineNumber": 71
  },
  {
    "__docId__": 279,
    "kind": "test",
    "name": "it50",
    "testId": 50,
    "memberof": "spec/objects/deprecated.spec.ts~describe43.describe48",
    "testDepth": 2,
    "static": true,
    "longname": "spec/objects/deprecated.spec.ts~describe43.describe48.it50",
    "access": null,
    "description": "can provide additional suggestion on what other method should be used instead",
    "lineNumber": 103
  },
  {
    "__docId__": 280,
    "kind": "test",
    "name": "it51",
    "testId": 51,
    "memberof": "spec/objects/deprecated.spec.ts~describe43.describe48",
    "testDepth": 2,
    "static": true,
    "longname": "spec/objects/deprecated.spec.ts~describe43.describe48.it51",
    "access": null,
    "description": "maintains the behaviour of the annotated method",
    "lineNumber": 135
  },
  {
    "__docId__": 281,
    "kind": "test",
    "name": "describe52",
    "testId": 52,
    "memberof": "spec/objects/deprecated.spec.ts~describe43",
    "testDepth": 1,
    "static": true,
    "longname": "spec/objects/deprecated.spec.ts~describe43.describe52",
    "access": null,
    "description": "when used incorrectly",
    "lineNumber": 168
  },
  {
    "__docId__": 282,
    "kind": "test",
    "name": "it53",
    "testId": 53,
    "memberof": "spec/objects/deprecated.spec.ts~describe43.describe52",
    "testDepth": 2,
    "static": true,
    "longname": "spec/objects/deprecated.spec.ts~describe43.describe52.it53",
    "access": null,
    "description": "complains",
    "lineNumber": 169
  },
  {
    "__docId__": 283,
    "kind": "testFile",
    "name": "spec/objects/equal.spec.ts",
    "content": "import 'mocha';\n\nimport { given } from 'mocha-testdata';\n\nimport { TinyType, TinyTypeOf } from '../../src';\nimport { equal } from '../../src/objects';\nimport { expect } from '../expect';\n\n/** @test {equal} */\ndescribe('equal', () => {\n    describe('when used with primitives', () => {\n\n        given<any>(undefined, null, false, 'string', 42).\n        it('is reflexive', (primitive: any) => {\n            expect(equal(primitive, primitive)).to.be.true;                  // tslint:disable-line:no-unused-expression\n        });\n\n        given<{ v1: any, v2: any }>(\n            { v1: false,    v2: false             },\n            { v1: false,    v2: Boolean(false)    },\n            { v1: 'string', v2: 'string'          },\n            { v1: 'string', v2: String('string')  },\n            { v1: 42,       v2: 42                },\n            { v1: 42,       v2: Number(42)        },\n            { v1: 42,       v2: 42              },\n            { v1: 42,       v2: Number(42)      },\n        ).\n        it('is symmetric', ({ v1, v2 }) => {\n            expect(equal(v1, v2)).to.be.true;                                // tslint:disable-line:no-unused-expression\n            expect(equal(v1, v2)).to.equal(equal(v2, v1));\n        });\n\n        given<{ v1: any, v2: any, v3: any }>(\n            { v1: false,    v2: false,    v3: false     },\n            { v1: 'string', v2: 'string', v3: 'string'  },\n            { v1: 42,       v2: 42,       v3: 42        },\n        ).\n        it('is transitive', ({ v1, v2, v3 }) => {\n            expect(equal(v1, v2)).to.be.true;                               // tslint:disable-line:no-unused-expression\n            expect(equal(v2, v3)).to.be.true;                               // tslint:disable-line:no-unused-expression\n            expect(equal(v3, v1)).to.be.true;                               // tslint:disable-line:no-unused-expression\n        });\n\n        given<{ v1: any, v2: any }>(\n            { v1: false,    v2: true       },\n            { v1: 'apple',  v2: 'orange'   },\n            { v1: 42,       v2: 24         },\n            { v1: false,    v2: 'elephant' },\n            { v1: null,     v2: undefined  },\n        ).\n        it('returns false when subjects are not equal', ({ v1, v2 }) => {\n            expect(equal(v1, v2)).to.be.false;                               // tslint:disable-line:no-unused-expression\n        });\n    });\n\n    /** @test {TinyType#equals} */\n    describe('when used with TinyTypes', () => {\n\n        class Name extends TinyTypeOf<string>() {}\n        class Age  extends TinyTypeOf<number>() {}\n\n        class Person extends TinyType {\n            constructor(public readonly name: Name, public readonly role: Age) {\n                super();\n            }\n        }\n\n        // Please note that there's not much point in wrapping an array into a tiny type, as it doesn't provide\n        // methods you'd expect from a list, such as map, reduce, forEach, etc.\n        // What People is here to demonstrate is that `equals` works equally well (pun intended)\n        // with tiny types with a member field of type Array.\n        class People extends TinyTypeOf<Person[]>() {}\n\n        const\n            Alice   = new Name('Alice'),\n            Bob     = new Name('Bob'),\n            MsAlice = new Person(Alice, new Age(28)),\n            MrBob   = new Person(Alice, new Age(38)),\n            Team    = new People([MsAlice, MrBob]),\n            Team2   = new People([MsAlice]);\n\n        given<TinyType>(Alice, MsAlice, Team).\n        it('is reflexive', (value: TinyType) => {\n            expect(equal(value, value)).to.be.true;                          // tslint:disable-line:no-unused-expression\n        });\n\n        given<{ v1: TinyType, v2: TinyType }>(\n            { v1: new Name('Alice'),    v2: new Name('Alice')   },\n            { v1: new Age(28),          v2: new Age(28)         },\n            { v1: Team,                 v2: Team                },\n            { v1: new Person(Alice, new Age(28)), v2: new Person(Alice, new Age(28))  },\n        ).\n        it('is symmetric', ({ v1, v2 }) => {\n            expect(equal(v1, v2)).to.be.true;                                // tslint:disable-line:no-unused-expression\n            expect(equal(v1, v2)).to.equal(equal(v2, v1));\n        });\n\n        given<{ v1: TinyType, v2: TinyType, v3: TinyType }>(\n            { v1: new Name('Alice'),    v2: new Name('Alice'),  v3: new Name('Alice') },\n            { v1: new Age(28),          v2: new Age(28),        v3: new Age(28)       },\n            { v1: new Person(Alice, new Age(28)), v2: new Person(Alice, new Age(28)), v3: new Person(Alice, new Age(28)) },\n        ).\n        it('is transitive', ({ v1, v2, v3 }) => {\n            expect(equal(v1, v2)).to.be.true;                                // tslint:disable-line:no-unused-expression\n            expect(equal(v2, v3)).to.be.true;                                // tslint:disable-line:no-unused-expression\n            expect(equal(v3, v1)).to.be.true;                                // tslint:disable-line:no-unused-expression\n        });\n\n        given<{ v1: any, v2: any }>(\n            { v1: Alice,    v2: null    },\n            { v1: Alice,    v2: Bob     },\n            { v1: Bob,      v2: 'cat'   },\n            { v1: Alice,    v2: MsAlice },\n            { v1: MsAlice,  v2: MrBob   },\n            { v1: MrBob,    v2: Team    },\n            { v1: Team,     v2: Team2   },\n        ).\n        it('returns false when subjects are not equal', ({ v1, v2 }) => {\n            expect(equal(v1, v2)).to.be.false;                               // tslint:disable-line:no-unused-expression\n        });\n\n        it('compares public and private member fields', () => {\n            class PrivatePerson extends TinyType {\n                constructor(private readonly name: Name, private readonly age: Age) {\n                    super();\n                }\n            }\n\n            const\n                PrivateAlice = new PrivatePerson(new Name('Alice'), new Age(28)),\n                PrivateRyan  = new PrivatePerson(new Name('Ryan'), new Age(28));\n\n            expect(PrivateAlice.equals(PrivateAlice)).to.be.true;            // tslint:disable-line:no-unused-expression\n            expect(PrivateAlice.equals(PrivateRyan)).to.be.false;            // tslint:disable-line:no-unused-expression\n        });\n    });\n\n    /** @test {TinyType#equals} */\n    describe('when used with TinyTypes with optional fields', () => {\n\n        class FirstName extends TinyTypeOf<string>() {}\n        class LastName extends TinyTypeOf<string>() {}\n\n        class Magician extends TinyType {\n            constructor(\n                public readonly firstName: FirstName,\n                public readonly lastName?: LastName,\n            ) {\n                super();\n            }\n        }\n\n        it('returns true when the non-optional fields are equal', () => {\n            const\n                t1 = new Magician(new FirstName('Teller')),\n                t2 = new Magician(new FirstName('Teller'));\n\n            expect(equal(t1, t2)).to.equal(true);\n        });\n    });\n\n    /** @test {TinyType#equals} */\n    describe('when used with Dates', () => {\n        const\n            dateInstance1 = new Date('2018-05-01T12:00:00.000Z'),\n            dateInstance2 = new Date('2018-05-01T12:00:00.000Z'),\n            dateInstance3 = new Date('2018-05-01T12:00:00.000Z'),\n            differentDate = new Date('2042-05-01T12:15:30.000Z');\n\n        it('is reflexive', () => {\n            expect(equal(dateInstance1, dateInstance1)).to.be.true;          // tslint:disable-line:no-unused-expression\n        });\n\n        it('is symmetric', () => {\n            expect(equal(dateInstance1, dateInstance2)).to.be.true;          // tslint:disable-line:no-unused-expression\n            expect(equal(dateInstance2, dateInstance1)).to.equal(equal(dateInstance1, dateInstance2));\n        });\n\n        it('is transitive', () => {\n            expect(equal(dateInstance1, dateInstance2)).to.be.true;          // tslint:disable-line:no-unused-expression\n            expect(equal(dateInstance2, dateInstance3)).to.be.true;          // tslint:disable-line:no-unused-expression\n            expect(equal(dateInstance3, dateInstance1)).to.be.true;          // tslint:disable-line:no-unused-expression\n        });\n\n        it('returns false when subjects are not equal', () => {\n            expect(equal(dateInstance1, differentDate)).to.be.false;         // tslint:disable-line:no-unused-expression\n        });\n    });\n\n    /** @test {TinyType#equals} */\n    describe('when used with Arrays', () => {\n        class Name extends TinyTypeOf<string>() {}\n\n        it('returns false when arrays are of different length', () => {\n            expect(equal(\n                [ new Name('Alice'), new Name('Bob') ],\n                [ new Name('Alice'), new Name('Bob'), new Name('Cyril') ],\n            )).to.equal(false);\n        });\n\n        it('returns false when arrays contain different items', () => {\n            expect(equal(\n                [ new Name('Alice'), new Name('Bob'), new Name('Cyril')],\n                [ new Name('Alice'), new Name('Bob'), new Name('Cynthia') ],\n            )).to.equal(false);\n        });\n\n        it('returns true when both arrays contain equal items', () => {\n            expect(equal(\n                [ new Name('Alice'), new Name('Bob'), new Name('Cynthia') ],\n                [ new Name('Alice'), new Name('Bob'), new Name('Cynthia') ],\n            )).to.equal(true);\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/spec/objects/equal.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 284,
    "kind": "test",
    "name": "describe54",
    "testId": 54,
    "memberof": "spec/objects/equal.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/objects/equal.spec.ts~describe54",
    "access": null,
    "description": "equal",
    "lineNumber": 7,
    "testTargets": [
      "equal"
    ]
  },
  {
    "__docId__": 285,
    "kind": "test",
    "name": "describe55",
    "testId": 55,
    "memberof": "spec/objects/equal.spec.ts~describe54",
    "testDepth": 1,
    "static": true,
    "longname": "spec/objects/equal.spec.ts~describe54.describe55",
    "access": null,
    "description": "when used with primitives",
    "lineNumber": 8
  },
  {
    "__docId__": 286,
    "kind": "test",
    "name": "describe56",
    "testId": 56,
    "memberof": "spec/objects/equal.spec.ts~describe54",
    "testDepth": 1,
    "static": true,
    "longname": "spec/objects/equal.spec.ts~describe54.describe56",
    "access": null,
    "description": "when used with TinyTypes",
    "lineNumber": 30,
    "testTargets": [
      "TinyType#equals"
    ]
  },
  {
    "__docId__": 287,
    "kind": "test",
    "name": "it57",
    "testId": 57,
    "memberof": "spec/objects/equal.spec.ts~describe54.describe56",
    "testDepth": 2,
    "static": true,
    "longname": "spec/objects/equal.spec.ts~describe54.describe56.it57",
    "access": null,
    "description": "compares public and private member fields",
    "lineNumber": 92
  },
  {
    "__docId__": 288,
    "kind": "test",
    "name": "describe58",
    "testId": 58,
    "memberof": "spec/objects/equal.spec.ts~describe54",
    "testDepth": 1,
    "static": true,
    "longname": "spec/objects/equal.spec.ts~describe54.describe58",
    "access": null,
    "description": "when used with TinyTypes with optional fields",
    "lineNumber": 112,
    "testTargets": [
      "TinyType#equals"
    ]
  },
  {
    "__docId__": 289,
    "kind": "test",
    "name": "it59",
    "testId": 59,
    "memberof": "spec/objects/equal.spec.ts~describe54.describe58",
    "testDepth": 2,
    "static": true,
    "longname": "spec/objects/equal.spec.ts~describe54.describe58.it59",
    "access": null,
    "description": "returns true when the non-optional fields are equal",
    "lineNumber": 142
  },
  {
    "__docId__": 290,
    "kind": "test",
    "name": "describe60",
    "testId": 60,
    "memberof": "spec/objects/equal.spec.ts~describe54",
    "testDepth": 1,
    "static": true,
    "longname": "spec/objects/equal.spec.ts~describe54.describe60",
    "access": null,
    "description": "when used with Dates",
    "lineNumber": 148,
    "testTargets": [
      "TinyType#equals"
    ]
  },
  {
    "__docId__": 291,
    "kind": "test",
    "name": "it61",
    "testId": 61,
    "memberof": "spec/objects/equal.spec.ts~describe54.describe60",
    "testDepth": 2,
    "static": true,
    "longname": "spec/objects/equal.spec.ts~describe54.describe60.it61",
    "access": null,
    "description": "is reflexive",
    "lineNumber": 150
  },
  {
    "__docId__": 292,
    "kind": "test",
    "name": "it62",
    "testId": 62,
    "memberof": "spec/objects/equal.spec.ts~describe54.describe60",
    "testDepth": 2,
    "static": true,
    "longname": "spec/objects/equal.spec.ts~describe54.describe60.it62",
    "access": null,
    "description": "is symmetric",
    "lineNumber": 153
  },
  {
    "__docId__": 293,
    "kind": "test",
    "name": "it63",
    "testId": 63,
    "memberof": "spec/objects/equal.spec.ts~describe54.describe60",
    "testDepth": 2,
    "static": true,
    "longname": "spec/objects/equal.spec.ts~describe54.describe60.it63",
    "access": null,
    "description": "is transitive",
    "lineNumber": 157
  },
  {
    "__docId__": 294,
    "kind": "test",
    "name": "it64",
    "testId": 64,
    "memberof": "spec/objects/equal.spec.ts~describe54.describe60",
    "testDepth": 2,
    "static": true,
    "longname": "spec/objects/equal.spec.ts~describe54.describe60.it64",
    "access": null,
    "description": "returns false when subjects are not equal",
    "lineNumber": 162
  },
  {
    "__docId__": 295,
    "kind": "test",
    "name": "describe65",
    "testId": 65,
    "memberof": "spec/objects/equal.spec.ts~describe54",
    "testDepth": 1,
    "static": true,
    "longname": "spec/objects/equal.spec.ts~describe54.describe65",
    "access": null,
    "description": "when used with Arrays",
    "lineNumber": 167,
    "testTargets": [
      "TinyType#equals"
    ]
  },
  {
    "__docId__": 296,
    "kind": "test",
    "name": "it66",
    "testId": 66,
    "memberof": "spec/objects/equal.spec.ts~describe54.describe65",
    "testDepth": 2,
    "static": true,
    "longname": "spec/objects/equal.spec.ts~describe54.describe65.it66",
    "access": null,
    "description": "returns false when arrays are of different length",
    "lineNumber": 176
  },
  {
    "__docId__": 297,
    "kind": "test",
    "name": "it67",
    "testId": 67,
    "memberof": "spec/objects/equal.spec.ts~describe54.describe65",
    "testDepth": 2,
    "static": true,
    "longname": "spec/objects/equal.spec.ts~describe54.describe65.it67",
    "access": null,
    "description": "returns false when arrays contain different items",
    "lineNumber": 179
  },
  {
    "__docId__": 298,
    "kind": "test",
    "name": "it68",
    "testId": 68,
    "memberof": "spec/objects/equal.spec.ts~describe54.describe65",
    "testDepth": 2,
    "static": true,
    "longname": "spec/objects/equal.spec.ts~describe54.describe65.it68",
    "access": null,
    "description": "returns true when both arrays contain equal items",
    "lineNumber": 182
  },
  {
    "__docId__": 299,
    "kind": "testFile",
    "name": "spec/objects/significantFields.spec.ts",
    "content": "import 'mocha';\n\nimport { significantFieldsOf } from '../../src/objects';\nimport { expect } from '../expect';\n\n/** @test {significantFields} */\ndescribe('significantFields', () => {\n    it('returns the names of private and public member fields of an instantiated object', () => {\n        class Person {\n            private age = 42;\n            constructor(public readonly firstName: string, private readonly lastName: string) {}\n            toString() {\n                return `${this.firstName} ${this.lastName} ${this.age}`;\n            }\n        }\n\n        const p = new Person('John', 'Smith');\n\n        expect(significantFieldsOf(p)).contain.members(['firstName', 'lastName', 'age']);\n    });\n\n    it(`returns the names of object's fields`, () => {\n        const p = {\n            firstName: 'John',\n            lastName: 'Smith',\n            age: 42,\n            toString: () => `some string`,\n        };\n\n        expect(significantFieldsOf(p)).contain.members(['firstName', 'lastName', 'age']);\n    });\n\n    it(`returns the keys of an array`, () => {\n        const list = [ 'a', 'b', 'c' ];\n\n        expect(significantFieldsOf(list)).contain.members([ '0', '1', '2', 'length' ]);\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/spec/objects/significantFields.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 300,
    "kind": "test",
    "name": "describe69",
    "testId": 69,
    "memberof": "spec/objects/significantFields.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/objects/significantFields.spec.ts~describe69",
    "access": null,
    "description": "significantFields",
    "lineNumber": 5,
    "testTargets": [
      "significantFields"
    ]
  },
  {
    "__docId__": 301,
    "kind": "test",
    "name": "it70",
    "testId": 70,
    "memberof": "spec/objects/significantFields.spec.ts~describe69",
    "testDepth": 1,
    "static": true,
    "longname": "spec/objects/significantFields.spec.ts~describe69.it70",
    "access": null,
    "description": "returns the names of private and public member fields of an instantiated object",
    "lineNumber": 6
  },
  {
    "__docId__": 302,
    "kind": "test",
    "name": "it71",
    "testId": 71,
    "memberof": "spec/objects/significantFields.spec.ts~describe69",
    "testDepth": 1,
    "static": true,
    "longname": "spec/objects/significantFields.spec.ts~describe69.it71",
    "access": null,
    "lineNumber": 38
  },
  {
    "__docId__": 303,
    "kind": "test",
    "name": "it72",
    "testId": 72,
    "memberof": "spec/objects/significantFields.spec.ts~describe69",
    "testDepth": 1,
    "static": true,
    "longname": "spec/objects/significantFields.spec.ts~describe69.it72",
    "access": null,
    "lineNumber": 47
  },
  {
    "__docId__": 304,
    "kind": "testFile",
    "name": "spec/pattern-matching/IdentityMatcher.spec.ts",
    "content": "import 'mocha';\n\nimport { given } from 'mocha-testdata';\n\nimport { IdentityMatcher } from '../../src/pattern-matching';\nimport { expect } from '../expect';\n\ndescribe('pattern-matching', () => {\n    describe('IdentityMatcher', () => {\n\n        given(\n            [true, 'received \"true\"'],\n            [false, 'received \"false\"'],\n        ).it('matches a boolean', (input: boolean, expected_result: string) => {\n\n            const result = new IdentityMatcher(input)\n                .when(true, _ => `received \"true\"`)\n                .else(_ => `received \"false\"`);\n\n            expect(result).to.equal(expected_result);\n        });\n\n        given(\n            [-1, 'received \"-1\"'],\n            [0.1, 'received \"0.1\"'],\n            [5, 'else, received \"5\"'],\n            // [NaN, 'received \"NaN\"'],\n            [Number.POSITIVE_INFINITY, 'to infinity and beyond!'],\n        ).it('matches a number', (input: number, expected_result: string) => {\n\n            const result = new IdentityMatcher(input)\n                .when(-1, _ => `received \"-1\"`)\n                .when(0.1, _ => `received \"0.1\"`)\n                .when(Number.POSITIVE_INFINITY, _ => `to infinity and beyond!`)\n                .else(_ => `else, received \"${_}\"`);\n\n            expect(result).to.equal(expected_result);\n        });\n\n        it('matches a symbol', () => {\n            const s = Symbol('some symbol');\n\n            const result = new IdentityMatcher(s)\n                .when(s, _ => `received \"some symbol\"`)\n                .else(_ => `else, received \"${_.toString()}\"`);\n\n            expect(result).to.equal('received \"some symbol\"');\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/spec/pattern-matching/IdentityMatcher.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 305,
    "kind": "test",
    "name": "describe73",
    "testId": 73,
    "memberof": "spec/pattern-matching/IdentityMatcher.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/pattern-matching/IdentityMatcher.spec.ts~describe73",
    "access": null,
    "description": "pattern-matching",
    "lineNumber": 5
  },
  {
    "__docId__": 306,
    "kind": "test",
    "name": "describe74",
    "testId": 74,
    "memberof": "spec/pattern-matching/IdentityMatcher.spec.ts~describe73",
    "testDepth": 1,
    "static": true,
    "longname": "spec/pattern-matching/IdentityMatcher.spec.ts~describe73.describe74",
    "access": null,
    "description": "IdentityMatcher",
    "lineNumber": 6
  },
  {
    "__docId__": 307,
    "kind": "test",
    "name": "it75",
    "testId": 75,
    "memberof": "spec/pattern-matching/IdentityMatcher.spec.ts~describe73.describe74",
    "testDepth": 2,
    "static": true,
    "longname": "spec/pattern-matching/IdentityMatcher.spec.ts~describe73.describe74.it75",
    "access": null,
    "description": "matches a symbol",
    "lineNumber": 23
  },
  {
    "__docId__": 308,
    "kind": "testFile",
    "name": "spec/pattern-matching/ObjectMatcher.spec.ts",
    "content": "import 'mocha';\n\nimport { given } from 'mocha-testdata';\n\nimport { TinyType } from '../../src';\nimport { ObjectMatcher } from '../../src/pattern-matching';\nimport { expect } from '../expect';\n\ndescribe('pattern-matching', () => {\n    describe('ObjectMatcher', () => {\n\n        describe('when working with Tiny Types', () => {\n\n            class Name extends TinyType {\n                constructor(public readonly value: string) {\n                    super();\n                }\n            }\n\n            class EmailAddress extends TinyType {\n                constructor(public readonly value: string) {\n                    super();\n                }\n            }\n\n            given(\n                [new Name('Jan'), `matched \"Jan\"`],\n                [new Name('John'), `matched \"John\"`],\n                [new Name('Sara'), `else, received \"Name(value=Sara)\"`],\n            ).it('matches equal objects', (input: Name, expectedMessage: string) => {\n                const result = new ObjectMatcher<TinyType, string>(input)\n                    .when(new Name('Jan'), _ => `matched \"Jan\"`)\n                    .when(new Name('John'), _ => `matched \"John\"`)\n                    .else(_ => `else, received \"${_}\"`);\n\n                expect(result).to.equal(expectedMessage);\n            });\n\n            it('matches identical objects', () => {\n                const input = {field: 'value'};\n\n                const result = new ObjectMatcher(input)\n                    .when(input, _ => `matched by identity`)\n                    .else(_ => `else, received \"${_}\"`);\n\n                expect(result).to.equal(`matched by identity`);\n            });\n\n            given(\n                [new Name('Jan'), `matched by equality`],\n                [new Name('John'), `matched by type`],\n                [new EmailAddress('jan@example.com'), `else, received \"EmailAddress(value=jan@example.com)\"`],\n            ).it('can be mixed', (input: Name, expectedMessage: string) => {\n                const result = new ObjectMatcher<TinyType, string>(input)\n                    .when(new Name('Jan'), _ => `matched by equality`)\n                    .when(Name, _ => `matched by type`)\n                    .else(_ => `else, received \"${_}\"`);\n\n                expect(result).to.equal(expectedMessage);\n            });\n        });\n\n        describe('when working with regular classes', () => {\n            abstract class DomainEvent {\n                constructor(public readonly timestamp: Date) {\n                }\n            }\n\n            class AccountCreated extends DomainEvent {\n                constructor(public readonly account_name: string, timestamp: Date) {\n                    super(timestamp);\n                }\n            }\n\n            class AccountConfirmed extends DomainEvent {\n                constructor(public readonly account_name: string,\n                    public readonly email: string,\n                    timestamp: Date,) {\n                    super(timestamp);\n                }\n            }\n\n            class UnclassifiedEvent extends DomainEvent {\n            }\n\n            given(\n                [\n                    new AccountCreated('jan-molak', new Date()),\n                    `AccountCreated`,\n                ],\n                [\n                    new AccountConfirmed('jan-molak', 'jan.molak@serenity.io', new Date()),\n                    `AccountConfirmed`,\n                ],\n                [\n                    new UnclassifiedEvent(new Date()),\n                    `UnclassifiedEvent`,\n                ],\n            ).it('matches object by constructor function', (input: DomainEvent, expected_result: string) => {\n\n                const result = new ObjectMatcher<DomainEvent, string>(input)\n                    .when(AccountCreated, _ => `AccountCreated`)\n                    .when(AccountConfirmed, _ => `AccountConfirmed`)\n                    .when(DomainEvent, _ => `UnclassifiedEvent`)\n                    .else(_ => `else, received \"${_}\"`);\n\n                expect(result).to.equal(expected_result);\n            });\n\n            // todo: mixed constructor/tiny?\n\n            given(\n                [\n                    new AccountCreated('jan-molak', new Date()),\n                    `Account created for jan-molak`,\n                ],\n                [\n                    new AccountConfirmed('jan-molak', 'jan.molak@serenity.io', new Date()),\n                    `Account confirmed for jan-molak at jan.molak@serenity.io`,\n                ],\n                [\n                    new UnclassifiedEvent(new Date()),\n                    `Some DomainEvent received`,\n                ],\n            ).it('matches object by constructor function', (input: DomainEvent, expected_result: string) => {\n\n                const result = new ObjectMatcher<DomainEvent, string>(input)\n                    .when(AccountCreated, ({account_name}: AccountCreated) => `Account created for ${ account_name }`)\n                    .when(AccountConfirmed, ({account_name, email}: AccountConfirmed) => `Account confirmed for ${ account_name } at ${ email }`)\n                    .when(DomainEvent, ({timestamp}: DomainEvent) => `Some DomainEvent received`)\n                    .else(_ => `else, received \"${_}\"`);\n\n                expect(result).to.equal(expected_result);\n            });\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/spec/pattern-matching/ObjectMatcher.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 309,
    "kind": "test",
    "name": "describe76",
    "testId": 76,
    "memberof": "spec/pattern-matching/ObjectMatcher.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/pattern-matching/ObjectMatcher.spec.ts~describe76",
    "access": null,
    "description": "pattern-matching",
    "lineNumber": 6
  },
  {
    "__docId__": 310,
    "kind": "test",
    "name": "describe77",
    "testId": 77,
    "memberof": "spec/pattern-matching/ObjectMatcher.spec.ts~describe76",
    "testDepth": 1,
    "static": true,
    "longname": "spec/pattern-matching/ObjectMatcher.spec.ts~describe76.describe77",
    "access": null,
    "description": "ObjectMatcher",
    "lineNumber": 7
  },
  {
    "__docId__": 311,
    "kind": "test",
    "name": "describe78",
    "testId": 78,
    "memberof": "spec/pattern-matching/ObjectMatcher.spec.ts~describe76.describe77",
    "testDepth": 2,
    "static": true,
    "longname": "spec/pattern-matching/ObjectMatcher.spec.ts~describe76.describe77.describe78",
    "access": null,
    "description": "when working with Tiny Types",
    "lineNumber": 8
  },
  {
    "__docId__": 312,
    "kind": "test",
    "name": "it79",
    "testId": 79,
    "memberof": "spec/pattern-matching/ObjectMatcher.spec.ts~describe76.describe77.describe78",
    "testDepth": 3,
    "static": true,
    "longname": "spec/pattern-matching/ObjectMatcher.spec.ts~describe76.describe77.describe78.it79",
    "access": null,
    "description": "matches identical objects",
    "lineNumber": 40
  },
  {
    "__docId__": 313,
    "kind": "test",
    "name": "describe80",
    "testId": 80,
    "memberof": "spec/pattern-matching/ObjectMatcher.spec.ts~describe76.describe77",
    "testDepth": 2,
    "static": true,
    "longname": "spec/pattern-matching/ObjectMatcher.spec.ts~describe76.describe77.describe80",
    "access": null,
    "description": "when working with regular classes",
    "lineNumber": 55
  },
  {
    "__docId__": 314,
    "kind": "testFile",
    "name": "spec/pattern-matching/StringMatcher.spec.ts",
    "content": "import 'mocha';\n\nimport { given } from 'mocha-testdata';\n\nimport { StringMatcher } from '../../src/pattern-matching';\nimport { expect } from '../expect';\n\ndescribe('pattern-matching', () => {\n    describe('StringMatcher', () => {\n\n        given(\n            ['hello', 'matched a regular expression'],\n            ['hello world', 'matched the identity matcher'],\n        ).it('matches string and regular expressions', (input: string, expected_result: string) => {\n            const result = new StringMatcher(input)\n                .when('hello world', _ => `matched the identity matcher`)\n                .when(/^[Hh]ello.*$/, _ => `matched a regular expression`)\n                .else(_ => `else, received \"${_}\"`);\n\n            expect(result).to.equal(expected_result);\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/spec/pattern-matching/StringMatcher.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 315,
    "kind": "test",
    "name": "describe81",
    "testId": 81,
    "memberof": "spec/pattern-matching/StringMatcher.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/pattern-matching/StringMatcher.spec.ts~describe81",
    "access": null,
    "description": "pattern-matching",
    "lineNumber": 5
  },
  {
    "__docId__": 316,
    "kind": "test",
    "name": "describe82",
    "testId": 82,
    "memberof": "spec/pattern-matching/StringMatcher.spec.ts~describe81",
    "testDepth": 1,
    "static": true,
    "longname": "spec/pattern-matching/StringMatcher.spec.ts~describe81.describe82",
    "access": null,
    "description": "StringMatcher",
    "lineNumber": 6
  },
  {
    "__docId__": 317,
    "kind": "testFile",
    "name": "spec/pattern-matching/rules/MatchesAnything.spec.ts",
    "content": "import 'mocha';\n\nimport { given } from 'mocha-testdata';\n\nimport { MatchesAnything } from '../../../src/pattern-matching/rules';\nimport { expect } from '../../expect';\n\ndescribe('pattern-matching', () => {\n\n    describe('rules', () => {\n\n        describe('MatchesAnything', () => {\n\n            given([\n                1,\n                false,\n                {},\n            ]).it('is always executed', (input: any) => {\n                const rule = new MatchesAnything(_ => _);\n\n                expect(rule.matches(input)).to.be.true;                              // tslint:disable-line:no-unused-expression\n            });\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/spec/pattern-matching/rules/MatchesAnything.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 318,
    "kind": "test",
    "name": "describe83",
    "testId": 83,
    "memberof": "spec/pattern-matching/rules/MatchesAnything.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/pattern-matching/rules/MatchesAnything.spec.ts~describe83",
    "access": null,
    "description": "pattern-matching",
    "lineNumber": 5
  },
  {
    "__docId__": 319,
    "kind": "test",
    "name": "describe84",
    "testId": 84,
    "memberof": "spec/pattern-matching/rules/MatchesAnything.spec.ts~describe83",
    "testDepth": 1,
    "static": true,
    "longname": "spec/pattern-matching/rules/MatchesAnything.spec.ts~describe83.describe84",
    "access": null,
    "description": "rules",
    "lineNumber": 6
  },
  {
    "__docId__": 320,
    "kind": "test",
    "name": "describe85",
    "testId": 85,
    "memberof": "spec/pattern-matching/rules/MatchesAnything.spec.ts~describe83.describe84",
    "testDepth": 2,
    "static": true,
    "longname": "spec/pattern-matching/rules/MatchesAnything.spec.ts~describe83.describe84.describe85",
    "access": null,
    "description": "MatchesAnything",
    "lineNumber": 7
  },
  {
    "__docId__": 321,
    "kind": "testFile",
    "name": "spec/predicates/and.spec.ts",
    "content": "import 'mocha';\n\nimport { given } from 'mocha-testdata';\nimport sinon = require('sinon');\n\nimport { and, ensure, isDefined, isGreaterThan, isInteger, isLessThan, Predicate, TinyType } from '../../src';\nimport { expect } from '../expect';\n\ndescribe('predicates', () => {\n\n    /** @test {and} */\n    describe('::and', () => {\n\n        class InvestmentLengthInYears extends TinyType {\n            constructor(public readonly value: number) {\n                super();\n                ensure('InvestmentLengthInYears', value, and(\n                    isDefined(),\n                    isInteger(),\n                    isGreaterThan(0),\n                    isLessThan(50),\n                ));\n            }\n        }\n\n        it('ensures that all the predicates are met', () => {\n            expect(() => new InvestmentLengthInYears(10)).to.not.throw();\n        });\n\n        given(\n            [ null, 'InvestmentLengthInYears should be defined' ],\n            [ 0.2,  'InvestmentLengthInYears should be an integer' ],\n            [ -2,   'InvestmentLengthInYears should be greater than 0' ],\n            [ 52,   'InvestmentLengthInYears should be less than 50' ],\n        ).\n        it('complains upon the first unmet predicate', (value: any, errorMessage: string) => {\n            expect(() => new InvestmentLengthInYears(value))\n                .to.throw(errorMessage);\n        });\n\n        it('complains if there are no predicates specified', () => {\n            expect(() => and()).to.throw(`Looks like you haven't specified any predicates to check the value against?`);\n        });\n\n        it('stops evaluating the predicates upon the first failure', () => {\n            const predicateEvaluated = sinon.spy();\n            const predicateReturning = (result: boolean) => Predicate.to(result ? 'pass' : 'fail', (value: any) => {\n                predicateEvaluated();\n                return result;\n            });\n\n            expect(() => ensure('value', null, and(\n                predicateReturning(true),\n                predicateReturning(false),\n                predicateReturning(true),\n            ))).to.throw('value should fail');\n\n            expect(predicateEvaluated.callCount).to.equal(2);\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/spec/predicates/and.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 322,
    "kind": "test",
    "name": "describe86",
    "testId": 86,
    "memberof": "spec/predicates/and.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/predicates/and.spec.ts~describe86",
    "access": null,
    "description": "predicates",
    "lineNumber": 5
  },
  {
    "__docId__": 323,
    "kind": "test",
    "name": "describe87",
    "testId": 87,
    "memberof": "spec/predicates/and.spec.ts~describe86",
    "testDepth": 1,
    "static": true,
    "longname": "spec/predicates/and.spec.ts~describe86.describe87",
    "access": null,
    "description": "::and",
    "lineNumber": 7,
    "testTargets": [
      "and"
    ]
  },
  {
    "__docId__": 324,
    "kind": "test",
    "name": "it88",
    "testId": 88,
    "memberof": "spec/predicates/and.spec.ts~describe86.describe87",
    "testDepth": 2,
    "static": true,
    "longname": "spec/predicates/and.spec.ts~describe86.describe87.it88",
    "access": null,
    "description": "ensures that all the predicates are met",
    "lineNumber": 21
  },
  {
    "__docId__": 325,
    "kind": "test",
    "name": "it89",
    "testId": 89,
    "memberof": "spec/predicates/and.spec.ts~describe86.describe87",
    "testDepth": 2,
    "static": true,
    "longname": "spec/predicates/and.spec.ts~describe86.describe87.it89",
    "access": null,
    "description": "complains if there are no predicates specified",
    "lineNumber": 29
  },
  {
    "__docId__": 326,
    "kind": "test",
    "name": "it90",
    "testId": 90,
    "memberof": "spec/predicates/and.spec.ts~describe86.describe87",
    "testDepth": 2,
    "static": true,
    "longname": "spec/predicates/and.spec.ts~describe86.describe87.it90",
    "access": null,
    "description": "stops evaluating the predicates upon the first failure",
    "lineNumber": 32
  },
  {
    "__docId__": 327,
    "kind": "testFile",
    "name": "spec/predicates/endsWith.spec.ts",
    "content": "import 'mocha';\n\nimport { given } from 'mocha-testdata';\n\nimport { endsWith, ensure, TinyType } from '../../src';\nimport { expect } from '../expect';\n\ndescribe('predicates', () => {\n\n    /** @test {endsWith} */\n    describe('::endsWith', () => {\n\n        class TextFileName extends TinyType {\n            constructor(public readonly value: string) {\n                super();\n\n                ensure('TextFileName', value, endsWith('.txt'));\n            }\n        }\n\n        it('ensures that the argument ends with a given suffix', () => {\n            expect(() => new TextFileName('notes.txt')).to.not.throw();\n        });\n\n        given([\n            undefined,\n            null,\n            {},\n            'string',\n            5,\n        ]).\n        it('complains if the value does not end with a given suffix', (value: any) => {\n            expect(() => new TextFileName(value))\n                .to.throw(`TextFileName should end with '.txt'`);\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/spec/predicates/endsWith.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 328,
    "kind": "test",
    "name": "describe91",
    "testId": 91,
    "memberof": "spec/predicates/endsWith.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/predicates/endsWith.spec.ts~describe91",
    "access": null,
    "description": "predicates",
    "lineNumber": 5
  },
  {
    "__docId__": 329,
    "kind": "test",
    "name": "describe92",
    "testId": 92,
    "memberof": "spec/predicates/endsWith.spec.ts~describe91",
    "testDepth": 1,
    "static": true,
    "longname": "spec/predicates/endsWith.spec.ts~describe91.describe92",
    "access": null,
    "description": "::endsWith",
    "lineNumber": 7,
    "testTargets": [
      "endsWith"
    ]
  },
  {
    "__docId__": 330,
    "kind": "test",
    "name": "it93",
    "testId": 93,
    "memberof": "spec/predicates/endsWith.spec.ts~describe91.describe92",
    "testDepth": 2,
    "static": true,
    "longname": "spec/predicates/endsWith.spec.ts~describe91.describe92.it93",
    "access": null,
    "description": "ensures that the argument ends with a given suffix",
    "lineNumber": 21
  },
  {
    "__docId__": 331,
    "kind": "testFile",
    "name": "spec/predicates/hasLengthOf.spec.ts",
    "content": "import 'mocha';\n\nimport { given } from 'mocha-testdata';\n\nimport { ensure, hasLengthOf, TinyType } from '../../src';\nimport { expect } from '../expect';\n\ndescribe('predicates', () => {\n\n    /** @test {hasLengthOf} */\n    describe('::hasLengthOf', () => {\n\n        /** @test {hasLengthOf} */\n        describe('when used with strings', () => {\n            class Password extends TinyType {\n                constructor(public readonly value: string) {\n                    super();\n\n                    ensure('Password', value, hasLengthOf(8));\n                }\n            }\n\n            it('ensures that the value has a correct length', () => {\n                expect(() => new Password('P@ssw0rd')).to.not.throw();\n            });\n\n            given(\n                '7_chars',\n                '9___chars',\n            ).\n            it('complains if the value is of incorrect length', (value: string) => {\n                expect(() => new Password(value)).to.throw(`Password should have a property \"length\" that is equal to 8`);\n            });\n        });\n\n        /** @test {hasLengthOf} */\n        describe('when used with arrays', () => {\n            class Collection extends TinyType {\n                constructor(public readonly values: string[]) {\n                    super();\n\n                    ensure('Collection', values, hasLengthOf(2));\n                }\n            }\n\n            it('ensures that the value has a correct length', () => {\n                expect(() => new Collection(['a', 'b'])).to.not.throw();\n            });\n\n            given(\n                ['a'],\n                ['a', 'b', 'c'],\n            ).\n            it('complains if the value is of incorrect length', (values: string[]) => {\n                expect(() => new Collection(values)).to.throw(`Collection should have a property \"length\" that is equal to 2`);\n            });\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/spec/predicates/hasLengthOf.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 332,
    "kind": "test",
    "name": "describe94",
    "testId": 94,
    "memberof": "spec/predicates/hasLengthOf.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/predicates/hasLengthOf.spec.ts~describe94",
    "access": null,
    "description": "predicates",
    "lineNumber": 5
  },
  {
    "__docId__": 333,
    "kind": "test",
    "name": "describe95",
    "testId": 95,
    "memberof": "spec/predicates/hasLengthOf.spec.ts~describe94",
    "testDepth": 1,
    "static": true,
    "longname": "spec/predicates/hasLengthOf.spec.ts~describe94.describe95",
    "access": null,
    "description": "::hasLengthOf",
    "lineNumber": 7,
    "testTargets": [
      "hasLengthOf"
    ]
  },
  {
    "__docId__": 334,
    "kind": "test",
    "name": "describe96",
    "testId": 96,
    "memberof": "spec/predicates/hasLengthOf.spec.ts~describe94.describe95",
    "testDepth": 2,
    "static": true,
    "longname": "spec/predicates/hasLengthOf.spec.ts~describe94.describe95.describe96",
    "access": null,
    "description": "when used with strings",
    "lineNumber": 9,
    "testTargets": [
      "hasLengthOf"
    ]
  },
  {
    "__docId__": 335,
    "kind": "test",
    "name": "it97",
    "testId": 97,
    "memberof": "spec/predicates/hasLengthOf.spec.ts~describe94.describe95.describe96",
    "testDepth": 3,
    "static": true,
    "longname": "spec/predicates/hasLengthOf.spec.ts~describe94.describe95.describe96.it97",
    "access": null,
    "description": "ensures that the value has a correct length",
    "lineNumber": 23
  },
  {
    "__docId__": 336,
    "kind": "test",
    "name": "describe98",
    "testId": 98,
    "memberof": "spec/predicates/hasLengthOf.spec.ts~describe94.describe95",
    "testDepth": 2,
    "static": true,
    "longname": "spec/predicates/hasLengthOf.spec.ts~describe94.describe95.describe98",
    "access": null,
    "description": "when used with arrays",
    "lineNumber": 32,
    "testTargets": [
      "hasLengthOf"
    ]
  },
  {
    "__docId__": 337,
    "kind": "test",
    "name": "it99",
    "testId": 99,
    "memberof": "spec/predicates/hasLengthOf.spec.ts~describe94.describe95.describe98",
    "testDepth": 3,
    "static": true,
    "longname": "spec/predicates/hasLengthOf.spec.ts~describe94.describe95.describe98.it99",
    "access": null,
    "description": "ensures that the value has a correct length",
    "lineNumber": 46
  },
  {
    "__docId__": 338,
    "kind": "testFile",
    "name": "spec/predicates/isArray.spec.ts",
    "content": "import 'mocha';\n\nimport { given } from 'mocha-testdata';\n\nimport { ensure, isArray, TinyType } from '../../src';\nimport { expect } from '../expect';\n\ndescribe('predicates', () => {\n\n    /** @test {isArray} */\n    describe('::isArray', () => {\n\n        class Strings extends TinyType {\n            constructor(public readonly values: string[]) {\n                super();\n\n                ensure('Collection', values, isArray());\n            }\n        }\n\n        it('ensures that the argument is an array', () => {\n            expect(() => new Strings(['lorem', 'ipsum'])).to.not.throw();\n        });\n\n        given([\n            undefined,\n            null,\n            {},\n            false,\n            5,\n        ]).\n        it('complains if the value is not an array', (value: any) => {\n            expect(() => new Strings(value)).to.throw(`Collection should be an array`);\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/spec/predicates/isArray.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 339,
    "kind": "test",
    "name": "describe100",
    "testId": 100,
    "memberof": "spec/predicates/isArray.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/predicates/isArray.spec.ts~describe100",
    "access": null,
    "description": "predicates",
    "lineNumber": 5
  },
  {
    "__docId__": 340,
    "kind": "test",
    "name": "describe101",
    "testId": 101,
    "memberof": "spec/predicates/isArray.spec.ts~describe100",
    "testDepth": 1,
    "static": true,
    "longname": "spec/predicates/isArray.spec.ts~describe100.describe101",
    "access": null,
    "description": "::isArray",
    "lineNumber": 7,
    "testTargets": [
      "isArray"
    ]
  },
  {
    "__docId__": 341,
    "kind": "test",
    "name": "it102",
    "testId": 102,
    "memberof": "spec/predicates/isArray.spec.ts~describe100.describe101",
    "testDepth": 2,
    "static": true,
    "longname": "spec/predicates/isArray.spec.ts~describe100.describe101.it102",
    "access": null,
    "description": "ensures that the argument is an array",
    "lineNumber": 21
  },
  {
    "__docId__": 342,
    "kind": "testFile",
    "name": "spec/predicates/isBoolean.spec.ts",
    "content": "import 'mocha';\n\nimport { given } from 'mocha-testdata';\n\nimport { ensure, isBoolean, TinyType } from '../../src';\nimport { expect } from '../expect';\n\ndescribe('predicates', () => {\n\n    /** @test {isBoolean} */\n    describe('::isBoolean', () => {\n\n        class MarketingOptIn extends TinyType {\n            constructor(public readonly value: boolean) {\n                super();\n\n                ensure('MarketingOptIn', value, isBoolean());\n            }\n        }\n\n        it('ensures that the argument is a boolean value', () => {\n            expect(() => new MarketingOptIn(false)).to.not.throw();\n        });\n\n        given([\n            undefined,\n            null,\n            {},\n            'string',\n            5,\n        ]).\n        it('complains if the value is not a boolean', (value: any) => {\n            expect(() => new MarketingOptIn(value)).to.throw(`MarketingOptIn should be a boolean value`);\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/spec/predicates/isBoolean.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 343,
    "kind": "test",
    "name": "describe103",
    "testId": 103,
    "memberof": "spec/predicates/isBoolean.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/predicates/isBoolean.spec.ts~describe103",
    "access": null,
    "description": "predicates",
    "lineNumber": 5
  },
  {
    "__docId__": 344,
    "kind": "test",
    "name": "describe104",
    "testId": 104,
    "memberof": "spec/predicates/isBoolean.spec.ts~describe103",
    "testDepth": 1,
    "static": true,
    "longname": "spec/predicates/isBoolean.spec.ts~describe103.describe104",
    "access": null,
    "description": "::isBoolean",
    "lineNumber": 7,
    "testTargets": [
      "isBoolean"
    ]
  },
  {
    "__docId__": 345,
    "kind": "test",
    "name": "it105",
    "testId": 105,
    "memberof": "spec/predicates/isBoolean.spec.ts~describe103.describe104",
    "testDepth": 2,
    "static": true,
    "longname": "spec/predicates/isBoolean.spec.ts~describe103.describe104.it105",
    "access": null,
    "description": "ensures that the argument is a boolean value",
    "lineNumber": 21
  },
  {
    "__docId__": 346,
    "kind": "testFile",
    "name": "spec/predicates/isDefined.spec.ts",
    "content": "import 'mocha';\n\nimport { given } from 'mocha-testdata';\n\nimport { ensure, isDefined, TinyType } from '../../src';\nimport { expect } from '../expect';\n\ndescribe('predicates', () => {\n\n    /** @test {isDefined} */\n    describe('::isDefined', () => {\n        class UserName extends TinyType {\n            constructor(public readonly value: string) {\n                super();\n\n                ensure('UserName', value, isDefined());\n            }\n        }\n\n        it('ensures that the value is defined', () => {\n            expect(() => new UserName('Jan')).to.not.throw();\n        });\n\n        given<any>([\n            'Jan',\n            '',\n            true,\n            false,\n        ]).\n        it('works for any defined value, even the \"falsy\" ones', (value: any) => {\n            expect(() => new UserName(value)).to.not.throw();\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/spec/predicates/isDefined.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 347,
    "kind": "test",
    "name": "describe106",
    "testId": 106,
    "memberof": "spec/predicates/isDefined.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/predicates/isDefined.spec.ts~describe106",
    "access": null,
    "description": "predicates",
    "lineNumber": 5
  },
  {
    "__docId__": 348,
    "kind": "test",
    "name": "describe107",
    "testId": 107,
    "memberof": "spec/predicates/isDefined.spec.ts~describe106",
    "testDepth": 1,
    "static": true,
    "longname": "spec/predicates/isDefined.spec.ts~describe106.describe107",
    "access": null,
    "description": "::isDefined",
    "lineNumber": 7,
    "testTargets": [
      "isDefined"
    ]
  },
  {
    "__docId__": 349,
    "kind": "test",
    "name": "it108",
    "testId": 108,
    "memberof": "spec/predicates/isDefined.spec.ts~describe106.describe107",
    "testDepth": 2,
    "static": true,
    "longname": "spec/predicates/isDefined.spec.ts~describe106.describe107.it108",
    "access": null,
    "description": "ensures that the value is defined",
    "lineNumber": 21
  },
  {
    "__docId__": 350,
    "kind": "testFile",
    "name": "spec/predicates/isEqualTo.spec.ts",
    "content": "import 'mocha';\n\nimport { given } from 'mocha-testdata';\n\nimport { ensure, isEqualTo, TinyTypeOf } from '../../src';\nimport { expect } from '../expect';\n\ndescribe('predicates', () => {\n\n    /** @test {isEqualTo} */\n    describe('::isEqualTo', () => {\n\n        /** @test {isEqualTo} */\n        describe('when working with Tiny Types', () => {\n\n            class AccountId         extends TinyTypeOf<number>() {}\n            class Command           extends TinyTypeOf<AccountId>() {}\n            class UpgradeAccount    extends Command {}\n\n            class AccountsService {\n                constructor(public readonly loggedInUser: AccountId) {}\n                handle(command: Command) {\n                    ensure('AccountId', command.value, isEqualTo(this.loggedInUser));\n                }\n            }\n\n            it('ensures that objects are identical by value', () => {\n                const loggedInUser      = new AccountId(42);\n                const accounts          = new AccountsService(loggedInUser);\n\n                const upgradeOwnAccount = new UpgradeAccount(loggedInUser);\n\n                // tslint:disable-next-line:no-unused-expression\n                expect(() => accounts.handle(upgradeOwnAccount)).to.not.throw();\n            });\n\n            it('complains if the objects are not identical by value', () => {\n                const hacker            = new AccountId(666);\n                const anotherUser       = new AccountId(42);\n                const accounts          = new AccountsService(hacker);\n\n                const upgradeAnotherAccount = new UpgradeAccount(anotherUser);\n\n                expect(() => accounts.handle(upgradeAnotherAccount))\n                    .to.throw('AccountId should be equal to AccountId(value=666)');\n            });\n        });\n\n        /** @test {isEqualTo} */\n        describe('when working with primitive types', () => {\n\n            given([\n                null,\n                undefined,\n                Number.POSITIVE_INFINITY,\n                1,\n                false,\n                'string',\n                {},\n                [],\n            ]).\n            it('ensures they are equal', (value: any) => {\n                // tslint:disable-next-line:no-unused-expression\n                expect(() => ensure('Val', value, isEqualTo(value))).to.not.throw();\n            });\n\n            given([\n                1,\n                false,\n                'string',\n                {},\n                [],\n            ]).\n            it('complains if they are not equal', (value: any) => {\n                expect(() => ensure('Value', value, isEqualTo('expected value')))\n                    .to.throw('Value should be equal to expected value');\n            });\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/spec/predicates/isEqualTo.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 351,
    "kind": "test",
    "name": "describe109",
    "testId": 109,
    "memberof": "spec/predicates/isEqualTo.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/predicates/isEqualTo.spec.ts~describe109",
    "access": null,
    "description": "predicates",
    "lineNumber": 5
  },
  {
    "__docId__": 352,
    "kind": "test",
    "name": "describe110",
    "testId": 110,
    "memberof": "spec/predicates/isEqualTo.spec.ts~describe109",
    "testDepth": 1,
    "static": true,
    "longname": "spec/predicates/isEqualTo.spec.ts~describe109.describe110",
    "access": null,
    "description": "::isEqualTo",
    "lineNumber": 7,
    "testTargets": [
      "isEqualTo"
    ]
  },
  {
    "__docId__": 353,
    "kind": "test",
    "name": "describe111",
    "testId": 111,
    "memberof": "spec/predicates/isEqualTo.spec.ts~describe109.describe110",
    "testDepth": 2,
    "static": true,
    "longname": "spec/predicates/isEqualTo.spec.ts~describe109.describe110.describe111",
    "access": null,
    "description": "when working with Tiny Types",
    "lineNumber": 9,
    "testTargets": [
      "isEqualTo"
    ]
  },
  {
    "__docId__": 354,
    "kind": "test",
    "name": "it112",
    "testId": 112,
    "memberof": "spec/predicates/isEqualTo.spec.ts~describe109.describe110.describe111",
    "testDepth": 3,
    "static": true,
    "longname": "spec/predicates/isEqualTo.spec.ts~describe109.describe110.describe111.it112",
    "access": null,
    "description": "ensures that objects are identical by value",
    "lineNumber": 56
  },
  {
    "__docId__": 355,
    "kind": "test",
    "name": "it113",
    "testId": 113,
    "memberof": "spec/predicates/isEqualTo.spec.ts~describe109.describe110.describe111",
    "testDepth": 3,
    "static": true,
    "longname": "spec/predicates/isEqualTo.spec.ts~describe109.describe110.describe111.it113",
    "access": null,
    "description": "complains if the objects are not identical by value",
    "lineNumber": 63
  },
  {
    "__docId__": 356,
    "kind": "test",
    "name": "describe114",
    "testId": 114,
    "memberof": "spec/predicates/isEqualTo.spec.ts~describe109.describe110",
    "testDepth": 2,
    "static": true,
    "longname": "spec/predicates/isEqualTo.spec.ts~describe109.describe110.describe114",
    "access": null,
    "description": "when working with primitive types",
    "lineNumber": 73,
    "testTargets": [
      "isEqualTo"
    ]
  },
  {
    "__docId__": 357,
    "kind": "testFile",
    "name": "spec/predicates/isFunction.spec.ts",
    "content": "import 'mocha';\n\nimport { given } from 'mocha-testdata';\n\nimport { ensure, isFunction } from '../../src';\nimport { expect } from '../expect';\n\ndescribe('predicates', () => {\n\n    /** @test {isFunction} */\n    describe('::isFunction', () => {\n\n        // eslint-disable-next-line unicorn/consistent-function-scoping\n        function run(callback: () => void) {\n            ensure('callback', callback, isFunction())\n        }\n\n        // eslint-disable-next-line unicorn/consistent-function-scoping\n        function validCallback() {\n            // do nothing\n        }\n\n        it('ensures that the argument in a function', () => {\n            expect(() => run(validCallback)).to.not.throw();\n        });\n\n        given([\n            function () {},                     // eslint-disable-line @typescript-eslint/no-empty-function\n            () => {},                           // eslint-disable-line @typescript-eslint/no-empty-function\n            async function asyncFunction() {},  // eslint-disable-line @typescript-eslint/no-empty-function\n            Array,\n            Date,\n            Object,\n            Number,\n            String,\n            Symbol,\n        ]).\n        it('works for any type of function', (callback: any) => {\n            expect(() => run(callback)).to.not.throw();\n        });\n\n        given([\n            undefined,\n            null,\n            {},\n            [],\n            true,\n            'string',\n        ]).\n        it('complains if the value is not a function', (callback: any) => {\n            expect(() => run(callback)).to.throw(`callback should be a function`);\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/spec/predicates/isFunction.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 358,
    "kind": "test",
    "name": "describe115",
    "testId": 115,
    "memberof": "spec/predicates/isFunction.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/predicates/isFunction.spec.ts~describe115",
    "access": null,
    "description": "predicates",
    "lineNumber": 5
  },
  {
    "__docId__": 359,
    "kind": "test",
    "name": "describe116",
    "testId": 116,
    "memberof": "spec/predicates/isFunction.spec.ts~describe115",
    "testDepth": 1,
    "static": true,
    "longname": "spec/predicates/isFunction.spec.ts~describe115.describe116",
    "access": null,
    "description": "::isFunction",
    "lineNumber": 7,
    "testTargets": [
      "isFunction"
    ]
  },
  {
    "__docId__": 360,
    "kind": "test",
    "name": "it117",
    "testId": 117,
    "memberof": "spec/predicates/isFunction.spec.ts~describe115.describe116",
    "testDepth": 2,
    "static": true,
    "longname": "spec/predicates/isFunction.spec.ts~describe115.describe116.it117",
    "access": null,
    "description": "ensures that the argument in a function",
    "lineNumber": 30
  },
  {
    "__docId__": 361,
    "kind": "testFile",
    "name": "spec/predicates/isGreaterThan.spec.ts",
    "content": "import 'mocha';\n\nimport { given } from 'mocha-testdata';\n\nimport { ensure, isGreaterThan, TinyType } from '../../src';\nimport { expect } from '../expect';\n\ndescribe('predicates', () => {\n\n    /** @test {isGreaterThan} */\n    describe('::isGreaterThan', () => {\n        class InvestmentLength extends TinyType {\n            constructor(public readonly value: number) {\n                super();\n\n                ensure('InvestmentLength', value, isGreaterThan(0));\n            }\n        }\n\n        it('ensures that the argument is greater than a specified number', () => {\n            expect(() => new InvestmentLength(5)).to.not.throw();\n        });\n\n        it('complains if the argument is more than a specified number', () => {\n            expect(() => new InvestmentLength(-1)).to.throw(`InvestmentLength should be greater than 0`);\n        });\n\n        given([\n            0,\n            -1,\n            undefined,\n            null,\n            {},\n            'string',\n        ]).\n        it('complains if the value does not meet the predicate', (value: any) => {\n            expect(() => new InvestmentLength(value)).to.throw(`InvestmentLength should be greater than 0`);\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/spec/predicates/isGreaterThan.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 362,
    "kind": "test",
    "name": "describe118",
    "testId": 118,
    "memberof": "spec/predicates/isGreaterThan.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/predicates/isGreaterThan.spec.ts~describe118",
    "access": null,
    "description": "predicates",
    "lineNumber": 5
  },
  {
    "__docId__": 363,
    "kind": "test",
    "name": "describe119",
    "testId": 119,
    "memberof": "spec/predicates/isGreaterThan.spec.ts~describe118",
    "testDepth": 1,
    "static": true,
    "longname": "spec/predicates/isGreaterThan.spec.ts~describe118.describe119",
    "access": null,
    "description": "::isGreaterThan",
    "lineNumber": 7,
    "testTargets": [
      "isGreaterThan"
    ]
  },
  {
    "__docId__": 364,
    "kind": "test",
    "name": "it120",
    "testId": 120,
    "memberof": "spec/predicates/isGreaterThan.spec.ts~describe118.describe119",
    "testDepth": 2,
    "static": true,
    "longname": "spec/predicates/isGreaterThan.spec.ts~describe118.describe119.it120",
    "access": null,
    "description": "ensures that the argument is greater than a specified number",
    "lineNumber": 21
  },
  {
    "__docId__": 365,
    "kind": "test",
    "name": "it121",
    "testId": 121,
    "memberof": "spec/predicates/isGreaterThan.spec.ts~describe118.describe119",
    "testDepth": 2,
    "static": true,
    "longname": "spec/predicates/isGreaterThan.spec.ts~describe118.describe119.it121",
    "access": null,
    "description": "complains if the argument is more than a specified number",
    "lineNumber": 24
  },
  {
    "__docId__": 366,
    "kind": "testFile",
    "name": "spec/predicates/isGreaterThanOrEqualTo.spec.ts",
    "content": "import 'mocha';\n\nimport { given } from 'mocha-testdata';\n\nimport { ensure, isGreaterThanOrEqualTo, TinyType } from '../../src';\nimport { expect } from '../expect';\n\ndescribe('predicates', () => {\n\n    /** @test {isGreaterThanOrEqualTo} */\n    describe('::isGreaterThanOrEqualTo', () => {\n        class InvestmentLength extends TinyType {\n            constructor(public readonly value: number) {\n                super();\n\n                ensure('InvestmentLength', value, isGreaterThanOrEqualTo(0));\n            }\n        }\n\n        given(0, 1).\n        it('ensures that the argument is greater than or equal to a specified number', (value: number) => {\n            expect(() => new InvestmentLength(value)).to.not.throw();\n        });\n\n        it('complains if the argument is less than the lower bound', () => {\n            expect(() => new InvestmentLength(-1))\n                .to.throw(`InvestmentLength should either be equal to 0 or be greater than 0`);\n        });\n\n        given([\n            -1,\n            undefined,\n            null,\n            {},\n            'string',\n        ]).\n        it('complains if the value does not meet the predicate', (value: any) => {\n            expect(() => new InvestmentLength(value))\n                .to.throw(`InvestmentLength should either be equal to 0 or be greater than 0`);\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/spec/predicates/isGreaterThanOrEqualTo.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 367,
    "kind": "test",
    "name": "describe122",
    "testId": 122,
    "memberof": "spec/predicates/isGreaterThanOrEqualTo.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/predicates/isGreaterThanOrEqualTo.spec.ts~describe122",
    "access": null,
    "description": "predicates",
    "lineNumber": 5
  },
  {
    "__docId__": 368,
    "kind": "test",
    "name": "describe123",
    "testId": 123,
    "memberof": "spec/predicates/isGreaterThanOrEqualTo.spec.ts~describe122",
    "testDepth": 1,
    "static": true,
    "longname": "spec/predicates/isGreaterThanOrEqualTo.spec.ts~describe122.describe123",
    "access": null,
    "description": "::isGreaterThanOrEqualTo",
    "lineNumber": 7,
    "testTargets": [
      "isGreaterThanOrEqualTo"
    ]
  },
  {
    "__docId__": 369,
    "kind": "test",
    "name": "it124",
    "testId": 124,
    "memberof": "spec/predicates/isGreaterThanOrEqualTo.spec.ts~describe122.describe123",
    "testDepth": 2,
    "static": true,
    "longname": "spec/predicates/isGreaterThanOrEqualTo.spec.ts~describe122.describe123.it124",
    "access": null,
    "description": "complains if the argument is less than the lower bound",
    "lineNumber": 25
  },
  {
    "__docId__": 370,
    "kind": "testFile",
    "name": "spec/predicates/isInRange.spec.ts",
    "content": "import 'mocha';\n\nimport { given } from 'mocha-testdata';\n\nimport { ensure, isInRange, TinyType } from '../../src';\nimport { expect } from '../expect';\n\ndescribe('predicates', () => {\n\n    /** @test {isInRange} */\n    describe('::isInRange', () => {\n\n        class InvestmentLength extends TinyType {\n            constructor(public readonly value: number) {\n                super();\n\n                ensure('InvestmentLength', value, isInRange(1, 5));\n            }\n        }\n\n        given(1, 2, 3, 4, 5).\n        it('ensures that the value is within the range specified', (value: number) => {\n            expect(() => new InvestmentLength(value)).to.not.throw();\n        });\n\n        it('complains if the value is lower than the lower bound', () => {\n            expect(() => new InvestmentLength(0))\n                .to.throw(`InvestmentLength should either be equal to 1 or be greater than 1`);\n        });\n\n        it('complains if the value is greater than the upper bound', () => {\n            expect(() => new InvestmentLength(6))\n                .to.throw(`InvestmentLength should either be less than 5 or be equal to 5`);\n        });\n\n        given([\n            undefined,\n            null,\n            {},\n            false,\n        ]).\n        it('complains if the value is of a wrong type', (value: any) => {\n            expect(() => new InvestmentLength(value))\n                .to.throw(`InvestmentLength should either be equal to 1 or be greater than 1`);\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/spec/predicates/isInRange.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 371,
    "kind": "test",
    "name": "describe125",
    "testId": 125,
    "memberof": "spec/predicates/isInRange.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/predicates/isInRange.spec.ts~describe125",
    "access": null,
    "description": "predicates",
    "lineNumber": 5
  },
  {
    "__docId__": 372,
    "kind": "test",
    "name": "describe126",
    "testId": 126,
    "memberof": "spec/predicates/isInRange.spec.ts~describe125",
    "testDepth": 1,
    "static": true,
    "longname": "spec/predicates/isInRange.spec.ts~describe125.describe126",
    "access": null,
    "description": "::isInRange",
    "lineNumber": 7,
    "testTargets": [
      "isInRange"
    ]
  },
  {
    "__docId__": 373,
    "kind": "test",
    "name": "it127",
    "testId": 127,
    "memberof": "spec/predicates/isInRange.spec.ts~describe125.describe126",
    "testDepth": 2,
    "static": true,
    "longname": "spec/predicates/isInRange.spec.ts~describe125.describe126.it127",
    "access": null,
    "description": "complains if the value is lower than the lower bound",
    "lineNumber": 25
  },
  {
    "__docId__": 374,
    "kind": "test",
    "name": "it128",
    "testId": 128,
    "memberof": "spec/predicates/isInRange.spec.ts~describe125.describe126",
    "testDepth": 2,
    "static": true,
    "longname": "spec/predicates/isInRange.spec.ts~describe125.describe126.it128",
    "access": null,
    "description": "complains if the value is greater than the upper bound",
    "lineNumber": 29
  },
  {
    "__docId__": 375,
    "kind": "testFile",
    "name": "spec/predicates/isInstanceOf.spec.ts",
    "content": "import 'mocha';\n\nimport { given } from 'mocha-testdata';\n\nimport { ensure, isInstanceOf, TinyType } from '../../src';\nimport { expect } from '../expect';\n\ndescribe('predicates', () => {\n\n    /** @test {isInstanceOf} */\n    describe('::isInstanceOf', () => {\n        class Birthday extends TinyType {\n            constructor(public readonly value: Date) {\n                super();\n\n                ensure('Birthday', value, isInstanceOf(Date));\n            }\n        }\n\n        it('ensures that the argument is an instance of Date', () => {\n            expect(() => new Birthday(new Date())).to.not.throw();\n        });\n\n        given([\n            '2018-10-10',\n            undefined,\n            null,\n            {},\n            'string',\n        ]).\n        it('complains if the value does not meet the predicate', (value: any) => {\n            expect(() => new Birthday(value)).to.throw(`Birthday should be instance of Date`);\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/spec/predicates/isInstanceOf.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 376,
    "kind": "test",
    "name": "describe129",
    "testId": 129,
    "memberof": "spec/predicates/isInstanceOf.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/predicates/isInstanceOf.spec.ts~describe129",
    "access": null,
    "description": "predicates",
    "lineNumber": 5
  },
  {
    "__docId__": 377,
    "kind": "test",
    "name": "describe130",
    "testId": 130,
    "memberof": "spec/predicates/isInstanceOf.spec.ts~describe129",
    "testDepth": 1,
    "static": true,
    "longname": "spec/predicates/isInstanceOf.spec.ts~describe129.describe130",
    "access": null,
    "description": "::isInstanceOf",
    "lineNumber": 7,
    "testTargets": [
      "isInstanceOf"
    ]
  },
  {
    "__docId__": 378,
    "kind": "test",
    "name": "it131",
    "testId": 131,
    "memberof": "spec/predicates/isInstanceOf.spec.ts~describe129.describe130",
    "testDepth": 2,
    "static": true,
    "longname": "spec/predicates/isInstanceOf.spec.ts~describe129.describe130.it131",
    "access": null,
    "description": "ensures that the argument is an instance of Date",
    "lineNumber": 21
  },
  {
    "__docId__": 379,
    "kind": "testFile",
    "name": "spec/predicates/isInteger.spec.ts",
    "content": "import 'mocha';\n\nimport { given } from 'mocha-testdata';\n\nimport { ensure, isInteger, TinyType } from '../../src';\nimport { expect } from '../expect';\n\ndescribe('predicates', () => {\n\n    /** @test {isInteger} */\n    describe('::isInteger', () => {\n        class AgeInYears extends TinyType {\n            constructor(public readonly value: number) {\n                super();\n\n                ensure('AgeInYears', value, isInteger());\n            }\n        }\n\n        it('ensures that the argument in an integer', () => {\n            expect(() => new AgeInYears(42)).to.not.throw();\n        });\n\n        given([\n            1 / 3,\n            0.42,\n            undefined,\n            null,\n            Number.NaN,\n            Number.POSITIVE_INFINITY,\n            {},\n            'string',\n        ]).\n        it('complains if the value is not an integer', (value: any) => {\n            expect(() => new AgeInYears(value)).to.throw(`AgeInYears should be an integer`);\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/spec/predicates/isInteger.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 380,
    "kind": "test",
    "name": "describe132",
    "testId": 132,
    "memberof": "spec/predicates/isInteger.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/predicates/isInteger.spec.ts~describe132",
    "access": null,
    "description": "predicates",
    "lineNumber": 5
  },
  {
    "__docId__": 381,
    "kind": "test",
    "name": "describe133",
    "testId": 133,
    "memberof": "spec/predicates/isInteger.spec.ts~describe132",
    "testDepth": 1,
    "static": true,
    "longname": "spec/predicates/isInteger.spec.ts~describe132.describe133",
    "access": null,
    "description": "::isInteger",
    "lineNumber": 7,
    "testTargets": [
      "isInteger"
    ]
  },
  {
    "__docId__": 382,
    "kind": "test",
    "name": "it134",
    "testId": 134,
    "memberof": "spec/predicates/isInteger.spec.ts~describe132.describe133",
    "testDepth": 2,
    "static": true,
    "longname": "spec/predicates/isInteger.spec.ts~describe132.describe133.it134",
    "access": null,
    "description": "ensures that the argument in an integer",
    "lineNumber": 21
  },
  {
    "__docId__": 383,
    "kind": "testFile",
    "name": "spec/predicates/isLessThan.spec.ts",
    "content": "import 'mocha';\n\nimport { given } from 'mocha-testdata';\n\nimport { ensure, isLessThan, TinyType } from '../../src';\nimport { expect } from '../expect';\n\ndescribe('predicates', () => {\n\n    /** @test {isLessThan} */\n    describe('::isLessThan', () => {\n        class InvestmentLength extends TinyType {\n            constructor(public readonly value: number) {\n                super();\n\n                ensure('InvestmentLength', value, isLessThan(50));\n            }\n        }\n\n        it('ensures that the argument is less than a specified number', () => {\n            expect(() => new InvestmentLength(5)).to.not.throw();\n        });\n\n        it('complains if the argument is more than a specified number', () => {\n            expect(() => new InvestmentLength(55)).to.throw(`InvestmentLength should be less than 50`);\n        });\n\n        given([\n            undefined,\n            null,\n            {},\n            'string',\n        ]).\n        it('complains if the value is not an integer', (value: any) => {\n            expect(() => new InvestmentLength(value)).to.throw(`InvestmentLength should be less than 50`);\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/spec/predicates/isLessThan.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 384,
    "kind": "test",
    "name": "describe135",
    "testId": 135,
    "memberof": "spec/predicates/isLessThan.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/predicates/isLessThan.spec.ts~describe135",
    "access": null,
    "description": "predicates",
    "lineNumber": 5
  },
  {
    "__docId__": 385,
    "kind": "test",
    "name": "describe136",
    "testId": 136,
    "memberof": "spec/predicates/isLessThan.spec.ts~describe135",
    "testDepth": 1,
    "static": true,
    "longname": "spec/predicates/isLessThan.spec.ts~describe135.describe136",
    "access": null,
    "description": "::isLessThan",
    "lineNumber": 7,
    "testTargets": [
      "isLessThan"
    ]
  },
  {
    "__docId__": 386,
    "kind": "test",
    "name": "it137",
    "testId": 137,
    "memberof": "spec/predicates/isLessThan.spec.ts~describe135.describe136",
    "testDepth": 2,
    "static": true,
    "longname": "spec/predicates/isLessThan.spec.ts~describe135.describe136.it137",
    "access": null,
    "description": "ensures that the argument is less than a specified number",
    "lineNumber": 21
  },
  {
    "__docId__": 387,
    "kind": "test",
    "name": "it138",
    "testId": 138,
    "memberof": "spec/predicates/isLessThan.spec.ts~describe135.describe136",
    "testDepth": 2,
    "static": true,
    "longname": "spec/predicates/isLessThan.spec.ts~describe135.describe136.it138",
    "access": null,
    "description": "complains if the argument is more than a specified number",
    "lineNumber": 24
  },
  {
    "__docId__": 388,
    "kind": "testFile",
    "name": "spec/predicates/isLessThanOrEqual.spec.ts",
    "content": "import 'mocha';\n\nimport { given } from 'mocha-testdata';\n\nimport { ensure, isLessThanOrEqualTo, TinyType } from '../../src';\nimport { expect } from '../expect';\n\ndescribe('predicates', () => {\n\n    /** @test {isLessThanOrEqualTo} */\n    describe('::isLessThanOrEqualTo', () => {\n        class InvestmentLength extends TinyType {\n            constructor(public readonly value: number) {\n                super();\n\n                ensure('InvestmentLength', value, isLessThanOrEqualTo(50));\n            }\n        }\n\n        given(49, 50).\n        it('ensures that the argument is less than or equal to the upper bound', (value: number) => {\n            expect(() => new InvestmentLength(value)).to.not.throw();\n        });\n\n        it('complains if the argument is greater than the upper bound', () => {\n            expect(() => new InvestmentLength(55))\n                .to.throw(`InvestmentLength should either be less than 50 or be equal to 50`);\n        });\n\n        given([\n            undefined,\n            null,\n            {},\n            'string',\n        ]).\n        it('complains if the value is not an integer', (value: any) => {\n            expect(() => new InvestmentLength(value))\n                .to.throw(`InvestmentLength should either be less than 50 or be equal to 50`);\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/spec/predicates/isLessThanOrEqual.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 389,
    "kind": "test",
    "name": "describe139",
    "testId": 139,
    "memberof": "spec/predicates/isLessThanOrEqual.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/predicates/isLessThanOrEqual.spec.ts~describe139",
    "access": null,
    "description": "predicates",
    "lineNumber": 5
  },
  {
    "__docId__": 390,
    "kind": "test",
    "name": "describe140",
    "testId": 140,
    "memberof": "spec/predicates/isLessThanOrEqual.spec.ts~describe139",
    "testDepth": 1,
    "static": true,
    "longname": "spec/predicates/isLessThanOrEqual.spec.ts~describe139.describe140",
    "access": null,
    "description": "::isLessThanOrEqualTo",
    "lineNumber": 7,
    "testTargets": [
      "isLessThanOrEqualTo"
    ]
  },
  {
    "__docId__": 391,
    "kind": "test",
    "name": "it141",
    "testId": 141,
    "memberof": "spec/predicates/isLessThanOrEqual.spec.ts~describe139.describe140",
    "testDepth": 2,
    "static": true,
    "longname": "spec/predicates/isLessThanOrEqual.spec.ts~describe139.describe140.it141",
    "access": null,
    "description": "complains if the argument is greater than the upper bound",
    "lineNumber": 25
  },
  {
    "__docId__": 392,
    "kind": "testFile",
    "name": "spec/predicates/isNotBlank.spec.ts",
    "content": "import 'mocha';\n\nimport { given } from 'mocha-testdata';\n\nimport { ensure, isNotBlank, TinyType } from '../../src';\nimport { expect } from '../expect';\n\ndescribe('predicates', () => {\n\n    /** @test {isBlank} */\n    describe('::isNotBlank', () => {\n        class FirstName extends TinyType {\n            constructor(public readonly value: string) {\n                super();\n\n                ensure('FirstName', value, isNotBlank());\n            }\n        }\n\n        it('ensures that the argument in not blank', () => {\n            expect(() => new FirstName('Jan')).to.not.throw();\n        });\n\n        given([\n            undefined,\n            null,\n            {},\n            [],\n            42,\n            ''\n        ]).\n        it('complains if the value is blank or not a string', (value: any) => {\n            expect(() => new FirstName(value)).to.throw(`FirstName should not be blank`);\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/spec/predicates/isNotBlank.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 393,
    "kind": "test",
    "name": "describe142",
    "testId": 142,
    "memberof": "spec/predicates/isNotBlank.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/predicates/isNotBlank.spec.ts~describe142",
    "access": null,
    "description": "predicates",
    "lineNumber": 5
  },
  {
    "__docId__": 394,
    "kind": "test",
    "name": "describe143",
    "testId": 143,
    "memberof": "spec/predicates/isNotBlank.spec.ts~describe142",
    "testDepth": 1,
    "static": true,
    "longname": "spec/predicates/isNotBlank.spec.ts~describe142.describe143",
    "access": null,
    "description": "::isNotBlank",
    "lineNumber": 7,
    "testTargets": [
      "isBlank"
    ]
  },
  {
    "__docId__": 395,
    "kind": "test",
    "name": "it144",
    "testId": 144,
    "memberof": "spec/predicates/isNotBlank.spec.ts~describe142.describe143",
    "testDepth": 2,
    "static": true,
    "longname": "spec/predicates/isNotBlank.spec.ts~describe142.describe143.it144",
    "access": null,
    "description": "ensures that the argument in not blank",
    "lineNumber": 21
  },
  {
    "__docId__": 396,
    "kind": "testFile",
    "name": "spec/predicates/isNumber.spec.ts",
    "content": "import 'mocha';\n\nimport { given } from 'mocha-testdata';\n\nimport { ensure, isNumber, TinyType } from '../../src';\nimport { expect } from '../expect';\n\ndescribe('predicates', () => {\n\n    /** @test {isNumber} */\n    describe('::isNumber', () => {\n        class Percentage extends TinyType {\n            constructor(public readonly value: number) {\n                super();\n\n                ensure('Percentage', value, isNumber());\n            }\n        }\n\n        it('ensures that the argument in a number', () => {\n            expect(() => new Percentage(42)).to.not.throw();\n        });\n\n        given([\n            1 / 3,\n            0.42,\n            0o3,\n            0xB4D455,\n            Number.NaN,\n            Number.POSITIVE_INFINITY,\n            Number.NEGATIVE_INFINITY,\n        ]).\n        it('works for any type of number', (value: any) => {\n            expect(() => new Percentage(value)).to.not.throw();\n        });\n\n        given([\n            undefined,\n            null,\n            {},\n            'string',\n        ]).\n        it('complains if the value is not a number', (value: any) => {\n            expect(() => new Percentage(value)).to.throw(`Percentage should be a number`);\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/spec/predicates/isNumber.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 397,
    "kind": "test",
    "name": "describe145",
    "testId": 145,
    "memberof": "spec/predicates/isNumber.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/predicates/isNumber.spec.ts~describe145",
    "access": null,
    "description": "predicates",
    "lineNumber": 5
  },
  {
    "__docId__": 398,
    "kind": "test",
    "name": "describe146",
    "testId": 146,
    "memberof": "spec/predicates/isNumber.spec.ts~describe145",
    "testDepth": 1,
    "static": true,
    "longname": "spec/predicates/isNumber.spec.ts~describe145.describe146",
    "access": null,
    "description": "::isNumber",
    "lineNumber": 7,
    "testTargets": [
      "isNumber"
    ]
  },
  {
    "__docId__": 399,
    "kind": "test",
    "name": "it147",
    "testId": 147,
    "memberof": "spec/predicates/isNumber.spec.ts~describe145.describe146",
    "testDepth": 2,
    "static": true,
    "longname": "spec/predicates/isNumber.spec.ts~describe145.describe146.it147",
    "access": null,
    "description": "ensures that the argument in a number",
    "lineNumber": 21
  },
  {
    "__docId__": 400,
    "kind": "testFile",
    "name": "spec/predicates/isOneOf.spec.ts",
    "content": "import 'mocha';\n\nimport { given } from 'mocha-testdata';\n\nimport { ensure, isOneOf, TinyType } from '../../src';\nimport { expect } from '../expect';\n\ndescribe('predicates', () => {\n\n    /** @test {isOneOf} */\n    describe('::isOneOf', () => {\n\n        class StreetLight extends TinyType {\n            constructor(public readonly value: string) {\n                super();\n\n                ensure('StreetLight', value, isOneOf('red', 'yellow', 'green'));\n            }\n        }\n\n        given('red', 'yellow', 'green').\n        it('ensures that the value is equal to one of the allowed values', (value: string) => {\n            expect(() => new StreetLight(value)).to.not.throw();\n        });\n\n        it('complains if the value not one the allowed ones', () => {\n            expect(() => new StreetLight('green-ish'))\n                .to.throw(`StreetLight should either be equal to red, be equal to yellow or be equal to green`);\n        });\n\n        given([\n            undefined,\n            null,\n            {},\n            false,\n        ]).\n        it('complains if the value is of a wrong type', (value: any) => {\n            expect(() => new StreetLight(value))\n                .to.throw(`StreetLight should either be equal to red, be equal to yellow or be equal to green`);\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/spec/predicates/isOneOf.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 401,
    "kind": "test",
    "name": "describe148",
    "testId": 148,
    "memberof": "spec/predicates/isOneOf.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/predicates/isOneOf.spec.ts~describe148",
    "access": null,
    "description": "predicates",
    "lineNumber": 5
  },
  {
    "__docId__": 402,
    "kind": "test",
    "name": "describe149",
    "testId": 149,
    "memberof": "spec/predicates/isOneOf.spec.ts~describe148",
    "testDepth": 1,
    "static": true,
    "longname": "spec/predicates/isOneOf.spec.ts~describe148.describe149",
    "access": null,
    "description": "::isOneOf",
    "lineNumber": 7,
    "testTargets": [
      "isOneOf"
    ]
  },
  {
    "__docId__": 403,
    "kind": "test",
    "name": "it150",
    "testId": 150,
    "memberof": "spec/predicates/isOneOf.spec.ts~describe148.describe149",
    "testDepth": 2,
    "static": true,
    "longname": "spec/predicates/isOneOf.spec.ts~describe148.describe149.it150",
    "access": null,
    "description": "complains if the value not one the allowed ones",
    "lineNumber": 25
  },
  {
    "__docId__": 404,
    "kind": "testFile",
    "name": "spec/predicates/isPlainObject.spec.ts",
    "content": "import 'mocha';\n\nimport { given } from 'mocha-testdata';\n\nimport { ensure, isPlainObject, isString, property } from '../../src';\nimport { expect } from '../expect';\n\ndescribe('predicates', () => {\n\n    /** @test {isPlainObject} */\n    describe('::isPlainObject', () => {\n\n        given([\n            {},\n            { 'name': 'Alice' },\n            Object.create({}),\n            Object.create(Object.prototype),\n            Object.create(null),\n        ]).\n        it('ensures that the argument is a plain object', (value: any) => {\n            expect(() => ensure('value', value, isPlainObject())).to.not.throw();\n        });\n\n        class Person {\n            constructor(public readonly name: string) {\n            }\n        }\n\n        given([\n            undefined,\n            null,\n            [],\n            false,\n            5,\n            'name',\n            new Person('Jan'),\n            () => {},               // eslint-disable-line @typescript-eslint/no-empty-function\n        ]).\n        it('complains if the value is not a plain object', (value: any) => {\n            expect(() => ensure('value', value, isPlainObject())).to.throw(`value should be a plain object`);\n        });\n\n        it('is generic', () => {\n            interface Person {\n                name: string;\n            }\n\n            const person: Person = { name: 'Jan' };\n\n            expect(() => {\n                ensure('person', person, isPlainObject<Person>(), property('name', isString()))\n            }).to.not.throw();\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/spec/predicates/isPlainObject.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 405,
    "kind": "test",
    "name": "describe151",
    "testId": 151,
    "memberof": "spec/predicates/isPlainObject.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/predicates/isPlainObject.spec.ts~describe151",
    "access": null,
    "description": "predicates",
    "lineNumber": 5
  },
  {
    "__docId__": 406,
    "kind": "test",
    "name": "describe152",
    "testId": 152,
    "memberof": "spec/predicates/isPlainObject.spec.ts~describe151",
    "testDepth": 1,
    "static": true,
    "longname": "spec/predicates/isPlainObject.spec.ts~describe151.describe152",
    "access": null,
    "description": "::isPlainObject",
    "lineNumber": 7,
    "testTargets": [
      "isPlainObject"
    ]
  },
  {
    "__docId__": 407,
    "kind": "test",
    "name": "it153",
    "testId": 153,
    "memberof": "spec/predicates/isPlainObject.spec.ts~describe151.describe152",
    "testDepth": 2,
    "static": true,
    "longname": "spec/predicates/isPlainObject.spec.ts~describe151.describe152.it153",
    "access": null,
    "description": "is generic",
    "lineNumber": 42
  },
  {
    "__docId__": 408,
    "kind": "testFile",
    "name": "spec/predicates/isString.spec.ts",
    "content": "import 'mocha';\n\nimport { given } from 'mocha-testdata';\n\nimport { ensure, isString, TinyType } from '../../src';\nimport { expect } from '../expect';\n\ndescribe('predicates', () => {\n\n    /** @test {isString} */\n    describe('::isString', () => {\n        class FirstName extends TinyType {\n            constructor(public readonly value: string) {\n                super();\n\n                ensure('FirstName', value, isString());\n            }\n        }\n\n        it('ensures that the argument is a string', () => {\n            expect(() => new FirstName('Jan')).to.not.throw();\n        });\n\n        given([\n            undefined,\n            null,\n            {},\n            [],\n            42,\n        ]).\n        it('complains if the value is not a string', (value: any) => {\n            expect(() => new FirstName(value)).to.throw(`FirstName should be a string`);\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/spec/predicates/isString.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 409,
    "kind": "test",
    "name": "describe154",
    "testId": 154,
    "memberof": "spec/predicates/isString.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/predicates/isString.spec.ts~describe154",
    "access": null,
    "description": "predicates",
    "lineNumber": 5
  },
  {
    "__docId__": 410,
    "kind": "test",
    "name": "describe155",
    "testId": 155,
    "memberof": "spec/predicates/isString.spec.ts~describe154",
    "testDepth": 1,
    "static": true,
    "longname": "spec/predicates/isString.spec.ts~describe154.describe155",
    "access": null,
    "description": "::isString",
    "lineNumber": 7,
    "testTargets": [
      "isString"
    ]
  },
  {
    "__docId__": 411,
    "kind": "test",
    "name": "it156",
    "testId": 156,
    "memberof": "spec/predicates/isString.spec.ts~describe154.describe155",
    "testDepth": 2,
    "static": true,
    "longname": "spec/predicates/isString.spec.ts~describe154.describe155.it156",
    "access": null,
    "description": "ensures that the argument is a string",
    "lineNumber": 21
  },
  {
    "__docId__": 412,
    "kind": "testFile",
    "name": "spec/predicates/matches.spec.ts",
    "content": "import 'mocha';\n\nimport { given } from 'mocha-testdata';\n\nimport { ensure, matches, TinyType } from '../../src';\nimport { expect } from '../expect';\n\ndescribe('predicates', () => {\n\n    /** @test {matches} */\n    describe('::matches', () => {\n\n        class CompanyEmailAddress extends TinyType {\n            constructor(public readonly value: string) {\n                super();\n\n                ensure('CompanyEmailAddress', value, matches(/[a-z]+\\.[a-z]+@example\\.org/));\n            }\n        }\n\n        it('ensures that the argument matches a regular expression', () => {\n            expect(() => new CompanyEmailAddress('jan.molak@example.org')).to.not.throw();\n        });\n\n        given([\n            undefined,\n            null,\n            {},\n            'string',\n            5,\n        ]).\n        it('complains if the value does not match the regular expression', (value: any) => {\n            expect(() => new CompanyEmailAddress(value))\n                .to.throw(`CompanyEmailAddress should match pattern /[a-z]+\\\\.[a-z]+@example\\\\.org/`);\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/spec/predicates/matches.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 413,
    "kind": "test",
    "name": "describe157",
    "testId": 157,
    "memberof": "spec/predicates/matches.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/predicates/matches.spec.ts~describe157",
    "access": null,
    "description": "predicates",
    "lineNumber": 5
  },
  {
    "__docId__": 414,
    "kind": "test",
    "name": "describe158",
    "testId": 158,
    "memberof": "spec/predicates/matches.spec.ts~describe157",
    "testDepth": 1,
    "static": true,
    "longname": "spec/predicates/matches.spec.ts~describe157.describe158",
    "access": null,
    "description": "::matches",
    "lineNumber": 7,
    "testTargets": [
      "matches"
    ]
  },
  {
    "__docId__": 415,
    "kind": "test",
    "name": "it159",
    "testId": 159,
    "memberof": "spec/predicates/matches.spec.ts~describe157.describe158",
    "testDepth": 2,
    "static": true,
    "longname": "spec/predicates/matches.spec.ts~describe157.describe158.it159",
    "access": null,
    "description": "ensures that the argument matches a regular expression",
    "lineNumber": 21
  },
  {
    "__docId__": 416,
    "kind": "testFile",
    "name": "spec/predicates/or.spec.ts",
    "content": "import 'mocha';\n\nimport { given } from 'mocha-testdata';\n\nimport { ensure, isDefined, isEqualTo, isGreaterThan, isInteger, isLessThan, or, TinyType } from '../../src';\nimport { expect } from '../expect';\n\ndescribe('predicates', () => {\n\n    /** @test {or} */\n    describe('::or', () => {\n\n        class Percentage extends TinyType {\n            constructor(public readonly value: number) {\n                super();\n                ensure('Percentage', value,\n                    isDefined(),\n                    isInteger(),\n                    or(isEqualTo(0), isGreaterThan(0)),\n                    or(isLessThan(100), isEqualTo(100)),\n                );\n            }\n        }\n\n        given(0, 1, 99, 100).\n        it('ensures that at least one of the `or` predicates is met', (value: number) => {\n            expect(() => new Percentage(value)).to.not.throw();\n        });\n\n        given(\n            [-1,  'Percentage should either be equal to 0 or be greater than 0'],\n            [101, 'Percentage should either be less than 100 or be equal to 100'],\n        ).\n        it('complains if at least one of the `or` predicates is not met', (value: number, errorMessage: string) => {\n            expect(() => new Percentage(value))\n                .to.throw(errorMessage);\n        });\n\n        it('complains if there are no predicates specified', () => {\n            expect(() => or()).to.throw(`Looks like you haven't specified any predicates to check the value against?`);\n        });\n\n        it('concatenates the error messages in a human-friendly way', () => {\n            expect(() => ensure('Project name', 'node.js',\n                or(isEqualTo('Serenity/JS'), isEqualTo('TinyTypes'), isEqualTo('Build Monitor')),\n            )).to.throw(\n                'Project name should either be equal to Serenity/JS, be equal to TinyTypes or be equal to Build Monitor',\n            );\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/spec/predicates/or.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 417,
    "kind": "test",
    "name": "describe160",
    "testId": 160,
    "memberof": "spec/predicates/or.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/predicates/or.spec.ts~describe160",
    "access": null,
    "description": "predicates",
    "lineNumber": 5
  },
  {
    "__docId__": 418,
    "kind": "test",
    "name": "describe161",
    "testId": 161,
    "memberof": "spec/predicates/or.spec.ts~describe160",
    "testDepth": 1,
    "static": true,
    "longname": "spec/predicates/or.spec.ts~describe160.describe161",
    "access": null,
    "description": "::or",
    "lineNumber": 7,
    "testTargets": [
      "or"
    ]
  },
  {
    "__docId__": 419,
    "kind": "test",
    "name": "it162",
    "testId": 162,
    "memberof": "spec/predicates/or.spec.ts~describe160.describe161",
    "testDepth": 2,
    "static": true,
    "longname": "spec/predicates/or.spec.ts~describe160.describe161.it162",
    "access": null,
    "description": "complains if there are no predicates specified",
    "lineNumber": 30
  },
  {
    "__docId__": 420,
    "kind": "test",
    "name": "it163",
    "testId": 163,
    "memberof": "spec/predicates/or.spec.ts~describe160.describe161",
    "testDepth": 2,
    "static": true,
    "longname": "spec/predicates/or.spec.ts~describe160.describe161.it163",
    "access": null,
    "description": "concatenates the error messages in a human-friendly way",
    "lineNumber": 33
  },
  {
    "__docId__": 421,
    "kind": "testFile",
    "name": "spec/predicates/property.spec.ts",
    "content": "import 'mocha';\n\nimport { given } from 'mocha-testdata';\n\nimport { ensure, isDefined, isGreaterThanOrEqualTo, isString, property, TinyType } from '../../src';\nimport { expect } from '../expect';\n\ndescribe('predicates', () => {\n\n    /** @test {property} */\n    describe('::property', () => {\n\n        /** @test {property} */\n        describe('shifts the focus from the value itself to its property', () => {\n\n            class Name extends TinyType {\n                constructor(public readonly value: string) {\n                    super();\n                    ensure('Name', value,\n                        isDefined(),\n                        property('length', isDefined(), isGreaterThanOrEqualTo(3)),\n                        isString(),\n                    );\n                }\n            }\n\n            /** @test {property} */\n            it('ensures that the property meets the predicates', () => {\n                expect(() => new Name('Jan')).to.not.throw();\n            });\n\n            given(\n                undefined,\n                null,\n            ).\n            it('complains when the value is undefined', (value: any) => {\n                expect(() => new Name({ length: value } as any)).\n                    to.throw(`Name should have a property \"length\" that is defined`);\n            });\n\n            given<any, string>(\n                [undefined,             'Name should be defined'],\n                [{ length: undefined }, 'Name should have a property \"length\" that is defined'],\n                ['JM',                  'Name should have a property \"length\" that is either equal to 3 or is greater than 3'],\n                [['J', 'a', 'n'],       'Name should be a string'],\n            ).\n            it('can be composed with other predicates', (value: any, expectedError: string) => {\n                expect(() => new Name(value)).\n                    to.throw(expectedError);\n            });\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/spec/predicates/property.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 422,
    "kind": "test",
    "name": "describe164",
    "testId": 164,
    "memberof": "spec/predicates/property.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/predicates/property.spec.ts~describe164",
    "access": null,
    "description": "predicates",
    "lineNumber": 5
  },
  {
    "__docId__": 423,
    "kind": "test",
    "name": "describe165",
    "testId": 165,
    "memberof": "spec/predicates/property.spec.ts~describe164",
    "testDepth": 1,
    "static": true,
    "longname": "spec/predicates/property.spec.ts~describe164.describe165",
    "access": null,
    "description": "::property",
    "lineNumber": 7,
    "testTargets": [
      "property"
    ]
  },
  {
    "__docId__": 424,
    "kind": "test",
    "name": "describe166",
    "testId": 166,
    "memberof": "spec/predicates/property.spec.ts~describe164.describe165",
    "testDepth": 2,
    "static": true,
    "longname": "spec/predicates/property.spec.ts~describe164.describe165.describe166",
    "access": null,
    "description": "shifts the focus from the value itself to its property",
    "lineNumber": 9,
    "testTargets": [
      "property"
    ]
  },
  {
    "__docId__": 425,
    "kind": "test",
    "name": "it167",
    "testId": 167,
    "memberof": "spec/predicates/property.spec.ts~describe164.describe165.describe166",
    "testDepth": 3,
    "static": true,
    "longname": "spec/predicates/property.spec.ts~describe164.describe165.describe166.it167",
    "access": null,
    "description": "ensures that the property meets the predicates",
    "lineNumber": 24,
    "testTargets": [
      "property"
    ]
  },
  {
    "__docId__": 426,
    "kind": "testFile",
    "name": "spec/predicates/startsWith.spec.ts",
    "content": "import 'mocha';\n\nimport { given } from 'mocha-testdata';\n\nimport { ensure, startsWith, TinyType } from '../../src';\nimport { expect } from '../expect';\n\ndescribe('predicates', () => {\n\n    /** @test {startsWith} */\n    describe('::startsWith', () => {\n\n        class Username extends TinyType {\n            constructor(public readonly value: string) {\n                super();\n\n                ensure('Username', value, startsWith('usr'));\n            }\n        }\n\n        it('ensures that the argument starts with a given prefix', () => {\n            expect(() => new Username('usr123')).to.not.throw();\n        });\n\n        given([\n            undefined,\n            null,\n            {},\n            'string',\n            5,\n        ]).\n        it('complains if the value does not start with the given prefix', (value: any) => {\n            expect(() => new Username(value))\n                .to.throw(`Username should start with 'usr'`);\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/spec/predicates/startsWith.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 427,
    "kind": "test",
    "name": "describe168",
    "testId": 168,
    "memberof": "spec/predicates/startsWith.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/predicates/startsWith.spec.ts~describe168",
    "access": null,
    "description": "predicates",
    "lineNumber": 5
  },
  {
    "__docId__": 428,
    "kind": "test",
    "name": "describe169",
    "testId": 169,
    "memberof": "spec/predicates/startsWith.spec.ts~describe168",
    "testDepth": 1,
    "static": true,
    "longname": "spec/predicates/startsWith.spec.ts~describe168.describe169",
    "access": null,
    "description": "::startsWith",
    "lineNumber": 7,
    "testTargets": [
      "startsWith"
    ]
  },
  {
    "__docId__": 429,
    "kind": "test",
    "name": "it170",
    "testId": 170,
    "memberof": "spec/predicates/startsWith.spec.ts~describe168.describe169",
    "testDepth": 2,
    "static": true,
    "longname": "spec/predicates/startsWith.spec.ts~describe168.describe169.it170",
    "access": null,
    "description": "ensures that the argument starts with a given prefix",
    "lineNumber": 21
  },
  {
    "__docId__": 430,
    "kind": "testFile",
    "name": "spec/serialisation.spec.ts",
    "content": "import 'mocha';\n\nimport { given } from 'mocha-testdata';\n\nimport { JSONObject, TinyType, TinyTypeOf } from '../src';\nimport { expect } from './expect';\n\ndescribe('Serialisation', () => {\n\n    describe('of single-value TinyTypes', () => {\n\n        class Amount extends TinyTypeOf<number>() {}\n        class Name extends TinyTypeOf<string>() {}\n        class Vote extends TinyTypeOf<boolean>() {}\n        class Maybe extends TinyType {\n            constructor(public readonly value: any) {\n                super();\n            }\n        }\n\n        given([\n            { obj: new Amount(0),        expectedType: 'number'    },\n            { obj: new Amount(10/3),     expectedType: 'number'    },\n            { obj: new Name('Jan'),      expectedType: 'string'    },\n            { obj: new Vote(true),       expectedType: 'boolean'   },\n            { obj: new Vote(false),      expectedType: 'boolean'   },\n            { obj: new Maybe(undefined), expectedType: 'undefined' },\n        ]).\n        it('preserves the type of the wrapped value', ({ obj, expectedType: expectedType }) => {\n            expect(obj.toJSON()).to.be.an(expectedType);\n        });\n    });\n\n    describe('of TinyTypes wrapping several primitive values', () => {\n\n        class Person extends TinyType {\n            public role = 'dev';\n\n            static fromJSON(o: JSONObject): Person {\n                return new Person(o.firstName as string, o.lastName as string, o.age as number);\n            }\n\n            constructor(public readonly firstName: string, public readonly lastName: string, public readonly age: number) {\n                super();\n            }\n\n            speak() {\n                return `Hi, I'm ${this.firstName} ${this.lastName}`;\n            }\n        }\n\n        it('uses only the significant fields and retains their type', () => {\n            const p = new Person('John', 'Smith', 42);\n            const serialised = p.toJSON() as JSONObject;\n\n            expect(Object.keys(serialised)).to.include.ordered.members(['age', 'firstName', 'lastName', 'role']);\n            expect(Object.keys(serialised)).to.not.include.members(['speak', 'toJSON', 'toString']);\n\n            expect(serialised.age).to.be.a('number');\n            expect(serialised.firstName).to.be.a('string');\n            expect(serialised.lastName).to.be.a('string');\n            expect(serialised.role).to.be.a('string');\n        });\n    });\n\n    describe('of nested Tiny Types', () => {\n        class FirstName extends TinyTypeOf<string>() {\n            static fromJSON = (v: string) => new FirstName(v);\n        }\n        class LastName  extends TinyTypeOf<string>() {\n            static fromJSON = (v: string) => new LastName(v);\n        }\n        class Age extends TinyTypeOf<number>() {\n            static fromJSON = (v: number) => new Age(v);\n        }\n\n        class AnotherPerson extends TinyType {\n            public role = 'dev';\n\n            static fromJSON(o: JSONObject): AnotherPerson {\n                return new AnotherPerson(\n                    FirstName.fromJSON(o.firstName as string),\n                    LastName.fromJSON(o.lastName as string),\n                    Age.fromJSON(o.age as number),\n                );\n            }\n\n            constructor(public readonly firstName: FirstName,\n                public readonly lastName: LastName,\n                public readonly age: Age,\n            ) {\n                super();\n            }\n\n            speak() {\n                return `Hi, I'm ${this.firstName} ${this.lastName}`;\n            }\n        }\n\n        it('uses only the significant fields and retains the type of their respective values', () => {\n            const p = new AnotherPerson(new FirstName('John'), new LastName('Smith'), new Age(42));\n            const serialised = p.toJSON() as JSONObject;\n\n            expect(Object.keys(serialised)).to.include.ordered.members(['age', 'firstName', 'lastName', 'role']);\n            expect(Object.keys(serialised)).to.not.include.members(['speak', 'toJSON', 'toString']);\n\n            expect(serialised.age).to.be.a('number');\n            expect(serialised.firstName).to.be.a('string');\n            expect(serialised.lastName).to.be.a('string');\n            expect(serialised.role).to.be.a('string');\n        });\n    });\n\n    it('works both ways', () => {\n        class EmployeeId extends TinyTypeOf<number>() {\n            static fromJSON = (id: number) => new EmployeeId(id);\n        }\n\n        class DepartmentId extends TinyTypeOf<string>() {\n            static fromJSON = (id: string) => new DepartmentId(id);\n        }\n\n        class Allocation extends TinyType {\n            static fromJSON = (o: JSONObject) => new Allocation(\n                EmployeeId.fromJSON(o.employeeId as number),\n                DepartmentId.fromJSON(o.departmentId as string),\n            )\n\n            constructor(public readonly employeeId: EmployeeId, public readonly departmentId: DepartmentId) {\n                super();\n            }\n        }\n\n        const allocation = new Allocation(new EmployeeId(1), new DepartmentId('engineering'));\n\n        const deserialised = Allocation.fromJSON({ departmentId: 'engineering', employeeId: 1 });\n\n        expect(deserialised.equals(allocation)).to.be.true;                 // tslint:disable-line:no-unused-expression\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/tiny-types/tiny-types/spec/serialisation.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 431,
    "kind": "test",
    "name": "describe171",
    "testId": 171,
    "memberof": "spec/serialisation.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/serialisation.spec.ts~describe171",
    "access": null,
    "description": "Serialisation",
    "lineNumber": 5
  },
  {
    "__docId__": 432,
    "kind": "test",
    "name": "describe172",
    "testId": 172,
    "memberof": "spec/serialisation.spec.ts~describe171",
    "testDepth": 1,
    "static": true,
    "longname": "spec/serialisation.spec.ts~describe171.describe172",
    "access": null,
    "description": "of single-value TinyTypes",
    "lineNumber": 6
  },
  {
    "__docId__": 433,
    "kind": "test",
    "name": "describe173",
    "testId": 173,
    "memberof": "spec/serialisation.spec.ts~describe171",
    "testDepth": 1,
    "static": true,
    "longname": "spec/serialisation.spec.ts~describe171.describe173",
    "access": null,
    "description": "of TinyTypes wrapping several primitive values",
    "lineNumber": 55
  },
  {
    "__docId__": 434,
    "kind": "test",
    "name": "it174",
    "testId": 174,
    "memberof": "spec/serialisation.spec.ts~describe171.describe173",
    "testDepth": 2,
    "static": true,
    "longname": "spec/serialisation.spec.ts~describe171.describe173.it174",
    "access": null,
    "description": "uses only the significant fields and retains their type",
    "lineNumber": 99
  },
  {
    "__docId__": 435,
    "kind": "test",
    "name": "describe175",
    "testId": 175,
    "memberof": "spec/serialisation.spec.ts~describe171",
    "testDepth": 1,
    "static": true,
    "longname": "spec/serialisation.spec.ts~describe171.describe175",
    "access": null,
    "description": "of nested Tiny Types",
    "lineNumber": 110
  },
  {
    "__docId__": 436,
    "kind": "test",
    "name": "it176",
    "testId": 176,
    "memberof": "spec/serialisation.spec.ts~describe171.describe175",
    "testDepth": 2,
    "static": true,
    "longname": "spec/serialisation.spec.ts~describe171.describe175.it176",
    "access": null,
    "description": "uses only the significant fields and retains the type of their respective values",
    "lineNumber": 199
  },
  {
    "__docId__": 437,
    "kind": "test",
    "name": "it177",
    "testId": 177,
    "memberof": "spec/serialisation.spec.ts~describe171",
    "testDepth": 1,
    "static": true,
    "longname": "spec/serialisation.spec.ts~describe171.it177",
    "access": null,
    "description": "works both ways",
    "lineNumber": 210
  }
]